{"hash":"464cf9a22bcb0fc0812667758e4176a554f788ea","data":{"post":{"title":"Five Minute Design Patterns #2: The Factory Pattern","path":"/blog/2020/five-minute-design-patterns-2-the-factory-pattern/","date":"5 December 2020","timeToRead":5,"tags":[{"id":"Design Patterns","title":"Design Patterns","path":"/blog/tag/Design%20Patterns/"},{"id":"C#","title":"C#","path":"/blog/tag/C%23/"},{"id":"Five Minute Design Patterns","title":"Five Minute Design Patterns","path":"/blog/tag/Five%20Minute%20Design%20Patterns/"}],"description":"The second post in my blog post series where I try to cover all of the Gang of Four Design Patterns in five minutes each, this time it's one of the Creational Patterns... the Factory Pattern!","content":"<p><em>Welcome to the second of my <a href=\"https://www.karam.io/blog/tag/Five%20Minute%20Design%20Patterns/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Five Minute Design Patterns series</a> where I take a brief look at a design pattern every week! I've gone for brief because I think sometimes, less can be more and not everyone always wants to be drowned in text &#x26; UML diagrams. My goal is to keep these to a maximum of a 5 minute read as per the calculation that can be seen under the blog title. This post will cover one of the Creational Patterns - the Factory Pattern. If you're looking for a post on one of the other of the Gang of Four Design Patterns, you will most likely find them <a href=\"https://www.karam.io/blog/tag/Five%20Minute%20Design%20Patterns/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</em></p>\n<hr>\n<h2 id=\"a-brief-overview\"><a href=\"#a-brief-overview\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>A Brief Overview</h2>\n<p>The Factory Pattern is a Creational Design Pattern that aims to provide an interface/abstract class to facilitate object creation, in such a way that the user does not have to specify which type of class they want instantiated, but rather defer it to subclasses.</p>\n<p>By using this pattern, we simplify the object creation process where the object creation process relies on underlying conditional logic to deduct what type of class should be instantiated. It also helps us avoid repeating this logic every time we wish to create the object.</p>\n<p>There are three common variations of this pattern, the Simple Factory Pattern, the Factory Method Pattern and finally the Abstract Factory Pattern.</p>\n<h2 id=\"the-simple-factory-pattern\"><a href=\"#the-simple-factory-pattern\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The Simple Factory Pattern</h2>\n<p>The simplest variation of the Factory Pattern, refers to the existence of a single re-usable Factory class, that holds the sole purpose and responsibility of abstracting away any underlying logic that object creation relies on.</p>\n<p>Instead of repeating some sort of conditional <code class=\"language-text\">if</code> or <code class=\"language-text\">switch</code> logic around <code class=\"language-text\">brand</code> every time a <code class=\"language-text\">Vehicle</code> object is required, we can instead abstract it in to one single re-usable place.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VehicleFactory</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Vehicle</span> <span class=\"token function\">BuildVehicle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Brand</span> brand<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> brand <span class=\"token keyword\">switch</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tBrand<span class=\"token punctuation\">.</span>Honda <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vehicle</span><span class=\"token punctuation\">(</span>Brand<span class=\"token punctuation\">.</span>Honda<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\tBrand<span class=\"token punctuation\">.</span>Ferrari <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vehicle</span><span class=\"token punctuation\">(</span>Brand<span class=\"token punctuation\">.</span>Ferrari<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t_ <span class=\"token operator\">=></span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NotSupportedException</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"The factory cannot construct\n\t\t\t\t\t\t\t\t\t\t\t\t vehicles of the brand\n\t\t\t\t\t\t\t\t\t\t\t\t </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">brand</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> at the current time.\"</span></span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// ...think about how this scales as more Shipping Providers are added</span>\n\t\t<span class=\"token comment\">// If we do this every time we add a new Shipping Provider,</span>\n\t\t<span class=\"token comment\">// are we violating one of the SOLID principles?</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nVehicleFactory<span class=\"token punctuation\">.</span><span class=\"token function\">BuildVehicle</span><span class=\"token punctuation\">(</span>Brand<span class=\"token punctuation\">.</span>Honda<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"the-factory-method-pattern\"><a href=\"#the-factory-method-pattern\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The Factory Method Pattern</h2>\n<p>The Factory Method Pattern provides an abstract class and method (hence the name) that facilitates creation of subclasses (e.g. different types of shipping providers).</p>\n<p>By utilising this abstract class, we create a Factory for every type of <code class=\"language-text\">ShippingProvider</code> and since our code is dependent on a type of <code class=\"language-text\">ShippingProviderFactory</code>, it automatically can handle subclasses such as a <code class=\"language-text\">StandardShippingProviderFactory</code>.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VehicleFactory</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\">Vehicle</span> <span class=\"token function\">BuildVehicle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// This is the \"Factory Method\"</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Vehicle</span> <span class=\"token function\">GetVehicle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> vehicle <span class=\"token operator\">=</span> <span class=\"token function\">BuildVehicle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// If we want to write logic that applies to all vehicle factories</span>\n\t\t<span class=\"token comment\">// we can insert it as \"middleware\" here</span>\n\n\t\t<span class=\"token keyword\">return</span> vehicle<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FerrariFactory</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">VehicleFactory</span></span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Vehicle</span> <span class=\"token function\">BuildVehicle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vehicle</span><span class=\"token punctuation\">(</span>Brand<span class=\"token punctuation\">.</span>Ferrari<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HondaFactory</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">VehicleFactory</span></span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Vehicle</span> <span class=\"token function\">BuildVehicle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vehicle</span><span class=\"token punctuation\">(</span>Brand<span class=\"token punctuation\">.</span>Honda<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Whatever depends on a VehicleFactory can now have any implementation of</span>\n<span class=\"token comment\">// the abstract class injected in and therefore becomes compatible with any</span>\n<span class=\"token comment\">// type of current or future ShippingProvider with ease.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShoppingCart</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">VehicleOrder</span> _vehicleOrder<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">VehicleFactory</span> _vehicleFactory<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token function\">ShoppingCart</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">VehicleOrder</span> vehicleOrder<span class=\"token punctuation\">,</span> <span class=\"token class-name\">VehicleFactory</span> vehicleFactory<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t_vehicleOrder <span class=\"token operator\">=</span> vehicleOrder<span class=\"token punctuation\">;</span>\n\t\t_vehicleFactory <span class=\"token operator\">=</span> vehicleFactory<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">Checkout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// The Shopping Cart can now handle any type of VehicleFactory,</span>\n\t\t\t<span class=\"token comment\">// without needing to change any of its implementation details.</span>\n\t\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> carToBuild <span class=\"token operator\">=</span> _vehicleFactory<span class=\"token punctuation\">.</span><span class=\"token function\">GetVehicle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"Vehicle built of brand </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">carToBuild<span class=\"token punctuation\">.</span><span class=\"token function\">GetBrand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\n\t\t\t\t\t\tfor Order ID: $</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">_vehicleOrder<span class=\"token punctuation\">.</span><span class=\"token function\">GetId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> hondaShoppingCart <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ShoppingCart</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">VehicleOrder</span><span class=\"token punctuation\">(</span>Brand<span class=\"token punctuation\">.</span>Honda<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t\t <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HondaFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> hondaOrderResponse <span class=\"token operator\">=</span> hondaShoppingCart<span class=\"token punctuation\">.</span><span class=\"token function\">Checkout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ferrariShoppingCart <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ShoppingCart</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">VehicleOrder</span><span class=\"token punctuation\">(</span>Brand<span class=\"token punctuation\">.</span>Ferrari<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t\t   <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FerrariFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ferrariOrderResponse <span class=\"token operator\">=</span> ferrariShoppingCart<span class=\"token punctuation\">.</span><span class=\"token function\">Checkout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"the-abstract-factory-pattern\"><a href=\"#the-abstract-factory-pattern\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The Abstract Factory Pattern</h2>\n<p>The third and final variation of the Factory Pattern is very similar to the Factory Method Pattern. The main difference here is that rather than having a single overridable method within our abstract class, all methods within our factory become abstract and can therefore become overriden.</p>\n<p>I like to think of this as the version of the Factory Pattern that caters for families. For example, in our previous example, a Ferrari vehicle... is a single vehicle. In this example, a UK Shipping Provider... can have a family of various couriers. (Obviously Ferrari have numerous car models too, but play along here!)</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShippingProviderFactory</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\">IShippingProvider</span> <span class=\"token function\">CreateStandardShippingProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\">IShippingProvider</span> <span class=\"token function\">CreateExpressShippingProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UkShippingProviderFactory</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ShippingProviderFactory</span></span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">IShippingProvider</span> <span class=\"token function\">CreateStandardShippingProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n\t\t\t\t\t\t\t\t\t\t\t<span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">YodelShippingProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">IShippingProvider</span> <span class=\"token function\">CreateExpressShippingProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n\t\t\t\t\t\t\t\t\t\t\t<span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RoyalMailShippingProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RoyalMailShippingProvider</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IShippingProvider</span></span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">GetCourierName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"Royal Mail\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">GetCourierCountryCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"UK\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Extendable as it handles any time of present or future Shipping Provider Factory.</span>\n<span class=\"token comment\">// e.g. Imagine we introduce French shipping later. No need for code changes in here.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShoppingCart</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ShippingProviderFactory</span> _shippingProviderFactory<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token function\">ShoppingCart</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ShippingProviderFactory</span> shippingProviderFactory<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t_shippingProviderFactory <span class=\"token operator\">=</span> shippingProviderFactory<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">Checkout</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isExpressShipping<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> shippingProvider <span class=\"token operator\">=</span> <span class=\"token return-type class-name\">isExpressShipping <span class=\"token punctuation\">?</span></span>\n\t\t\t\t\t\t\t\t_shippingProviderFactory<span class=\"token punctuation\">.</span><span class=\"token function\">CreateExpressShippingProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span>\n\t\t\t\t\t\t\t\t_shippingProviderFactory<span class=\"token punctuation\">.</span><span class=\"token function\">CreateStandardShippingProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> shippingProviderName <span class=\"token operator\">=</span> shippingProvider<span class=\"token punctuation\">.</span><span class=\"token function\">GetCourierName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// Note: </span>\n\t\t<span class=\"token comment\">// This translation bit violates OCP but our example doesn't revolve around this </span>\n\t\t<span class=\"token comment\">// so ignore it... assume we're following the rule of three to refactor this out.</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shippingProvider<span class=\"token punctuation\">.</span><span class=\"token function\">GetCourierCountryCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"DE\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"Ihr Zustellkurier ist: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">shippingProviderName</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"Your delivery courier is: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">shippingProviderName</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> shoppingCart <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ShoppingCart</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UkShippingProviderFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nshoppingCart <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ShoppingCart</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GermanyShippingProviderFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusion</h2>\n<p>TL;DR - If you find yourself with a class that has to be compatible with a family of sub-classes, however should be decoupled with regards to how those types are created, consider one of the variations of the Factory Pattern.</p>\n<p>By moving out object creation logic in to a factory, we apply the Single Responsibility Principle through ensuring our <code class=\"language-text\">ShoppingCart</code> is told what shipping provider it is using, rather than leave it asking \"which shipping provider do I need, to correctly calculate the prices?\" (<a href=\"https://martinfowler.com/bliki/TellDontAsk.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tell don't ask</a>). We also get the Open/Closed Principle for free too, since every time we need to introduce a brand new <code class=\"language-text\">Vehicle</code> or <code class=\"language-text\">ShippingProvider</code>, we can do so without having to change any code within the <code class=\"language-text\">ShoppingCart</code>.</p>\n<p>If you spot any mistakes, do let me know in the comments below!</p>\n<h2 id=\"source-code\"><a href=\"#source-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Source Code</h2>\n<p>In order to keep the blog posts within this series short and sweet, I've not dumped all of the source code on the posts. If you want to see the full working implementation of the above and explore it yourself, feel free to get the source code from the link below.</p>\n<p><a href=\"https://github.com/karam94/CSharpDesignPatterns/tree/main/Creational\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/karam94/CSharpDesignPatterns/tree/main/Creational</a></p>\n<p>Thanks for reading! 👋</p>\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/patrick-hendry-6xeDIZgoPaw-unsplash.07cc2b7.19c58e44efa5d52289ec9dbf12fe4afc.jpg","size":{"width":860,"height":574},"sizes":"(max-width: 860px) 100vw, 860px","srcset":["/assets/static/patrick-hendry-6xeDIZgoPaw-unsplash.a67b0b2.19c58e44efa5d52289ec9dbf12fe4afc.jpg 480w","/assets/static/patrick-hendry-6xeDIZgoPaw-unsplash.07cc2b7.19c58e44efa5d52289ec9dbf12fe4afc.jpg 860w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 574' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-b58547314498508148d3b0ec8f319cc0'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-b58547314498508148d3b0ec8f319cc0)' width='860' height='574' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAArAEADASIAAhEBAxEB/8QAGwABAAIDAQEAAAAAAAAAAAAABAUGAQMHAgj/xAAxEAACAQMDAgMHAgcAAAAAAAABAgMABBEFEiEGMRMiQQcUMlFhgZEVNEKhscHR4fD/xAAYAQEBAQEBAAAAAAAAAAAAAAABAgAEA//EABwRAQEBAQADAQEAAAAAAAAAAAEAAhESIUExUf/aAAwDAQACEQMRAD8AtltucqzEg0h5pFOEYmn2rW8kS/CPqKxc6lp%2bnNbrNt3XMwhjBHLMaVmC8ksYBZsg816hvFdtjZGeM0y8ghdWaFgD3UfKodiySBTtb6gVhiTJqBhZl3cA4FaP1BpMndyKitTVvd3ubaQSxAFiNjLkfMEgA/Y1Vul%2bom1fWpLWOJo4VjY5fGdwYD0Pbmnpbl0Q3G5QCclq0CDdMpDEZPcelebe3dJlBIbj0pl14lpGHKZUjhqe2kXOnQ2i7jcpFAp5Z2wP51zi81u3utP0KW91K1lnimM07Kw8m0nBIH0qMvuudQ6l0qfT7Oxt7ybcskhhLDbjk4B%2buOK5zbv4V7LayxMkk6kkXkICo2CxOCAedtc6t6XaPZ3ce99F6cIrkFliIcZ%2bE5J5oOra%2bYNa0uztZsrPM0crlMg%2bVsKD6HcK550r1PBounCO4Sa5jlI3rExRcKe2BnB5Py4zQde17UNS1611GDxFe3YSxlsEht2TnAwf8UmvkJdN07WHfRGuYXdjuEWCxG0EqCPtnNU/2Ytt6gkEaYMkbEnJ5Jf/AFQ7bqc22iyWdpbyPK0xmXfHtULhMg/cHFVnTZroX8iRRMJMeHCVbHmBJzn55J5ode6jN9EreSx5ZPOoYoSP4SO4rfcX8slv4cnK%2blUCLV9ctbaYx2kiTTuZXMTpJg4JJIJIHJHy7VJp1TBb6RDLq6y216748FhksCRgqe2Oe1X5lPjU9NT1eH9jpkFrK/DMspXPPcndzQNQg1u6aJ5RpkrhcFpX3lOTxzn/AI1Xre7uCcGV8A9s8fipaaV4bNXicq2M5B9a43pdXR/Yt1peqSSANf6bGT3EYxj8LWmbpy8lUBtUiKHk7Ym4rKX10Zd/jyb8fFu5p8lxMbZnaRnbkZc7v61u6I9NGw9KSBAG1FsY7LATz9zWE6VfzF75wDz5YcYP3NNivrjeR4mAAAMACnQO0pJkYsQOMmh3s%2byZy0ZH0%2b27z3d4cDAKhV4/NNi6ftVfxLn9TmVedvvMa/2zSoZ5tpXxpAu/GA5Apl0ShjKkgnk/Wod6/tRkv//Z' /%3e%3c/svg%3e"},"cover_image_credits":"<a href='https://unsplash.com/@worldsbetweenlines'>Patrick Hendry</a>"}},"context":{}}