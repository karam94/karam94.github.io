{"hash":"6fe372bab11d0fceef4dd394fd3b9f44e24d1db3","data":{"post":{"title":"Five Minute Design Patterns #3: The Prototype Pattern","path":"/blog/2021/five-minute-design-patterns-3-the-prototype-pattern/","date":"2 January 2021","timeToRead":5,"tags":[{"id":"Design Patterns","title":"Design Patterns","path":"/blog/tag/Design%20Patterns/"},{"id":"C#","title":"C#","path":"/blog/tag/C%23/"},{"id":"Five Minute Design Patterns","title":"Five Minute Design Patterns","path":"/blog/tag/Five%20Minute%20Design%20Patterns/"}],"description":"Another post in my blog post series where I try to cover all of the Gang of Four Design Patterns in five minutes each, once again we have one of the Creational Patterns... the Prototype Pattern!","content":"<p><em>Welcome to the third of my <a href=\"https://www.karam.io/blog/tag/Five%20Minute%20Design%20Patterns/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Five Minute Design Patterns series</a> where I take a brief look at a design pattern every week! I've gone for brief because I think sometimes, less can be more and not everyone always wants to be drowned in text &#x26; UML diagrams. My goal is to keep these to a maximum of a 5 minute read as per the calculation that can be seen under the blog title. This post will cover one of the Creational Patterns - the Prototype Pattern. If you're looking for a post on one of the other of the Gang of Four Design Patterns, you will most likely find them <a href=\"https://www.karam.io/blog/tag/Five%20Minute%20Design%20Patterns/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</em></p>\n<hr>\n<h2 id=\"a-brief-overview\"><a href=\"#a-brief-overview\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>A Brief Overview</h2>\n<p>The Prototype Pattern is a Creational Design Pattern that provides an elegant way of solving a common problem - cloning an existing object. At first, this may seem underwhelming, however most of us who have had to manage large codebases will relate with this tedious problem &#x26; how it leads to long-winded &#x26; duplicated code. The reason it leads to this is because more often than not, we take the object we wish to clone, create a new object of the same class &#x26; then manually populate the attributes of the new object through the constructor.</p>\n<p>This becomes more tedious when you want to clone an object that contains private fields. How do you copy the values over, to the clone object, if you can't see what they are? This means that scenarios obviously exist where we can't truly fully clone an object properly as we cannot access the internals.</p>\n<h2 id=\"the-prototype-pattern\"><a href=\"#the-prototype-pattern\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The Prototype Pattern</h2>\n<p>.NET provides an <code class=\"language-text\">ICloneable</code> <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.icloneable?view=net-5.0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">interface</a> &#x26; when implemented it gives you an <code class=\"language-text\">object Clone()</code> method. It isn't an abstract class therefore it doesn't implement the cloning, however the interface is sometimes used to denote when an object type is cloneable. You don't have to use it.</p>\n<p>What you do have to implement is the <code class=\"language-text\">Clone()</code> method &#x26; you can do so using the <code class=\"language-text\">Object.MemberwiseClone</code> <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.object.memberwiseclone?view=net-5.0#System_Object_MemberwiseClone\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">method</a>. This provides a Shallow Copy. However, Deep Copies are also a thing...</p>\n<h2 id=\"shallow-copy\"><a href=\"#shallow-copy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Shallow Copy</h2>\n<p>A <code class=\"language-text\">MemberwiseClone</code> performs a Shallow Copy of an object. This means that the cloned object will have all value types &#x26; strings (which are the obvious exception since strings are reference types) copied over. Reference types to the clone however, are copied over purely as references. This means that changes to the reference, will incur in both the original &#x26; the clone. Simple, right?</p>\n<h2 id=\"deep-copy\"><a href=\"#deep-copy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Deep Copy</h2>\n<p>A Deep Copy is the same as a Shallow Copy except that reference types will have brand new matching instances created on the clone. This means that a change to a reference type on the original, will not affect the clone as the deep copied clone references different object instances altogether.</p>\n<h2 id=\"an-example\"><a href=\"#an-example\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>An Example</h2>\n<p>Here we have a <code class=\"language-text\">DevelopmentTeam</code> class that should be quite self explanatory.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DevelopmentTeam</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">DevelopmentTeam</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">GetName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SetName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> newName<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Name <span class=\"token operator\">=</span> newName<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.\\n\"</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<p>Here we have a <code class=\"language-text\">Developer</code> class.\nIt contains both value types &#x26; reference types.\nThe string array &#x26; reference to the <code class=\"language-text\">DevelopmentTeam</code> are the reference types in this case.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Developer</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ICloneable</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Age <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Role <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> Languages <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">DevelopmentTeam</span> Team <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">Developer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> age<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> role<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> languages<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DevelopmentTeam</span> team<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n            Age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n            Role <span class=\"token operator\">=</span> role<span class=\"token punctuation\">;</span>\n            Languages <span class=\"token operator\">=</span> languages<span class=\"token punctuation\">;</span>\n            Team <span class=\"token operator\">=</span> team<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Shallow Copy</span>\n        <span class=\"token comment\">// All value types are copied to the clone.</span>\n        <span class=\"token comment\">// However reference types (except string) are copied as references.</span>\n        <span class=\"token comment\">// This means changes made to reference types on the original, also affect the clone.</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">object</span></span> <span class=\"token function\">Clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">MemberwiseClone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Deep Copy</span>\n        <span class=\"token comment\">// All value types are copied to the clone.</span>\n        <span class=\"token comment\">// All reference types have brand new matching instances created on the clone.</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">object</span></span> <span class=\"token function\">DeepClone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> clonedDeveloper <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Developer<span class=\"token punctuation\">)</span> <span class=\"token function\">MemberwiseClone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            clonedDeveloper<span class=\"token punctuation\">.</span><span class=\"token function\">SetTeam</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DevelopmentTeam</span><span class=\"token punctuation\">(</span>Team<span class=\"token punctuation\">.</span><span class=\"token function\">GetName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> clonedDeveloper<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SetName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> newName<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Name <span class=\"token operator\">=</span> newName<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SetAge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> newAge<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Age <span class=\"token operator\">=</span> newAge<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SetTeam</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DevelopmentTeam</span> newTeam<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Team <span class=\"token operator\">=</span> newTeam<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"Name &amp; Age: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">Age</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.\\nRole: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">Role</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.\\nLanguages: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\"><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">,</span> Languages<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.\\nTeam: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">Team<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<p>To implement the Shallow Copy, all we do is return a <code class=\"language-text\">MemberwiseClone()</code>.\nTo implement the Deep Copy, we create a Shallow Copy &#x26; then manually set the private values on it. </p>\n<p>The reason why this is useful is because we can actually access the original object's private values within the <code class=\"language-text\">Developer</code> class, versus if we were to try &#x26; construct the object outside. Not rocket science, but still pretty neat.</p>\n<p>Note that within this example, I haven't bothered doing anything with the Languages array reference type.\nI'll leave it as an exercise for you to play around with!</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> teamDevAlot <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DevelopmentTeam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Team Dev-alot\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> originalDeveloper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Developer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Rob Brown\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Software Developer\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"C#\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"JavaScript\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"TypeScript\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> teamDevAlot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----- ORIGINAL DEVELOPER -----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>originalDeveloper<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> shallowClonedDeveloper <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Developer<span class=\"token punctuation\">)</span> originalDeveloper<span class=\"token punctuation\">.</span><span class=\"token function\">Clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----- CLONED DEVELOPER -----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>shallowClonedDeveloper<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----- MODIFYING VALUE TYPES (&amp; STRINGS) ON ORIGINAL, DOES NOT APPLY TO SHALLOW CLONE -----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            originalDeveloper<span class=\"token punctuation\">.</span><span class=\"token function\">SetName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Donald Trump\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            originalDeveloper<span class=\"token punctuation\">.</span><span class=\"token function\">SetAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">74</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----- MODIFIED ORIGINAL DEVELOPER -----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>originalDeveloper<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----- SHALLOW CLONED DEVELOPER -----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>shallowClonedDeveloper<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----- MODIFYING REFERENCE TYPE (TEAM) ON ORIGINAL, DOES ALSO APPLY TO SHALLOW CLONE -----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            teamDevAlot<span class=\"token punctuation\">.</span><span class=\"token function\">SetName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thunderbirds\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----- ORIGINAL DEVELOPER -----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>originalDeveloper<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----- SHALLOW CLONED DEVELOPER -----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>shallowClonedDeveloper<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> deepClonedDeveloper <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Developer<span class=\"token punctuation\">)</span> originalDeveloper<span class=\"token punctuation\">.</span><span class=\"token function\">DeepClone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----- MODIFYING REFERENCE TYPE (TEAM) ON ORIGINAL, HOWEVER, DOES NOT APPLY TO DEEP CLONE -----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            teamDevAlot<span class=\"token punctuation\">.</span><span class=\"token function\">SetName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Manchester United\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----- ORIGINAL DEVELOPER -----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>originalDeveloper<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----- DEEP CLONED DEVELOPER -----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>deepClonedDeveloper<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<p>Notice how on the shallow clones, when we make changes to the reference types on the original object, the changes are also reflected on the shallow clones as they are pointing to the same references.</p>\n<p>Whilst on the deep clones, when we make changes to the reference types on the original object, the changes do not apply to the deep clone as they are pointing to a brand new <code class=\"language-text\">DevelopmentTeam</code> object/reference.</p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusion</h2>\n<p>TL;DR - If you find yourself constantly having to make copies or clones of objects, then you want the Prototype Pattern.</p>\n<p>If you spot any mistakes, do let me know in the comments below!</p>\n<h2 id=\"source-code\"><a href=\"#source-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Source Code</h2>\n<p>In order to keep the blog posts within this series short &#x26; sweet, I've not dumped all of the source code on the posts. If you want to see the full working implementation of the above &#x26; explore it yourself, feel free to get the source code from the link below.</p>\n<p><a href=\"https://github.com/karam94/CSharpDesignPatterns/tree/main/Creational\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/karam94/CSharpDesignPatterns/tree/main/Creational</a></p>\n<p>Thanks for reading! 👋</p>\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/philipp-katzenberger-LLmqyIxcXCE-unsplash.07cc2b7.f3cc2dbcc51332230a1f8a6694c264e0.jpg","size":{"width":860,"height":395},"sizes":"(max-width: 860px) 100vw, 860px","srcset":["/assets/static/philipp-katzenberger-LLmqyIxcXCE-unsplash.a67b0b2.f3cc2dbcc51332230a1f8a6694c264e0.jpg 480w","/assets/static/philipp-katzenberger-LLmqyIxcXCE-unsplash.07cc2b7.f3cc2dbcc51332230a1f8a6694c264e0.jpg 860w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 395' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-7490135ef4ac50e97876e54d67e5a638'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-7490135ef4ac50e97876e54d67e5a638)' width='860' height='395' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAdAEADASIAAhEBAxEB/8QAGQAAAgMBAAAAAAAAAAAAAAAABAYDBQcB/8QALRAAAgICAQMDAwQBBQAAAAAAAQIDBAURIQAGEhMxQQciURQycZEIFSNCYbL/xAAZAQACAwEAAAAAAAAAAAAAAAAAAgEDBAX/xAAfEQEAAgIBBQEAAAAAAAAAAAABAAMCERMEEkFRcSH/2gAMAwEAAhEDEQA/AGPI9oUcjWhu5bGVbF6whEkjSbYqNqAGU/gkdE0r03b2DgTB2BZoxExiNCzMrHZI%2b8Akb8hv8jXRWTR6bosty6nr5A16cCJGII4jGPv0F45%2bWJ%2bBroDNUb8l/uSKxm5VhgqwvHC0KJB5tvbE68m14n592%2bOuXb0q0cVeSOIad%2bjzN1XUHNyWYiZb2fYbQ73y0xljfGqkqKCRakFfk/tGzvZY%2b389WcXctmPBXL%2bfxpqLWRrDRJ/uvGEGiGOgC2ydeOxr56XRhcnczpjx2TWo8Qc2GVF/aHP6dCp3wQWZgfccdW0eAyF/MXYMhlTLGtaJHUJpGZgQfsGhyByxJ5I0BrrTTVljX2ZO33KbrMcrO/E0epJmJ61632%2bZ0D1bUylkkXe1YbAI/rrmTpdjx0prBGJKwo0sgic%2bSqv7j4qSeDwdD36WcFLDbKY6HI6aOWUV/W8iyIhIK%2b4Ya0QOdga6ZY6WSr%2bS3P8ATUr2riVq8kAfzhDg%2b%2bz%2bR8a2SOprrEVi5WJoJjdXvvsiAyosNyzMZj6ZSh6m14AUAso/sHqDuH6gXcTYepD21cxySxEp%2brrCB2UgjYWNB/6/nrZzjfRyE1SWSCSwrKCCvipVvL7j8jaj%2bdnqAYyxG1qncjpxtFWSb1q/mokLuyADZ4KhV5389BTiEluV/WZb3LnslT%2brlSTKXpI61OKvPO6RKfEvD4Mh3wfuLa3wNnXTl3J37XHeNTteOhLalPiTVeVUWZyvmm3b28dAjWttxrq1%2bm9s5rtiObLRRWpppZVkd0H3BR5Aa1oaJOuPx0r/AORKJHUwU/pxuYb4JUj948G4JGjrjq7XiVD5jX2ljZ8BkMsXnSwmTuvZAllJnRfFAFPx%2b4twfYa/PV1by9TCZh58jYmryWq4SGF4zuy6eRATg7bRI8QdnrJPo3nJavdPclmSNZ5L1mPmQ7aNhGz7DHkjX2gfAA5PU3ePdeY7p7tHaj2EpUzlP0TSQKfJgIw4bZOwfccEcHposLN1cDZt5E46KfNXq8ky00jStYDM4IPpa8iNAksSdj446dsR3LhL1CWDP5OpDJWFexZhsgCSFmIZFJXSl9qeBz/fWW5juyDBd60%2b1psTFkpqc8NVMnalLTkSMuyePbTka/HTR9Se0sanZPeF0wxx2I2isRvXT023EoCBjz5a8jzxvpQhuGW4b%2bR70ymrstGpYmjvkQsoYJGAunVtso1sFfEccb6lkz2Se%2b/bedqw1HyQlercpu4WWv4kgDf/ACHAP/Z2Og/pni5mbJ5PI3Wu2pStNHeMK0aeI3og7O%2bP6379MPdWSr0bddP0SyWEx06xSl%2bEUFfgg7O0Ug745999Eb7P/9k=' /%3e%3c/svg%3e"},"cover_image_credits":"<a href='https://unsplash.com/@fantasyflip'>Philipp Katzenberger</a>"}},"context":{}}