{"hash":"609c449f7566d67d3cb4d8fe84a7a2641ad0f6e8","data":{"tag":{"title":"Design Patterns","belongsTo":{"edges":[{"node":{"title":"Five Minute Design Patterns #3: The Prototype Pattern","path":"/blog/2021/five-minute-design-patterns-3-the-prototype-pattern/","date":"2. January 2021","timeToRead":5,"description":"Another post in my blog post series where I try to cover all of the Gang of Four Design Patterns in five minutes each, once again we have one of the Creational Patterns... the Prototype Pattern!","content":"<p><em>Welcome to the third of my <a href=\"https://www.karam.io/blog/tag/Five%20Minute%20Design%20Patterns/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Five Minute Design Patterns series</a> where I take a brief look at a design pattern every week! I've gone for brief because I think sometimes, less can be more and not everyone always wants to be drowned in text &#x26; UML diagrams. My goal is to keep these to a maximum of a 5 minute read as per the calculation that can be seen under the blog title. This post will cover one of the Creational Patterns - the Prototype Pattern. If you're looking for a post on one of the other of the Gang of Four Design Patterns, you will most likely find them <a href=\"https://www.karam.io/blog/tag/Five%20Minute%20Design%20Patterns/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</em></p>\n<hr>\n<h2 id=\"a-brief-overview\"><a href=\"#a-brief-overview\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>A Brief Overview</h2>\n<p>The Prototype Pattern is a Creational Design Pattern that provides an elegant way of solving a common problem - cloning an existing object. At first, this may seem underwhelming, however most of us who have had to manage large codebases will relate with this tedious problem &#x26; how it leads to long-winded &#x26; duplicated code. The reason it leads to this is because more often than not, we take the object we wish to clone, create a new object of the same class &#x26; then manually populate the attributes of the new object through the constructor.</p>\n<p>This becomes more tedious when you want to clone an object that contains private fields. How do you copy the values over, to the clone object, if you can't see what they are? This means that scenarios obviously exist where we can't truly fully clone an object properly as we cannot access the internals.</p>\n<h2 id=\"the-prototype-pattern\"><a href=\"#the-prototype-pattern\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The Prototype Pattern</h2>\n<p>.NET provides an <code class=\"language-text\">ICloneable</code> <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.icloneable?view=net-5.0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">interface</a> &#x26; when implemented it gives you an <code class=\"language-text\">object Clone()</code> method. It isn't an abstract class therefore it doesn't implement the cloning, however the interface is sometimes used to denote when an object type is cloneable. You don't have to use it.</p>\n<p>What you do have to implement is the <code class=\"language-text\">Clone()</code> method &#x26; you can do so using the <code class=\"language-text\">Object.MemberwiseClone</code> <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.object.memberwiseclone?view=net-5.0#System_Object_MemberwiseClone\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">method</a>. This provides a Shallow Copy. However, Deep Copies are also a thing...</p>\n<h2 id=\"shallow-copy\"><a href=\"#shallow-copy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Shallow Copy</h2>\n<p>A <code class=\"language-text\">MemberwiseClone</code> performs a Shallow Copy of an object. This means that the cloned object will have all value types &#x26; strings (which are the obvious exception since strings are reference types) copied over. Reference types to the clone however, are copied over purely as references. This means that changes to the reference, will incur in both the original &#x26; the clone. Simple, right?</p>\n<h2 id=\"deep-copy\"><a href=\"#deep-copy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Deep Copy</h2>\n<p>A Deep Copy is the same as a Shallow Copy except that reference types will have brand new matching instances created on the clone. This means that a change to a reference type on the original, will not affect the clone as the deep copied clone references different object instances altogether.</p>\n<h2 id=\"an-example\"><a href=\"#an-example\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>An Example</h2>\n<p>Here we have a <code class=\"language-text\">DevelopmentTeam</code> class that should be quite self explanatory.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DevelopmentTeam</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">DevelopmentTeam</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">GetName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SetName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> newName<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Name <span class=\"token operator\">=</span> newName<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.\\n\"</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<p>Here we have a <code class=\"language-text\">Developer</code> class.\nIt contains both value types &#x26; reference types.\nThe string array &#x26; reference to the <code class=\"language-text\">DevelopmentTeam</code> are the reference types in this case.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Developer</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ICloneable</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Age <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Role <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> Languages <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">DevelopmentTeam</span> Team <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">Developer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> age<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> role<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> languages<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DevelopmentTeam</span> team<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n            Age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n            Role <span class=\"token operator\">=</span> role<span class=\"token punctuation\">;</span>\n            Languages <span class=\"token operator\">=</span> languages<span class=\"token punctuation\">;</span>\n            Team <span class=\"token operator\">=</span> team<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Shallow Copy</span>\n        <span class=\"token comment\">// All value types are copied to the clone.</span>\n        <span class=\"token comment\">// However reference types (except string) are copied as references.</span>\n        <span class=\"token comment\">// This means changes made to reference types on the original, also affect the clone.</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">object</span></span> <span class=\"token function\">Clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">MemberwiseClone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Deep Copy</span>\n        <span class=\"token comment\">// All value types are copied to the clone.</span>\n        <span class=\"token comment\">// All reference types have brand new matching instances created on the clone.</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">object</span></span> <span class=\"token function\">DeepClone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> clonedDeveloper <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Developer<span class=\"token punctuation\">)</span> <span class=\"token function\">MemberwiseClone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            clonedDeveloper<span class=\"token punctuation\">.</span><span class=\"token function\">SetTeam</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DevelopmentTeam</span><span class=\"token punctuation\">(</span>Team<span class=\"token punctuation\">.</span><span class=\"token function\">GetName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> clonedDeveloper<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SetName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> newName<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Name <span class=\"token operator\">=</span> newName<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SetAge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> newAge<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Age <span class=\"token operator\">=</span> newAge<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SetTeam</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DevelopmentTeam</span> newTeam<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Team <span class=\"token operator\">=</span> newTeam<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"Name &amp; Age: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">Age</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.\\nRole: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">Role</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.\\nLanguages: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\"><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">,</span> Languages<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.\\nTeam: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">Team<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<p>To implement the Shallow Copy, all we do is return a <code class=\"language-text\">MemberwiseClone()</code>.\nTo implement the Deep Copy, we create a Shallow Copy &#x26; then manually set the private values on it. </p>\n<p>The reason why this is useful is because we can actually access the original object's private values within the <code class=\"language-text\">Developer</code> class, versus if we were to try &#x26; construct the object outside. Not rocket science, but still pretty neat.</p>\n<p>Note that within this example, I haven't bothered doing anything with the Languages array reference type.\nI'll leave it as an exercise for you to play around with!</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> teamDevAlot <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DevelopmentTeam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Team Dev-alot\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> originalDeveloper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Developer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Rob Brown\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Software Developer\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"C#\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"JavaScript\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"TypeScript\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> teamDevAlot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----- ORIGINAL DEVELOPER -----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>originalDeveloper<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> shallowClonedDeveloper <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Developer<span class=\"token punctuation\">)</span> originalDeveloper<span class=\"token punctuation\">.</span><span class=\"token function\">Clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----- CLONED DEVELOPER -----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>shallowClonedDeveloper<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----- MODIFYING VALUE TYPES (&amp; STRINGS) ON ORIGINAL, DOES NOT APPLY TO SHALLOW CLONE -----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            originalDeveloper<span class=\"token punctuation\">.</span><span class=\"token function\">SetName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Donald Trump\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            originalDeveloper<span class=\"token punctuation\">.</span><span class=\"token function\">SetAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">74</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----- MODIFIED ORIGINAL DEVELOPER -----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>originalDeveloper<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----- SHALLOW CLONED DEVELOPER -----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>shallowClonedDeveloper<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----- MODIFYING REFERENCE TYPE (TEAM) ON ORIGINAL, DOES ALSO APPLY TO SHALLOW CLONE -----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            teamDevAlot<span class=\"token punctuation\">.</span><span class=\"token function\">SetName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thunderbirds\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----- ORIGINAL DEVELOPER -----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>originalDeveloper<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----- SHALLOW CLONED DEVELOPER -----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>shallowClonedDeveloper<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> deepClonedDeveloper <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Developer<span class=\"token punctuation\">)</span> originalDeveloper<span class=\"token punctuation\">.</span><span class=\"token function\">DeepClone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----- MODIFYING REFERENCE TYPE (TEAM) ON ORIGINAL, HOWEVER, DOES NOT APPLY TO DEEP CLONE -----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            teamDevAlot<span class=\"token punctuation\">.</span><span class=\"token function\">SetName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Manchester United\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----- ORIGINAL DEVELOPER -----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>originalDeveloper<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----- DEEP CLONED DEVELOPER -----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>deepClonedDeveloper<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<p>Notice how on the shallow clones, when we make changes to the reference types on the original object, the changes are also reflected on the shallow clones as they are pointing to the same references.</p>\n<p>Whilst on the deep clones, when we make changes to the reference types on the original object, the changes do not apply to the deep clone as they are pointing to a brand new <code class=\"language-text\">DevelopmentTeam</code> object/reference.</p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusion</h2>\n<p>TL;DR - If you find yourself constantly having to make copies or clones of objects, then you want the Prototype Pattern.</p>\n<p>If you spot any mistakes, do let me know in the comments below!</p>\n<h2 id=\"source-code\"><a href=\"#source-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Source Code</h2>\n<p>In order to keep the blog posts within this series short &#x26; sweet, I've not dumped all of the source code on the posts. If you want to see the full working implementation of the above &#x26; explore it yourself, feel free to get the source code from the link below.</p>\n<p><a href=\"https://github.com/karam94/CSharpDesignPatterns/tree/main/Creational\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/karam94/CSharpDesignPatterns/tree/main/Creational</a></p>\n<p>Thanks for reading! 👋</p>\n"}},{"node":{"title":"Five Minute Design Patterns #2: The Factory Pattern","path":"/blog/2020/five-minute-design-patterns-2-the-factory-pattern/","date":"5. December 2020","timeToRead":5,"description":"The second post in my blog post series where I try to cover all of the Gang of Four Design Patterns in five minutes each, this time it's one of the Creational Patterns... the Factory Pattern!","content":"<p><em>Welcome to the second of my <a href=\"https://www.karam.io/blog/tag/Five%20Minute%20Design%20Patterns/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Five Minute Design Patterns series</a> where I take a brief look at a design pattern every week! I've gone for brief because I think sometimes, less can be more and not everyone always wants to be drowned in text &#x26; UML diagrams. My goal is to keep these to a maximum of a 5 minute read as per the calculation that can be seen under the blog title. This post will cover one of the Creational Patterns - the Factory Pattern. If you're looking for a post on one of the other of the Gang of Four Design Patterns, you will most likely find them <a href=\"https://www.karam.io/blog/tag/Five%20Minute%20Design%20Patterns/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</em></p>\n<hr>\n<h2 id=\"a-brief-overview\"><a href=\"#a-brief-overview\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>A Brief Overview</h2>\n<p>The Factory Pattern is a Creational Design Pattern that aims to provide an interface/abstract class to facilitate object creation, in such a way that the user does not have to specify which type of class they want instantiated, but rather defer it to subclasses.</p>\n<p>By using this pattern, we simplify the object creation process where the object creation process relies on underlying conditional logic to deduct what type of class should be instantiated. It also helps us avoid repeating this logic every time we wish to create the object.</p>\n<p>There are three common variations of this pattern, the Simple Factory Pattern, the Factory Method Pattern and finally the Abstract Factory Pattern.</p>\n<h2 id=\"the-simple-factory-pattern\"><a href=\"#the-simple-factory-pattern\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The Simple Factory Pattern</h2>\n<p>The simplest variation of the Factory Pattern, refers to the existence of a single re-usable Factory class, that holds the sole purpose and responsibility of abstracting away any underlying logic that object creation relies on.</p>\n<p>Instead of repeating some sort of conditional <code class=\"language-text\">if</code> or <code class=\"language-text\">switch</code> logic around <code class=\"language-text\">brand</code> every time a <code class=\"language-text\">Vehicle</code> object is required, we can instead abstract it in to one single re-usable place.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VehicleFactory</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Vehicle</span> <span class=\"token function\">BuildVehicle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Brand</span> brand<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> brand <span class=\"token keyword\">switch</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tBrand<span class=\"token punctuation\">.</span>Honda <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vehicle</span><span class=\"token punctuation\">(</span>Brand<span class=\"token punctuation\">.</span>Honda<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\tBrand<span class=\"token punctuation\">.</span>Ferrari <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vehicle</span><span class=\"token punctuation\">(</span>Brand<span class=\"token punctuation\">.</span>Ferrari<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t_ <span class=\"token operator\">=></span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NotSupportedException</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"The factory cannot construct\n\t\t\t\t\t\t\t\t\t\t\t\t vehicles of the brand\n\t\t\t\t\t\t\t\t\t\t\t\t </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">brand</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> at the current time.\"</span></span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// ...think about how this scales as more Shipping Providers are added</span>\n\t\t<span class=\"token comment\">// If we do this every time we add a new Shipping Provider,</span>\n\t\t<span class=\"token comment\">// are we violating one of the SOLID principles?</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nVehicleFactory<span class=\"token punctuation\">.</span><span class=\"token function\">BuildVehicle</span><span class=\"token punctuation\">(</span>Brand<span class=\"token punctuation\">.</span>Honda<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"the-factory-method-pattern\"><a href=\"#the-factory-method-pattern\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The Factory Method Pattern</h2>\n<p>The Factory Method Pattern provides an abstract class and method (hence the name) that facilitates creation of subclasses (e.g. different types of shipping providers).</p>\n<p>By utilising this abstract class, we create a Factory for every type of <code class=\"language-text\">ShippingProvider</code> and since our code is dependent on a type of <code class=\"language-text\">ShippingProviderFactory</code>, it automatically can handle subclasses such as a <code class=\"language-text\">StandardShippingProviderFactory</code>.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VehicleFactory</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\">Vehicle</span> <span class=\"token function\">BuildVehicle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// This is the \"Factory Method\"</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Vehicle</span> <span class=\"token function\">GetVehicle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> vehicle <span class=\"token operator\">=</span> <span class=\"token function\">BuildVehicle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// If we want to write logic that applies to all vehicle factories</span>\n\t\t<span class=\"token comment\">// we can insert it as \"middleware\" here</span>\n\n\t\t<span class=\"token keyword\">return</span> vehicle<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FerrariFactory</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">VehicleFactory</span></span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Vehicle</span> <span class=\"token function\">BuildVehicle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vehicle</span><span class=\"token punctuation\">(</span>Brand<span class=\"token punctuation\">.</span>Ferrari<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HondaFactory</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">VehicleFactory</span></span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Vehicle</span> <span class=\"token function\">BuildVehicle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vehicle</span><span class=\"token punctuation\">(</span>Brand<span class=\"token punctuation\">.</span>Honda<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Whatever depends on a VehicleFactory can now have any implementation of</span>\n<span class=\"token comment\">// the abstract class injected in and therefore becomes compatible with any</span>\n<span class=\"token comment\">// type of current or future ShippingProvider with ease.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShoppingCart</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">VehicleOrder</span> _vehicleOrder<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">VehicleFactory</span> _vehicleFactory<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token function\">ShoppingCart</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">VehicleOrder</span> vehicleOrder<span class=\"token punctuation\">,</span> <span class=\"token class-name\">VehicleFactory</span> vehicleFactory<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t_vehicleOrder <span class=\"token operator\">=</span> vehicleOrder<span class=\"token punctuation\">;</span>\n\t\t_vehicleFactory <span class=\"token operator\">=</span> vehicleFactory<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">Checkout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// The Shopping Cart can now handle any type of VehicleFactory,</span>\n\t\t\t<span class=\"token comment\">// without needing to change any of its implementation details.</span>\n\t\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> carToBuild <span class=\"token operator\">=</span> _vehicleFactory<span class=\"token punctuation\">.</span><span class=\"token function\">GetVehicle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"Vehicle built of brand </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">carToBuild<span class=\"token punctuation\">.</span><span class=\"token function\">GetBrand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\n\t\t\t\t\t\tfor Order ID: $</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">_vehicleOrder<span class=\"token punctuation\">.</span><span class=\"token function\">GetId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> hondaShoppingCart <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ShoppingCart</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">VehicleOrder</span><span class=\"token punctuation\">(</span>Brand<span class=\"token punctuation\">.</span>Honda<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t\t <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HondaFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> hondaOrderResponse <span class=\"token operator\">=</span> hondaShoppingCart<span class=\"token punctuation\">.</span><span class=\"token function\">Checkout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ferrariShoppingCart <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ShoppingCart</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">VehicleOrder</span><span class=\"token punctuation\">(</span>Brand<span class=\"token punctuation\">.</span>Ferrari<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t\t   <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FerrariFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ferrariOrderResponse <span class=\"token operator\">=</span> ferrariShoppingCart<span class=\"token punctuation\">.</span><span class=\"token function\">Checkout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"the-abstract-factory-pattern\"><a href=\"#the-abstract-factory-pattern\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The Abstract Factory Pattern</h2>\n<p>The third and final variation of the Factory Pattern is very similar to the Factory Method Pattern. The main difference here is that rather than having a single overridable method within our abstract class, all methods within our factory become abstract and can therefore become overriden.</p>\n<p>I like to think of this as the version of the Factory Pattern that caters for families. For example, in our previous example, a Ferrari vehicle... is a single vehicle. In this example, a UK Shipping Provider... can have a family of various couriers. (Obviously Ferrari have numerous car models too, but play along here!)</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShippingProviderFactory</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\">IShippingProvider</span> <span class=\"token function\">CreateStandardShippingProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\">IShippingProvider</span> <span class=\"token function\">CreateExpressShippingProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UkShippingProviderFactory</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ShippingProviderFactory</span></span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">IShippingProvider</span> <span class=\"token function\">CreateStandardShippingProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n\t\t\t\t\t\t\t\t\t\t\t<span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">YodelShippingProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">IShippingProvider</span> <span class=\"token function\">CreateExpressShippingProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n\t\t\t\t\t\t\t\t\t\t\t<span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RoyalMailShippingProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RoyalMailShippingProvider</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IShippingProvider</span></span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">GetCourierName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"Royal Mail\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">GetCourierCountryCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"UK\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Extendable as it handles any time of present or future Shipping Provider Factory.</span>\n<span class=\"token comment\">// e.g. Imagine we introduce French shipping later. No need for code changes in here.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShoppingCart</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ShippingProviderFactory</span> _shippingProviderFactory<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token function\">ShoppingCart</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ShippingProviderFactory</span> shippingProviderFactory<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t_shippingProviderFactory <span class=\"token operator\">=</span> shippingProviderFactory<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">Checkout</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isExpressShipping<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> shippingProvider <span class=\"token operator\">=</span> <span class=\"token return-type class-name\">isExpressShipping <span class=\"token punctuation\">?</span></span>\n\t\t\t\t\t\t\t\t_shippingProviderFactory<span class=\"token punctuation\">.</span><span class=\"token function\">CreateExpressShippingProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span>\n\t\t\t\t\t\t\t\t_shippingProviderFactory<span class=\"token punctuation\">.</span><span class=\"token function\">CreateStandardShippingProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> shippingProviderName <span class=\"token operator\">=</span> shippingProvider<span class=\"token punctuation\">.</span><span class=\"token function\">GetCourierName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// Note: </span>\n\t\t<span class=\"token comment\">// This translation bit violates OCP but our example doesn't revolve around this </span>\n\t\t<span class=\"token comment\">// so ignore it... assume we're following the rule of three to refactor this out.</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shippingProvider<span class=\"token punctuation\">.</span><span class=\"token function\">GetCourierCountryCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"DE\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"Ihr Zustellkurier ist: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">shippingProviderName</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"Your delivery courier is: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">shippingProviderName</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> shoppingCart <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ShoppingCart</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UkShippingProviderFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nshoppingCart <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ShoppingCart</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GermanyShippingProviderFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusion</h2>\n<p>TL;DR - If you find yourself with a class that has to be compatible with a family of sub-classes, however should be decoupled with regards to how those types are created, consider one of the variations of the Factory Pattern.</p>\n<p>By moving out object creation logic in to a factory, we apply the Single Responsibility Principle through ensuring our <code class=\"language-text\">ShoppingCart</code> is told what shipping provider it is using, rather than leave it asking \"which shipping provider do I need, to correctly calculate the prices?\" (<a href=\"https://martinfowler.com/bliki/TellDontAsk.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tell don't ask</a>). We also get the Open/Closed Principle for free too, since every time we need to introduce a brand new <code class=\"language-text\">Vehicle</code> or <code class=\"language-text\">ShippingProvider</code>, we can do so without having to change any code within the <code class=\"language-text\">ShoppingCart</code>.</p>\n<p>If you spot any mistakes, do let me know in the comments below!</p>\n<h2 id=\"source-code\"><a href=\"#source-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Source Code</h2>\n<p>In order to keep the blog posts within this series short and sweet, I've not dumped all of the source code on the posts. If you want to see the full working implementation of the above and explore it yourself, feel free to get the source code from the link below.</p>\n<p><a href=\"https://github.com/karam94/CSharpDesignPatterns/tree/main/Creational\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/karam94/CSharpDesignPatterns/tree/main/Creational</a></p>\n<p>Thanks for reading! 👋</p>\n"}},{"node":{"title":"Five Minute Design Patterns #1: The Builder Pattern","path":"/blog/2020/five-minute-design-patterns-1-the-builder-pattern/","date":"28. November 2020","timeToRead":5,"description":"The first of posts in my blog post series where I try to cover all of the Gang of Four Design Patterns in five minutes each, this time it's one of the Creational Patterns... the Builder Pattern!","content":"<p><em>Welcome to the first of my <a href=\"https://www.karam.io/blog/tag/Five%20Minute%20Design%20Patterns/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Five Minute Design Patterns series</a> where I take a brief look at a design pattern every week! The reason why I've gone for brief overviews is because I think sometimes, less can be more and not everyone always wants to be drowned in text &#x26; UML diagrams. My goal is to keep each one of these a maximum of a 5 minute read as per the calculation that can be seen under the blog title. This post will cover one of the Creational Patterns, namely the Builder Pattern. If you're looking for a post on one of the other of the Gang of Four Design Patterns, you will most likely find them <a href=\"https://www.karam.io/blog/tag/Five%20Minute%20Design%20Patterns/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</em></p>\n<hr>\n<h2 id=\"a-brief-overview\"><a href=\"#a-brief-overview\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>A Brief Overview</h2>\n<ul>\n<li>\n<p>The Builder Pattern is a Creational Design Pattern that aims to separate the construction of a <strong>complex object</strong> from its <strong>internal representation</strong>, instead facilitating a single/same construction process that can be used instead to create all of the different representations.</p>\n<ul>\n<li><strong>complex object</strong> - an object is considered complex when it can be resembled by numerous permutations, sometimes based on some sort of internal logic, also sometimes referred to as an aggregate. e.g. A car object is the complex object and examples of different representations could be... Silver Honda Civic, Red Honda Civic, Black Honda Accord.</li>\n<li><strong>internal representation</strong> - e.g. an object class, within a codebase.</li>\n</ul>\n</li>\n</ul>\n<p>By using this pattern, we can both simplify and refine the object construction process to allow easier creation of different permutations of the complex object, whilst also as a bonus, decreasing any code repetition and increasing code re-usability that may exist otherwise.</p>\n<p>There are two common variations of this pattern, namely the Builder Pattern alongside the Fluent Builder Pattern.</p>\n<h2 id=\"the-builder-pattern-vs-the-fluent-builder-pattern\"><a href=\"#the-builder-pattern-vs-the-fluent-builder-pattern\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The Builder Pattern vs. The Fluent Builder Pattern</h2>\n<p>The Builder Pattern will result in a <code class=\"language-text\">Builder</code> class alongside an optional <code class=\"language-text\">BuilderDirector</code> class. Either-or will contain methods that provide constructed objects and using these gets favoured over using the standard object constructor. Think of the <code class=\"language-text\">Director</code> class as an orchestrator that knows how to create pre-defined permutations using the <code class=\"language-text\">Builder</code>. Sometimes as you may have realised by now, you may just want to directly use the <code class=\"language-text\">Builder</code> yourself. In the below example, our <code class=\"language-text\">BuilderDirector</code> contains a pre-defined method that returns a <code class=\"language-text\">Car</code> object pre-configured to match that of a Silver Honda Civic.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> carBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CarBuilder</span><span class=\"token punctuation\">(</span>upgradeInventory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> carBuilderDirector <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CarBuilderDirector</span><span class=\"token punctuation\">(</span>carBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>carBuilderDirector<span class=\"token punctuation\">.</span><span class=\"token function\">BuildSilverHondaCivic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Obviously it is possible to instantiate a new Car and pass parameters in to the constructor to construct our object, however at scale and with a large number of parameters, this becomes very tedious in a code base where we have to constantly instantiate different permutations of different cars, models, colours, specifications, etc. However on that note, do not go wild and suddenly convert every object instantiation to use this pattern. Use it as a tool, only where necessary.</p>\n<p>The Fluent Builder Pattern provides the exact same functionality as the regular Builder Pattern, however with a fluent interface/API to help facilitate the construction process. This makes life particularly easier for developers going forward within the same codebase, particularly if they want to skip the middle man that is the <code class=\"language-text\">Director</code>. </p>\n<p>In the below example our <code class=\"language-text\">CarBuilder</code> is a Fluent Builder and provides us with a fluent interface to configure and create the exact car we want. </p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> customCar <span class=\"token operator\">=</span> carBuilder\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">WithMake</span><span class=\"token punctuation\">(</span>Brand<span class=\"token punctuation\">.</span>Nissan<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">WithModel</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Skyline\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">WithNumberOfDoors</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">WithColour</span><span class=\"token punctuation\">(</span>Colour<span class=\"token punctuation\">.</span>Black<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>The fluent API is a lot nicer to use and as you see fit, the possibilities to abstract complexity is endless. For example, you could abstract a group of constructor parameters at once if it is logical to do so.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> customCar <span class=\"token operator\">=</span> carBuilder\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">WithModel</span><span class=\"token punctuation\">(</span>Car<span class=\"token punctuation\">.</span>NissanSkyline<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">WithColour</span><span class=\"token punctuation\">(</span>Colour<span class=\"token punctuation\">.</span>Black<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>As a Skyline is always a Nissan and vice versa, along with always having four doors, it is possible to do something as the above. Within the above example, the <code class=\"language-text\">WithModel(Car.NissanSkyline)</code> method on the <code class=\"language-text\">carBuilder</code> somehow has been implemented to know that the enum <code class=\"language-text\">Car.NissanSkyline</code> needs to provide you a new <code class=\"language-text\">Car</code> with the correct brand, model and number of doors.</p>\n<h2 id=\"a-brief-high-level-overview\"><a href=\"#a-brief-high-level-overview\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>A Brief High Level Overview</h2>\n<p>Whilst UML class diagrams work well for Design Pattern overviews, as I said in the introduction, I'm looking to keep things simple and avoid them throughout this <a href=\"https://www.karam.io/blog/tag/Five%20Minute%20Design%20Patterns/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Five Minute Design Pattern series of blog posts</a>.</p>\n<p>Our Program can optionally depend on a <code class=\"language-text\">CarBuilderDirector</code>.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CarBuilderDirector</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ICarBuilder</span> _carBuilder<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">CarBuilderDirector</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ICarBuilder</span> carBuilder<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _carBuilder <span class=\"token operator\">=</span> carBuilder<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Car</span> <span class=\"token function\">BuildSilverHondaCivic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _carBuilder\n            <span class=\"token punctuation\">.</span><span class=\"token function\">WithMake</span><span class=\"token punctuation\">(</span>Brand<span class=\"token punctuation\">.</span>Honda<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">WithModel</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Civic\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">WithNumberOfDoors</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">WithColour</span><span class=\"token punctuation\">(</span>Colour<span class=\"token punctuation\">.</span>Silver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> _carBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Car</span> <span class=\"token function\">BuildRedToyotaYaris</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _carBuilder\n            <span class=\"token punctuation\">.</span><span class=\"token function\">WithMake</span><span class=\"token punctuation\">(</span>Brand<span class=\"token punctuation\">.</span>Toyota<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">WithModel</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Yaris\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">WithNumberOfDoors</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">WithColour</span><span class=\"token punctuation\">(</span>Colour<span class=\"token punctuation\">.</span>Red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> _carBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Within the below <code class=\"language-text\">CarBuilder</code> class we see one of the main perks of the Builder Pattern at play. We have some business logic that determines whether we can create a <code class=\"language-text\">Car</code> object with a specific upgrade, depending on whether it is in stock or not. </p>\n<p>When not employing the Builder Pattern, we might usually see this sit within the constructor of the <code class=\"language-text\">Car</code> object. Therefore by using a <code class=\"language-text\">CarBuilder</code>, we can separate the complex construction of the object from its internal representation, as per our initial definition of this pattern.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CarBuilder</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ICarBuilder</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Car</span> _car<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>Upgrade<span class=\"token punctuation\">></span></span> _upgradesInStock<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">CarBuilder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>Upgrade<span class=\"token punctuation\">></span></span> upgradesInStock<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ResetBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _upgradesInStock <span class=\"token operator\">=</span> upgradesInStock<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ResetBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _car <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ICarBuilder</span> <span class=\"token function\">WithMake</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Brand</span> brand<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _car<span class=\"token punctuation\">.</span><span class=\"token function\">SetBrand</span><span class=\"token punctuation\">(</span>brand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ICarBuilder</span> <span class=\"token function\">WithModel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> model<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _car<span class=\"token punctuation\">.</span><span class=\"token function\">SetModel</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ICarBuilder</span> <span class=\"token function\">WithNumberOfDoors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> numberOfDoors<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _car<span class=\"token punctuation\">.</span><span class=\"token function\">SetNumberOfDoors</span><span class=\"token punctuation\">(</span>numberOfDoors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ICarBuilder</span> <span class=\"token function\">WithColour</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Colour</span> colour<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _car<span class=\"token punctuation\">.</span><span class=\"token function\">SetColour</span><span class=\"token punctuation\">(</span>colour<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// By using the Builder Pattern, we separate</span>\n    <span class=\"token comment\">// this complex construction logic of the Car object</span>\n    <span class=\"token comment\">// (which is based on whether an upgrade is in stock or not),</span>\n    <span class=\"token comment\">// from the internal representation of the Car.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ICarBuilder</span> <span class=\"token function\">WithUpgrade</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Upgrade</span> upgrade<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_upgradesInStock<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>upgrade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        _car<span class=\"token punctuation\">.</span><span class=\"token function\">AddUpgrade</span><span class=\"token punctuation\">(</span>upgrade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Car</span> <span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builtCar <span class=\"token operator\">=</span> _car<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ResetBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> builtCar<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusion</h2>\n<p>TL;DR - If you find yourself with a complex object within your codebase that can be constructed in many different permutations and this is leading to lots of large constructors repeated everywhere and more headaches of that sort... then the Builder Pattern might be just what you're looking for.</p>\n<p>If you spot any mistakes, do let me know in the comments below.</p>\n<h2 id=\"source-code\"><a href=\"#source-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Source Code</h2>\n<p>In order to keep the blog posts within this series short and sweet, I've not dumped all of the source code on the posts. If you want to see the full working implementation of the above and explore it yourself, feel free to get the source code from the link below.</p>\n<p><a href=\"https://github.com/karam94/CSharpDesignPatterns/tree/main/Creational\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/karam94/CSharpDesignPatterns/tree/main/Creational</a></p>\n<p>Thanks for reading! 👋</p>\n"}}]}}},"context":{}}