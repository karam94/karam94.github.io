{"hash":"6fe372bab11d0fceef4dd394fd3b9f44e24d1db3","data":{"tag":{"title":".NET Core","belongsTo":{"edges":[{"node":{"title":"Creating & deploying a .NET Core Web API to AWS with the Serverless Framework.","path":"/blog/2019/creating-and-deploying-a-net-core-web-api-to-aws-with-the-serverless-framework/","date":"5. July 2019","timeToRead":13,"description":"Lambda functions are nice... but sometimes you just want a whole API!","content":"<h2 id=\"introduction\"><a href=\"#introduction\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Introduction</h2>\n<p>I've recently been jumping on the Serverless hype train... and probably rightly so. But the fact that you're reading this article, probably means that you're already riding that train with me, so I'll cut to the chase.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2265 500' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-683dff52612b7bb0624ea3b27618d276'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-683dff52612b7bb0624ea3b27618d276)' width='2265' height='500' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAOCAYAAACfOxrCAAAACXBIWXMAAAsTAAALEwEAmpwYAAAKFElEQVRIx6VXCVQUVxat6nZiZpLMjGhkaZbuqu7q7urqpmm2AQSaRWwIghBIBFHcEEVRBJO4gAqoaEQFGgQUATdccB9BBzWJBjHRiVuIUXMyyTExCypRExS66Xrzq3oR45wzc87UOe%2b89/9/v/5797///vvYBzNVGPf96z0frGM6jVUYCMHgukDB41J/Qc8KX37sYYk/NvQrnaXheXWBH1Y4jRZ8vj0Gv9kSh3N9N1tin9OVSCTY//qJxWKHnKGp5HnW3zZjGepK4SSm4tkYkrk%2bRHx7ko3zttbQPP8icxT2dI%2bPEAAcYwDX8b7taoG9fb%2bCsQoX56rxoxkKwe8N4oB4hIDgJzeGYzVzrY4veJvCD6wKEfa2J%2bFD9bcXBg7rrI0SwKcZfFtDS%2b0gvIRopFgicfKWSZ20MtlImiRHBsgpJ4ognFD/KEIiecUOQrRPGj8vjd6EFcQ2O%2bxCDo/MYCpH2tuT1BUCOzAcCA8qrJv5ddowDO4aHLb9MB5z%2bn4s9lcHEGeYZ77eLfR9zummJNkqFA1HLO8H%2bjkm1IQ4xrOTyOf0l02lczsq9Gd/O53iPbQfLqRjnl6SYZxMEEQeAoBFvEckFvdy5InIxcur10siuY/6%2b9F4ByLeMLHEi3c%2bO7iWd2Kypmo8cv4jRA9QZDzg5EydMZ4bi3dZgxfENTvWvZX%2bOtrps7z8yChKeXo87txAZ07PwMezf3xyJPJEb/moCN6%2bq77PNu96nvefj2UoF32x0LtrdwrFPir2B9gUBE/XBJwcKAvgESpPVeOpUXLewJkJxOtHysbkfHc4wbB8uurm7b1xcH2HYVPe21TSx5uj3rSHHa0gX7IBsEomkwFylg1RKiAUkY6iwMCogJZKgSBJQDrdaPeHc/pSkhJk%2bzfya80JrV%2bQqa6FKerNkE5XQJqiAiarkCyvhlRZeR6nk0iUCOQkjcXrZFhfZwg/r69RtgJuzAXoPwzQexTg4TGAp/sBLk6Gx3WSaZyO5ZjWGgnnZjF1N/N94NvFOmidKLfcXaaD7gLNiWsLNT33V/p9%2b%2bV7vnx4ws0IfsKyTHrVmaoIOLgmhEUAmD80RphvtcSZ95YEwbXmcfDd4QmM9czl4TYAVlDIUbTjA4XBgZalQQHsLD8deyAmkg1XKszuEgmQBHEZRcDL1nlWALOD69T5sU1QkrEfZvjXmHKjtrFL3tzNoh03rc06DAsNTfCG82rv3x/dR5tEYfBpJAx%2bW8TePpxlfnI5n/2la77l6%2bNzTHC3EMyng/ofLHeROiacncVsuTrfG74s0D7djwD4ucgXPslRd9QmkHnnspmryCABJnQb4acmKU5/yRTaeKpCD8fXh0FJlhrOVkdauuqioWGxP9zYHQvwyUQ%2bEynlZJANgBJKJgVXL7EpN8CXTdaoYUlQABj1YyBEoRj0sAJw3aY7mpZpCU6eFVyzvij5ILQ3f2YyLmqHyvw2dktRBzsvsgHqCztM7xj2Qqp0Qxmnq5WOGZEUSfLnHNoUjZ0LlPDROMbU6uwO3eU%2b7IUCNXvUwwNOxTAD11cqAdqVy4YCUH8NAXCzQGtGEQDfL9VZuvO08MMyX7iep7lsTNeIRZ6SYilJ1IxyETuXzWacy%2bfpxpyrjggtnsl0f9YYA111kcYw7WifUxUR/stmBI5A5z8TOXMUkTPaWQSADMQEacrQadkpvj5QFxkGWyPDQa%2biBz3REUAA/BPpiZB%2bGUlIjZgQe2VuWMPuddOOQ1V%2bm7nV2MXuWncWthSdYrOCatmymYfMOcFNkKGsaXSWvOpLEuQaqZQoxTHCGz5SnrhRSELna5LBK5SUfdxGQc9OGXvZVcqeHSU236mQAnuSbhoKQO2VXB4AE4oA9i5y/Pws5U8fZqn2XpyrOV/%2bllrh5ikpl0mJHRju5rJuni7%2bROUbh348OX3n%2blzfnzs3R8ClpsRLTSWxzV/uS27csVIvH%2b3qlU2SxCl0rkn0FSMOLi4uJkYsZhlPD4igZBApp0AichsUubsDcv4Sch5dBkSVlJRxxv0lf9z26rVTj8M743eYVmbsg7VZhzjH%2bQiYq99qyg5ohCmq2o2veWEMSchKKRlRjFKoHI4pW%2bErBu5tp8w9TRQLNxgWPlexP2yWwcNWuQm%2bUkNfi7JiKAC7bhX48AC0TlRYfirUwcOqxKrvKyc23ikK/JlXchI76xhSzYlLM%2bmGztpI6KiMgjVztPBBld7c05YCJzfp4btD41GimaixHYEojotEopLQsDBISUkxjQkPZ2Pj49mo2Fg2wmBgE5OSBg0GA6AkyR8BqVTqLpeqFJyco69NWBCxHeZHNZhXTtprKZ26n92Ye5QtmbLPkk5vMmdqUHLUVMdxugrS2y3Mj3Dj5N8alTlwlYEHpxUDn9UT7O0dJHurmWQvbyUtv55TmOACA73VqjgHAF2zmbGoCLp0e5EW9r0th7tLdQD10dC/Ft0Eq/2Wi0jmuRrh3QxF2oHVIb3I8a7l0%2bn75%2bui4GpTzOdVC31uXKiPvvbjsWTXofpubm4r9Xo9pKenD4SFhlqSk5Mt0VFRlnExMZa0tDRzQkICUBR1Zfjw4X%2b0z/FT6oUcz41saHnPsB%2bWJO%2bCFWl7LEUTWyxFb7VAQfReyNQa9/yngmodpnnJcpS%2baP5ACaUT3C3v6kWDi8JFgxvSPVj4RAWmVvqgNdkivC7P1/CZenGwx/DzcxgtqgMuodugf2C1rvzOuyo3%2b0%2bTAin81de98Idt4/g2SoIjAI4MK5ymOtO9ywB3DiXM4PqPrA39E8dr3gnGUR7gr0F0BEpQiIOrqyt4enoCigjwQAmJI66P42i8Wy6X/4HT9xJ7CooM7bxd86O3DZsXsbUKhXx/rr4JcvWNkBO2pR8BU1W54O98nZHqvxj3lIgw4QgxdqXUWtDdmseMZo/QbaZ/0PDNThrutNDAyeZWVXO7ype/bR5sYKy1wJkZKqHd0QNpcicEioe9/WSVn/CbwgBePpRvvXG2LQlwFBEIAHH7hvB4uDrlZUdE1Ufz4%2bhM4rZKUIxCOwXtciLiExCfwHGbnIjCPwUdf/7GQG1MRflgtt13rLNg7DZPBEYCosS8mEaHfdkhdbitSsT6tin5vl%2bMSkfE9tWoAuAgPRsO0DMfljOMvf/eOpvzxyZbJ%2b15i%2bKiwTHx3go/4W%2br/fHhw6x6vcV%2b6A3ApwBsjHYU1rY%2bjCuHnyuFW4qDcBQZ1vdCFvN/vQWQ8za%2bFUfyC2U6igoBKpL49VFE8ACczvbBnuykbSDQOID7C2vAfRLveV%2bNW3OFtXTG6hOkGAp7Xt6dSuGoHsDhxFjrj0r8XvgJ9xhaM9sKRuFUGj%2b5MVzYdzrV%2bgjZFfvCQwhxHJHwv5DADoJ9ngOEiAY%2bGhAJbYQ/A6jhOdtiqBHYo3orCPc2MNivTbSgb49S2NdCCx9vUwl%2bKrO%2bZ3qNaqwZlSv/BvQ1Y0lZCChWAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"2265\" alt=\"Deploying Serverless Applications\" data-srcset=\"/assets/static/deployingserverless.82a2fbd.0a8a34d26b6667c577b3f274e11d70b5.png 480w, /assets/static/deployingserverless.cbab2cf.0a8a34d26b6667c577b3f274e11d70b5.png 1024w, /assets/static/deployingserverless.2665e34.0a8a34d26b6667c577b3f274e11d70b5.png 1920w, /assets/static/deployingserverless.d4f6efc.0a8a34d26b6667c577b3f274e11d70b5.png 2265w\" data-sizes=\"(max-width: 2265px) 100vw, 2265px\" data-src=\"/assets/static/deployingserverless.d4f6efc.0a8a34d26b6667c577b3f274e11d70b5.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/deployingserverless.d4f6efc.0a8a34d26b6667c577b3f274e11d70b5.png\" width=\"2265\" alt=\"Deploying Serverless Applications\"></noscript></p>\n<p>Basically, when trying to learn more about the world of Serverless, most tutorials on the internet that I could find around the .NET Core serverless world, seemed to revolve around writing a single individual serverless lambda function written in C# that does one small bit of functionality, sometimes utilising other AWS services to communicate with other lambda functions, all of which don't really exist within any sort of actual scaffolded project.</p>\n<p><img src=\"https://media.giphy.com/media/F5p9Uuz3F1a3S/giphy.gif\" alt=\"Joining the world of Serverless!\"></p>\n<p>This was all great and useful for learning purposes and also helped me understand the potential power of lambda functions. For example, the idea that you can have a small bit of code that can be triggered and run whenever you like... sets my imagination on fire!</p>\n<p><img src=\"https://media.giphy.com/media/ule4vhcY1xEKQ/giphy.gif\" alt=\"Joining the world of Serverless!\"></p>\n<p>BUT it deviated too much from my regular .NET Core developer workflow. I had questions on the developer scalability and developer experience of trying to replicate what was being taught on a larger scale - such as the first iteration a relatively large and complex CRUD-ish API. I just wanted something that got to the point and said, you have a fully blown .NET Core API that you wrote two years ago that you now want to run serverless-ly? Okay, here's what you do...</p>\n<p>For example if one needs to build a .NET Core API, chances are they will probably go for a quick:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">dotnet new webapi</code></pre>\n<p>...and take things from there. The .NET CLI will generate the project scaffolding needed and in a matter of seconds, you can do things like play around with middleware, create new controllers &#x26; so on.</p>\n<p>Whilst you can extract different bits of functionality in to lots of different smaller lambdas, I do believe that if you are entering the unknown and are building something brand new that exceeds a certain threshold of complexity, the problem at hand isn't a new problem. It's the old monolith-first strategy that we should be following and that monolith, may be a large API that all lives under one roof until we can actually start dissecting and extracting it in to smaller chunks later.</p>\n<p>So, I wanted to figure out if there was a way for me to develop my .NET Core Web APIs, following what I consider to be the general standardised workflow and then be able to deploy it as a serverless API as a whole, not having to worry about its modularisation as lots of smaller lambdas/functions. Basically, my deployment choices shouldn't affect my development choices. I should be able to deploy whatever I want, regardless of how it is written or its general size.</p>\n<h2 id=\"what-is-the-serverless-framework\"><a href=\"#what-is-the-serverless-framework\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What is the Serverless Framework?</h2>\n<p><img src=\"https://files.readme.io/ffb4c59-Serverless.png\" alt=\"The Serverless Framework\"></p>\n<p>The <a href=\"https://serverless.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Serverless Framework</a> is an open source framework (that comes with an awesome CLI) that aims to help us configure and deploy serverless functions written in numerous technology stacks, to numerous cloud providers.</p>\n<p>If you've ever written and deployed a lambda function to AWS without using any sort of tooling (yes, I've been there... wrote a Python script to run every fortnight to check for redundant security groups etc...) you'll know how tiresome the process of zipping your code project up and uploading it is (or even worse, using the in-browser IDE thing) as well as having to then configure your lambda through the UI that AWS provide in the web console.</p>\n<p>This approach is usually okay for small projects such as my given example above of the single Python script for example (even though dealing with PIP dependencies was still a little tedious) but obviously it is not scalable. You also cannot commit your lambda's configuration to some sort of source control too which itself raises potential hiccups waiting to happen.</p>\n<p>The goal of the Serverless Framework quite simply, is to streamline your deployment process as much as possible.</p>\n<h2 id=\"what-alternatives-are-there-and-why-should-i-use-the-serverless-framework-in-particular\"><a href=\"#what-alternatives-are-there-and-why-should-i-use-the-serverless-framework-in-particular\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What alternatives are there and why should I use the Serverless Framework in particular?</h2>\n<p>Alternatives include AWS's very own <a href=\"https://aws.amazon.com/serverless/sam/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SAM</a> or even the <a href=\"https://aws.amazon.com/blogs/developer/aws-serverless-applications-in-visual-studio/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">official AWS Visual Studio tooling for Visual Studio</a>. </p>\n<p>However, I personally prefer using the Serverless Framework for a few reasons:</p>\n<ul>\n<li>Quite simply, I prefer its workflow due to the minimalistic CLI more to the alternatives.</li>\n<li>As I often use varied technology stacks when working on projects at home such as NodeJS or Python, the Serverless Framework's compatibility with these means I don't have to deviate away from what I'm used to when it comes to deploying my lambdas. If I decide to randomly try and deploy something to Azure one day, I don't need to learn some other way of deployment.</li>\n<li>The Serverless Framework comes with an incredibly healthy and large open source community behind it, which means there are plenty of plugins for it.</li>\n<li>The Serverless Framework allows you to debug your deployed lambdas, locally really easily within your IDE of choice such as Visual Studio Code which means you can utilise breakpoints &#x26; so forth. Note that this is not a unique feature of the Serverless Framework, but it is in this case, really easy to get it up and running which is cool.</li>\n<li>Whilst the AWS Visual Studio tooling may use a more familiar (to some) CloudFormation-style configuration file and the deployment process within the IDE is really quick (bar the fact that you need to have previously created an S3 bucket to upload your code to beforehand), it is essentially a dependency on having Visual Studio installed. So, if you don't have Visual Studio installed, you can't deploy your lambda and you'd probably end up running the Serverless Framework or something else in your CI/CD pipeline anyways.</li>\n<li>The Serverless framework automatically offloads the creation of an S3 bucket to host your uploaded artifacts off you and as a result, gets you from zero to hero as fast as possible.</li>\n</ul>\n<h2 id=\"so-what-will-we-be-doing-today\"><a href=\"#so-what-will-we-be-doing-today\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>So what will we be doing today?</h2>\n<p>We'll be taking a brand new .NET Core Web API project and deploying it as a single AWS Lambda. If one were to do this manually, it would not only require the setting up of AWS assets such as an S3 bucket &#x26; API gateway on top of the lambdas we create but it would also be a tiresome and very manual process.</p>\n<p>By the end of this post, you should have a deployed version of your .NET Core Web API that is triggered as a single AWS Lambda function with an API gateway that proxies requests through to all the routes you have defined within your controllers. The Serverless Framework will also handle an S3 bucket for your deployed assets to be uploaded in to.</p>\n<p><img src=\"https://media.giphy.com/media/QLvRBqfLXCphu/giphy.gif\" alt=\"Let&#x27;s begin!\"></p>\n<h2 id=\"prerequisites\"><a href=\"#prerequisites\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Prerequisites</h2>\n<ul>\n<li>An <a href=\"https://aws.amazon.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AWS</a> account.</li>\n<li>The <a href=\"https://serverless.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Serverless Framework CLI</a> installed on your machine via <a href=\"https://www.npmjs.com/get-npm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NPM</a>.</li>\n<li><a href=\"https://www.youtube.com/watch?v=KngM5bfpttA\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Your AWS account configured with your Serverless Framework CLI.</a></li>\n<li>An ASP.NET Core Web API to deploy.</li>\n</ul>\n<h2 id=\"dont-have-a-net-core-web-api-to-deploy\"><a href=\"#dont-have-a-net-core-web-api-to-deploy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Don't have a .NET Core Web API to deploy?</h2>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> YourNewDirectory\n<span class=\"token builtin class-name\">cd</span> YourNewDirectory\ndotnet new webapi\ndotnet restore</code></pre>\n<h2 id=\"integrating-the-serverless-framework\"><a href=\"#integrating-the-serverless-framework\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Integrating the Serverless Framework</h2>\n<p>The way the Serverless Framework knows how to handle your deployment process is through utilising a YAML configuration file called <code class=\"language-text\">serverless.yml</code> in the root directory of your project. Create this file and add the contents as shown below. Obviously, anywhere I refer to <code class=\"language-text\">blog-tutorial-serverless</code> will differ depending on how you have named your project. If you have used hyphens, these become underscores in your project if you maintain the same name as a namespace within your code.</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> blog<span class=\"token punctuation\">-</span>tutorial<span class=\"token punctuation\">-</span>serverless\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> dotnetcore2.1\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>opt<span class=\"token punctuation\">:</span>stage<span class=\"token punctuation\">,</span> <span class=\"token string\">'dev'</span><span class=\"token punctuation\">}</span>\n  <span class=\"token key atrule\">region</span><span class=\"token punctuation\">:</span> eu<span class=\"token punctuation\">-</span>west<span class=\"token punctuation\">-</span><span class=\"token number\">1</span>\n  <span class=\"token key atrule\">profile</span><span class=\"token punctuation\">:</span> default\n\n<span class=\"token key atrule\">package</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">artifact</span><span class=\"token punctuation\">:</span> bin/release/netcoreapp2.1/blog<span class=\"token punctuation\">-</span>tutorial<span class=\"token punctuation\">-</span>serverless.zip\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">api</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> blog<span class=\"token punctuation\">-</span>tutorial<span class=\"token punctuation\">-</span>serverless<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>blog_tutorial_serverless.LambdaEntryPoint<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>FunctionHandlerAsync\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n     <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n         <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /<span class=\"token punctuation\">{</span>proxy+<span class=\"token punctuation\">}</span>\n         <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> ANY\n\n<span class=\"token key atrule\">custom</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>opt<span class=\"token punctuation\">:</span>stage<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">:</span>provider.stage<span class=\"token punctuation\">}</span></code></pre>\n<p>If you want to learn more about more magic you can place in your Serverless.yml configuration file, visit <a href=\"https://serverless.com/framework/docs/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p>\n<p>In this case, I've named my service after my Web API project name. I've also made sure my function handler follows the required format of <code class=\"language-text\">AssemblyName::Namespace.ClassName::FunctionHandlerAsync</code>.</p>\n<p>I've specified that the cloud provider I want Serverless to try and deploy to is AWS and that I want it to try and deploy using my default account to the eu-west-1 region (Ireland). This should make sense if you followed <a href=\"(https://www.youtube.com/watch?v=KngM5bfpttA)\">this</a> video tutorial that I linked to in the prerequisites. The profile option is useful if you have more than one AWS account configured to the AWS CLI on your machine.</p>\n<p>The package section is pointing to where my compiled code that Serverless will be uploading will be.</p>\n<p>An example of what the serverless.yml file would look like if configured for different individual functions rather than to generalise a whole Web API project is like so:</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">hello</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> CsharpHandlers<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>AwsDotnetCsharp.Handler<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Hello\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> hello\n          <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> post\n  <span class=\"token key atrule\">goodbye</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> CsharpHandlers<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>AwsDotnetCsharp.Handler<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Goodbye\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> goodbye\n          <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> get</code></pre>\n<p>So, in order to be able to get away with a single function that encapsulates our whole Web API we use the ANY method along with the <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-create-api-as-simple-proxy-for-http.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">\"/{proxy+}\"</a> http path which sort of acts as a wildcard path.</p>\n<p>Last but not least, we have the custom section which I have been currently using primarily for environment variables.</p>\n<p><code class=\"language-text\">${opt:xyz}</code> is the syntax used to reference CLI options passed in. So for example, if you were to input:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">serverless deploy --stage prod</code></pre>\n<p>Serverless will deploy and assign your stage environmental variable on AWS as \"prod\". You may or may not be then referencing environmental variables in your code.</p>\n<h2 id=\"tweaking-our-net-core-project\"><a href=\"#tweaking-our-net-core-project\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tweaking our .NET Core project</h2>\n<p>Our function in this case is pointing to a class in the root of your project, called <code class=\"language-text\">LambdaEntryPoint</code>.</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">api</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> blog<span class=\"token punctuation\">-</span>tutorial<span class=\"token punctuation\">-</span>serverless<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>blog_tutorial_serverless.LambdaEntryPoint<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>FunctionHandlerAsync\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n     <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n         <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /<span class=\"token punctuation\">{</span>proxy+<span class=\"token punctuation\">}</span>\n         <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> ANY\n\n<span class=\"token key atrule\">custom</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>opt<span class=\"token punctuation\">:</span>stage<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">:</span>provider.stage<span class=\"token punctuation\">}</span></code></pre>\n<p>So, as you may have guessed. You need to create this class.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Net</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Hosting</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">blog_tutorial_serverless</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LambdaEntryPoint</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Amazon<span class=\"token punctuation\">.</span>Lambda<span class=\"token punctuation\">.</span>AspNetCoreServer<span class=\"token punctuation\">.</span>APIGatewayProxyFunction</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IWebHostBuilder</span> builder<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            builder\n                <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">UseStartup</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Startup<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>And as you may have spotted, we are inheriting from a third party class. So for that reason, we need to add the following dependencies.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token function\">add</span> package Amazon.Lambda.Core\ndotnet <span class=\"token function\">add</span> package Amazon.Lambda.Serialization.Json\ndotnet <span class=\"token function\">add</span> package Amazon.Lambda.AspNetCoreServer</code></pre>\n<p>If you open your project's .csproj file, you will also find the default <code class=\"language-text\">Microsoft.AspNetCore.App</code> package reference. Since AWS Lambda is only compatible up to .NET Core 2.1, we must hard code this package's version reference. Ignore any Visual Studio warnings that it is advised to not hard code a version number for this package. If you have any other references to <code class=\"language-text\">2.2.0</code> such as <code class=\"language-text\">Microsoft.AspNetCore.Razor.Design</code>, set them to <code class=\"language-text\">2.1.0</code> too.</p>\n<p>The reason why we're limited to .NET Core 2.1 is because Amazon said they'll only support LTS releases. So in theory, the next version we will be gifted with within the Lambda world will be .NET Core 3.1 which should appear in and around November 2019.</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.AspNetCore.App<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2.1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<p>You may also have to modify your <code class=\"language-text\">ConfigureServices(IServiceCollection services)</code> method in your <code class=\"language-text\">Startup.cs</code> to specify <code class=\"language-text\">CompatibilityVersion.Version_2_1</code>.</p>\n<p>Make sure to also remove the line within your <code class=\"language-text\">.csproj</code> that says <code class=\"language-text\">&lt;AspNetCoreHostingModel&gt;InProcess&lt;/AspNetCoreHostingModel&gt;</code>, otherwise you will get an error later on.</p>\n<p>We also need to install a tool to the dotnet CLI that allows us to deploy AWS Lambda functions.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">dotnet tool <span class=\"token function\">install</span> --global Amazon.Lambda.Tools</code></pre>\n<h2 id=\"building-our-net-core-project\"><a href=\"#building-our-net-core-project\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Building our .NET Core project</h2>\n<p>Earlier we touched on the specification of a package artifact within our <code class=\"language-text\">serverless.yml</code> file and said it was what would be uploaded to an S3 bucket and deployed as our lambda.</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">package</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">artifact</span><span class=\"token punctuation\">:</span> bin/release/netcoreapp2.1/blog<span class=\"token punctuation\">-</span>tutorial<span class=\"token punctuation\">-</span>serverless.zip</code></pre>\n<p>Usually when you want to build, publish and deploy, you will run <code class=\"language-text\">dotnet publish</code> with some flags and that will create some artifacts for you to deploy. In this case, we need to create a \"lambda package\" out of our artifacts.</p>\n<p>This can be done for us using the Amazon Lambda Tools plugin for the dotnet CLI that we installed earlier by running the following command:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">dotnet lambda package --configuration release --framework netcoreapp2.1 --output-package bin/release/netcoreapp2.1/blog-tutorial-serverless.zip</code></pre>\n<p>Note how we have once again hard coded .NET Core 2.1 along with ensuring that our <code class=\"language-text\">--output-package</code> flag is pointing to the same directory we specified in our <code class=\"language-text\">serverless.yml</code> earlier.</p>\n<p>It might be a useful idea to place the above bash command in a batch file (e.g. <code class=\"language-text\">./build.cmd</code>) you can easily execute so that you can always generate a fresh build with that configuration prior to deployment going forwards. Because deploying with the serverless framework is such a breeze, I sometimes end up deploying without realising I haven't run the above command to generate a new output package with my changes to actually be deployed.</p>\n<p>If you've done everything correctly, your output should look something like this:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span>. zipping: Amazon.Lambda.APIGatewayEvents.dll\n<span class=\"token punctuation\">..</span>. zipping: Amazon.Lambda.ApplicationLoadBalancerEvents.dll\n<span class=\"token punctuation\">..</span>. zipping: Amazon.Lambda.AspNetCoreServer.dll\n<span class=\"token punctuation\">..</span>. zipping: Amazon.Lambda.Core.dll\n<span class=\"token punctuation\">..</span>. zipping: Amazon.Lambda.Logging.AspNetCore.dll\n<span class=\"token punctuation\">..</span>. zipping: Amazon.Lambda.Serialization.Json.dll\n<span class=\"token punctuation\">..</span>. zipping: appsettings.Development.json\n<span class=\"token punctuation\">..</span>. zipping: appsettings.json\n<span class=\"token punctuation\">..</span>. zipping: blog-tutorial-serverless\n<span class=\"token punctuation\">..</span>. zipping: blog-tutorial-serverless.deps.json\n<span class=\"token punctuation\">..</span>. zipping: blog-tutorial-serverless.dll\n<span class=\"token punctuation\">..</span>. zipping: blog-tutorial-serverless.pdb\n<span class=\"token punctuation\">..</span>. zipping: blog-tutorial-serverless.runtimeconfig.json\n<span class=\"token punctuation\">..</span>. zipping: web.config\nLambda project successfully packaged: C:<span class=\"token punctuation\">\\</span>code<span class=\"token punctuation\">\\</span>serverless<span class=\"token punctuation\">\\</span>blog-tutorial-serverless<span class=\"token punctuation\">\\</span>bin<span class=\"token punctuation\">\\</span>release<span class=\"token punctuation\">\\</span>netcoreapp2.1<span class=\"token punctuation\">\\</span>blog-tutorial-serverless.zip</code></pre>\n<h2 id=\"deploy\"><a href=\"#deploy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DEPLOY!</h2>\n<p>Prepare yourselves...</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">serverless deploy -v</code></pre>\n<p>The <code class=\"language-text\">-v</code> flag here stands for <code class=\"language-text\">--verbose</code>. I like it when the CLI tells me more about what it's doing during deployment and gives me feedback. The Serverless Framework CLI reference can be found <a href=\"https://serverless.com/framework/docs/providers/aws/cli-reference/deploy/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p>\n<p>You will see cool things being output such as the below, which emphasizes how much heavy lifting the Serverless Framework has removed for you.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">CloudFormation - CREATE_IN_PROGRESS - AWS::CloudFormation::Stack - blog-tutorial-serverless-dev\nCloudFormation - CREATE_IN_PROGRESS - AWS::S3::Bucket - ServerlessDeploymentBucket\nCloudFormation - CREATE_IN_PROGRESS - AWS::ApiGateway::RestApi - ApiGatewayRestApi\nCloudFormation - CREATE_IN_PROGRESS - AWS::Logs::LogGroup - ApiLogGroup\nCloudFormation - CREATE_IN_PROGRESS - AWS::IAM::Role - IamRoleLambdaExecution</code></pre>\n<p>Once deployment is complete, you should have a AWS hosted URL returned. You can use that URL to access your API. Simply append to it, whatever you've specified in your project as your API endpoint routes and it should be functioning as expected.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">Serverless: Stack update finished<span class=\"token punctuation\">..</span>.\nService Information\nservice: blog-tutorial-serverless\nstage: dev\nregion: eu-west-1\nstack: blog-tutorial-serverless-dev\nresources: <span class=\"token number\">10</span>\napi keys:\n  None\nendpoints:\n  ANY - https://trololo.execute-api.eu-west-1.amazonaws.com/dev/<span class=\"token punctuation\">{</span>proxy+<span class=\"token punctuation\">}</span>\nfunctions:\n  api: blog-tutorial-serverless-dev-api\nlayers:\n  None</code></pre>\n<p>Now, if I take the URL and try and hit both <code class=\"language-text\">GET</code> endpoints that we have in our default <code class=\"language-text\">ValuesController</code> that we get with <code class=\"language-text\">dotnet new webapi</code>:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -XGET <span class=\"token string\">'https://trololo.execute-api.eu-west-1.amazonaws.com/dev/api/values'</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"value1\"</span>,<span class=\"token string\">\"value2\"</span><span class=\"token punctuation\">]</span></code></pre>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -XGET <span class=\"token string\">'https://trololo.execute-api.eu-west-1.amazonaws.com/dev/api/values/1'</span>\nvalue</code></pre>\n<p>Boom!</p>\n<h2 id=\"awesome-how-does-this-now-affect-costs\"><a href=\"#awesome-how-does-this-now-affect-costs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Awesome. How does this now affect costs?</h2>\n<p>As with all AWS Lambda's, you only pay for what is used. You get your first 1 million requests completely FREE... and then $0.20 for every 1 million requests thereafter.</p>\n<p>Requests can also translate in to compute time per month (400,000 GB-seconds), so whichever is hit first becomes your free threshold. You can read about AWS Lambda pricing in more detail <a href=\"https://aws.amazon.com/lambda/pricing/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p>\n<p>The previously discussed method of defining a bunch of smaller, separated functions versus encapsulating a whole API within a single function, means you create an AWS lambda function for every HTTP endpoint you define. Meanwhile when going down the API encapsulation method as followed within this post, you are instead creating a single AWS lambda function.</p>\n<p>Logic therefore dictates that since all endpoint requests are then coming from your API Gateway to a single lambda rather than spread out over numerous lambdas, that you are therefore more likely to hit your free threshold sooner.</p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusion</h2>\n<p>I hope this article helps a lot of people who ran in to the same brick wall as me. I loved the idea of serverless hosting, understood the concepts but struggled to understand how it could be integrated in to this type of scenario encapsulating a fully blown API within an individual project such as what you should have created by the end of this post.</p>\n<p>If I've gone wrong anywhere in this article, feel free to get in touch either in the comments below or on twitter.</p>\n<p>If all this deployment lark interests you, I also wrote a tutorial on <a href=\"http://www.karam.io/2018/Deploying-a-NET-Core-application-to-a-5-digitalocean-droplet-using-dokku/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Deploying a .NET Core Application to a $5 DigitalOcean droplet using Dokku</a> that even reached the top page of <a href=\"http://reddit.com/r/dotnet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">/r/dotnet</a> a while back.</p>\n<p>Bye! 👋</p>\n"}},{"node":{"title":"Running Entity Framework Core migrations from a separate solution that doesn't contain a Startup.cs file.","path":"/blog/2019/running-entity-framework-core-migrations-from-a-separate-solution-that-doesn-t-contain-a-startup-cs-file/","date":"25. May 2019","timeToRead":3,"description":"After an hour of tearing my hair out...","content":"<h2 id=\"a-painful-introduction\"><a href=\"#a-painful-introduction\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>A painful introduction</h2>\n<p>I'll keep this one short as I currently need to figure out a way to stick my hair back on the  my head, after wasting the last hour tearing it all out.</p>\n<p>Basically, I'm currently in the middle of building a new side project using .NET Core.\nI'm trying to apply a Clean Architecture approach to it, avoiding your typical repository pattern approach but utilising EF Core with Identity as my persistence layer.</p>\n<p>Resultantly, this therefore meant that my migrations and DbContext had to live in a separate project to my Web API project which acts as a presentation layer and this caused some hiccups which I'll try to point out below.</p>\n<h2 id=\"prerequisites\"><a href=\"#prerequisites\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Prerequisites</h2>\n<p>Firstly, we must ensure that our AddDbContext in our Startup.cs class of our Web API project is pointing at the separate project which contains our actual DbContext implementation.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">  services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddDbContext</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>YourDbContext<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>options <span class=\"token operator\">=></span>\n    options<span class=\"token punctuation\">.</span><span class=\"token function\">UseSqlServer</span><span class=\"token punctuation\">(</span>Configuration<span class=\"token punctuation\">.</span><span class=\"token function\">GetConnectionString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YourConnectionString\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">MigrationsAssembly</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">YourDbContext</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Assembly<span class=\"token punctuation\">.</span>FullName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"dotnet-ef-migrations-add-initialmigrations\"><a href=\"#dotnet-ef-migrations-add-initialmigrations\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>dotnet ef migrations add InitialMigrations</h2>\n<p>Usually when our DbContext exists within the same project as our Startup file, it takes a couple of seconds to generate and add our initial migrations via the awesome CLI that gets shipped with EF Core.</p>\n<p>However, in this scenario, I ran in to a couple of issues:</p>\n<p>After running the migrations add command in my Web API project...</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">info: Microsoft.EntityFrameworkCore.Infrastructure<span class=\"token punctuation\">[</span><span class=\"token number\">10403</span><span class=\"token punctuation\">]</span>\n      Entity Framework Core <span class=\"token number\">2.2</span>.4-servicing-10062 initialized <span class=\"token string\">'CleanstagramDbContext'</span> using provider <span class=\"token string\">'Microsoft.EntityFrameworkCore.SqlServer'</span> with options: <span class=\"token assign-left variable\">MigrationsAssembly</span><span class=\"token operator\">=</span>Cleanstagram.Persistence\nYour target project <span class=\"token string\">'Cleanstagram.Web'</span> doesn<span class=\"token string\">'t match your migrations assembly '</span>Cleanstagram.Persistence<span class=\"token string\">'. Either change your target project or change your migrations assembly.\nChange your migrations assembly by using DbContextOptionsBuilder. E.g. options.UseSqlServer(connection, b => b.MigrationsAssembly(\"Cleanstagram.Web\")). By default, the migrations assembly is the assembly containing the DbContext.\nChange your target project to the migrations project by using the Package Manager Console'</span>s Default project drop-down list, or by executing <span class=\"token string\">\"dotnet ef\"</span> from the directory containing the migrations project.</code></pre>\n<p>So this error was confusing as it was clear that it had picked up that my DbContext lived in a separate project. But fortunately it pointed me in the direction of changing my target project in the Package Manager console. So I did.</p>\n<p>Unfortunately after changing my target project/root directory in regular cmd/bash, this resulted in a separate error...</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">Unable to create an object of <span class=\"token builtin class-name\">type</span> <span class=\"token string\">'CleanstagramDbContext'</span><span class=\"token builtin class-name\">.</span> For the different patterns supported at design time, see https://go.microsoft.com/fwlink/?linkid<span class=\"token operator\">=</span><span class=\"token number\">851728</span></code></pre>\n<p>I was baffled, so I tried to add an OnModelCreating() override within my IdentityDbContext inheriting DbContext to see if it would help and to an extent it did. To a certain extent...</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">System.InvalidOperationException: The entity <span class=\"token builtin class-name\">type</span> <span class=\"token string\">'IdentityUserLogin&lt;string>'</span> requires a primary key to be defined.\n   at Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator.ValidateNonNullPrimaryKeys<span class=\"token punctuation\">(</span>IModel model<span class=\"token punctuation\">)</span>\n   at Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator.Validate<span class=\"token punctuation\">(</span>IModel model<span class=\"token punctuation\">)</span>\n   at Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.Validate<span class=\"token punctuation\">(</span>IModel model<span class=\"token punctuation\">)</span>\n   at Microsoft.EntityFrameworkCore.Internal.SqlServerModelValidator.Validate<span class=\"token punctuation\">(</span>IModel model<span class=\"token punctuation\">)</span>\n   at Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ValidatingConvention.Apply<span class=\"token punctuation\">(</span>InternalModelBuilder modelBuilder<span class=\"token punctuation\">)</span>\n   at Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.ImmediateConventionScope.OnModelBuilt<span class=\"token punctuation\">(</span>InternalModelBuilder modelBuilder<span class=\"token punctuation\">)</span>\n   at <span class=\"token punctuation\">..</span>.\nThe entity <span class=\"token builtin class-name\">type</span> <span class=\"token string\">'IdentityUserLogin&lt;string>'</span> requires a primary key to be defined.</code></pre>\n<p>But whilst it helped, it just ended up digging me down a deeper hole.</p>\n<p>So, the solution?</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">dotnet ef migrations <span class=\"token function\">add</span> InitialMigration --startup-project ./Cleanstagram.Web/ --project ./Cleanstagram.Persistence/</code></pre>\n<p>I had to go up a level to the parent of both projects and then specify both as shown above. A startup project and another project which specifies where the DbContext in this case lives. Straight away after running this, just by magic, my migrations were generated and I resultantly followed it up with a dotnet ef database update.</p>\n<p>This isn't much and it might be obvious to some, but judging from the hoarding of googling that I was going through, it was quite a common issue without a specific one size fits all solution that is easy to find online. So hopefully this helps some other poor sod out there.</p>\n<p>Thanks for reading!</p>\n"}},{"node":{"title":"Deploying a .NET Core Application to a $5 DigitalOcean droplet using Dokku","path":"/blog/2018/deploying-a-net-core-application-to-a-5-digital-ocean-droplet-using-dokku/","date":"13. May 2018","timeToRead":8,"description":"Oceans, docks, whales & five dollars.","content":"<h2 id=\"an-introduction\"><a href=\"#an-introduction\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>An Introduction</h2>\n<p>Hello everyone! </p>\n<p>Cutting a long story short, I love developing software. However, I hate deploying it.</p>\n<p>I've worked with different extremes of software deployment. One extreme involved dev testing, comitting to SVN, then telling the manager to press the magical deploy button and hope for the best (e.g. copy all the files to an FTP server and give it a restart) and hoping in the words of Bob Marley that everything is gonna be alright.</p>\n<p>While the other opposite side of the spectrum involved using beautiful CI/CD pipelines within different environments, made available with state of the art tools such as <a href=\"https://www.jetbrains.com/teamcity/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TeamCity</a> &#x26; <a href=\"https://octopus.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Octopus Deploy</a> which not only deploy with a single click but also run your tests for you as well!</p>\n<p>This post is going to be about my current deployment workflow for my .NET Core projects at home. It was important for me to find a process that was not only fast, but also cheap and really simple to execute.</p>\n<p>I wanted something that looked a lot less like a Boeing-747 dashboard.</p>\n<p><em>Yes AWS, I'm looking at you.</em></p>\n<p>And something that looked more like...a simple git push really.</p>\n<p><em>Yes Heroku, I'm thinking of you.</em></p>\n<p>I'm still planning on adding to the workflow I'll show you in the below blog post to integrate a CI/CD pipeline too. However I've not had time to consider my options or look in to this in too much detail as of yet.</p>\n<p>For the moment though, let's focus on how to deploy your .NET Core applications to a $5 DigitalOcean droplet using Docker &#x26; Dokku! Not only giving you your very own awesome and cheap hosting of a Linux server, but also a Heroku-like deployment process that involves a simple git push to get your changes up and running in a matter of seconds!</p>\n<h2 id=\"creating-our-digitalocean-droplet\"><a href=\"#creating-our-digitalocean-droplet\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Creating our DigitalOcean Droplet</h2>\n<ol>\n<li>Sign up for a <a href=\"http://digitalocean.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">DigitalOcean</a> account using <a href=\"https://m.do.co/c/62f1b558a9c1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">my referral link and get $10 in free credit</a>! If you really don't want to help me out, feel free not to though!</li>\n<li>Once you're in, click on the \"Create\" button on the top right hand side of the navbar and choose \"Droplets\".</li>\n<li>One of the amazing features of .NET Core is that it can run and therefore be deployed on a Linux operating system, so choose the latest version of Ubuntu along with the cheapest Standard Droplet with a price of $5/month.</li>\n<li>You might notice the \"One-click apps\" section. In the past, DigitalOcean used to have a .NET Core deployment option but unfortunately they removed the image after what they call a \"test period\" because it didn't get much usage... which I think is an unfair assessment given how young the ecosystem is, but okay. You'll also probably also notice the Dokku option but personally, I'd rather just set up my Droplet 100% from scratch.</li>\n<li>Choose your datacenter region, I live in the United Kingdom so I opt for London, but feel free to go with whatever choice best suits you.</li>\n<li>For the additional options, I tend to always go with the \"Monitoring\" option and choose others if I feel like I will specifically need them. For example, if I'm just temporarily deploying an MVP for a short period of time, I won't bother with enabling weekly backups. If I plan on hosting a live release, I will pay the 20% extra fee and go with the backups.</li>\n<li>I recommend you utilise an SSH key for your authentication. Just to clarify, this is what will allow us to authenticate our machines when we remote on to our DigitalOcean droplet, install Dokku and deploy our .NET Core application. If you're just playing around though and you don't have an SSH key set up on your machine, it is probably quicker for you to leave this for now and use the password DigitalOcean e-mail you instead when remoting on to your droplet.</li>\n<li>The rest of the options should be pretty self explanatory. Once the creation process commences, you are redirected back to your dashboard and you should see your new droplet listed with a moving blue bar as your droplet progresses.</li>\n</ol>\n<h2 id=\"accessing-our-digitalocean-droplet-using-putty-on-windows\"><a href=\"#accessing-our-digitalocean-droplet-using-putty-on-windows\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Accessing our DigitalOcean Droplet (using PuTTY on Windows)</h2>\n<ol>\n<li>In order to remote on to our Droplet, you will need to download and install an SSH client. I use <a href=\"https://www.putty.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PuTTY</a>.</li>\n<li>Now that your Droplet has been created, the IP address should be displayed on your dashboard. After launching PuTTY, input your droplets IP address in to PuTTY with a port of 22. Ensure your connection type is also set as SSH.</li>\n<li>If you have gone with the SSH key approach, follow this step, otherwise skip to step 5. Using the category section on the left hand side, go to Connection, SSH and Auth. From there you should have an option to load your private SSH key.</li>\n<li>If you opted to skip the SSH key approach, go to your e-mail and you should find your Droplet's authentication username &#x26; password. Take note of these.</li>\n<li>Now that we are done, go back to Session on the category section on the left hand side, give your current settings a name under Saved Sessions and click Save. Now, when you launch PuTTY again in the future, you have the option to load the settings rather than have to input and configure everything again.</li>\n<li>We are now ready to remotely access our Droplet. You can do this by clicking Open. When asked who you are logging in as, use the username 'root' without the single quotes.</li>\n</ol>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 650 420' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-1592671aff9474919b0d680557c7871f'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-1592671aff9474919b0d680557c7871f)' width='650' height='420' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAApCAIAAAAK8LgbAAAACXBIWXMAAAsSAAALEgHS3X78AAANn0lEQVRYw9VZ53dUxxX3n5JP%2beSTL86xHZ90xz7YwXZiE2NsSDgEgg2mGINxA0w4QChCAoR6XQk1EM1ysCVt0da3vffeq7Zpi/rmN2%2bkjUDY50TrL7nMWc3Mm5n3fjP3/u69w1OV/3N56vseLC0t4febh5P1jZ2dPaP9Q/e6OSN9A3f6h%2b73Dd3jDN7p6R/tG/m6q%2b92YwvnyvXOyw1tl6%2b201Lf2FV3tf1ifeuFK63/qms%2bf6npfF3z2YuN5y43XWxoO3/5BpqoXG3qxTBMvN7CaWrva2zpGRq5zxkYbW7v7%2bod6e4budbcfX/sO/o9y8vL/xuAxcVF/F5r6dvyzi/eP3Tg6BeXTp699ulXdSfOXj3y%2bbmDx858%2bPGp3fs/O3D87JvbD/5q8983bfvouT%2b89%2bxL2zdt%2b3jz9uPP/Hbri1s%2bfPb37z738t9%2b%2bdqenz7zys9%2bvfX5Tbt%2b/tKO51/d9fQLf/rJ0y%2b%2b8OruX7%2b%2b9zdv7N30zqHfvbZr87YDR082fPjJuU1v7d1/7Pzpi63v7D1Rd6O3JgDNncP7Dx/86tzp85fb6ps4Fxo6Tp%2b7%2buWZ%2bk9OXDh07PS%2bwycOHT%2bza9%2bnb%2b88sn3vZ1t2HNjy18Pv/ePTd/ccf2v7gW27j23ZcfAvO4%2b8vevoK2/tfm3rvte37d/89vv4/eOWPS%2b/sXPz1g/eePfAn7cffHPHoTff%2b3Dnvs/3Hj71wZFTHxw%2biQ36%2bMsL%2b4%2beqWvs2iAAqkK3H0wIhIxCrpKr1EqV2ulyR6KxcDgSi8Wj0RhKOBKNsBIOh6OsoIYWHkVWhT7CbygUCpM/GBAhIyNkcoiVaj/pjEXJTyzmcrk7e4foVm4QQE//bZmM0WhUIrFUxsjDkXC5XC4WS7lcLpvN5rI5IllSz2Ro4xGZmZkpQgqFUqn4iJSK%2bXwes9LpNGnRx4XC6rwsOzcfi8d7%2bm8tLCxsHEB796Dd4aY95cKMSqNl5HKxWDSdydIxdBi2MxAIJpPJTCYzPT2Nz0IlkYjzeNwpsUSlUgsEAi6Pjz0Q8PlKpYKRSqakctGU0GTQyxWMRCwSScRKtRb7wM4mgnUCwVB3jQA4A3fMFluhUPC4nWarRavTu92e2dlZ%2brQq2Mt4PJHEJ8fj%2bIAEW0kkk24X/rk9HrfdYccfn8/n9Xp9fp/L5QqGwqFgcDqVQp8bbbfb5/On1ggAQLPARYuLNQDovXnHYnPm84VUKul0OXU6vcfjyeby2CAcdHVNHHcikcTmicVCHo8nFglFYrFUIp6aEvJ5PL6ALxIJ9XqDUqlRqlTjExPYcI1KLZZI%2bFyuUChSaPTl8mypXM6y2kML1A8G1sWpDUDPzVG7c0WF0tNJfJZOh1drtBq13eGoLgmFxo5Dbfx%2bnwPiJOJ2u7DfTtJyYIdtNhs22uf343ywvdjjJCuoQGECAb/H68UWEHuCJmWzFEB710BNRtzJuWVjbQDzQwGfjGFMJpMDH%2bT1La5RIgoAL3baHQqFSmcwyeUylUatN2DXVSajUSyRSSUShZzR642UAFhBJQfrz%2bdn7DabQiGPxOI5wgcZQMKakUisb%2bTBQk0qNHiPnsDi0hIWNpuMOoNRoVTpdLp0JlddN5/PERVKkxdr1QopwxjMFi3hLkkskVr7elQWnyRgU6fbgwEwWdoDwwNd998aq%2bkE2jmjVruLzp9OJlUqpdFoYBRKGNziGjsGq1ut9gy7eawpJ5KshgAVSBLMCyJl2RLVMkuaJdrAwxIrGIo5oIfSimBKAY7hRmtvTQCa2gdgxLSZjMcIAIPeYDLj0NcODoUiWq0epuyw20CyMqlUMIXdl8gk4vHx70LhKD4bmgN40Bt8GUg/l8vniKLnZ2YKUHe0oDMYgCZ1CDP5PAA03OiszZENPrA5PZXlpbm5OVC01WoxGo1ev59qQ3UwnK9eb8I3BYJBaBefL1AplbBOWC3GM4wMFgBjjsYTLqdTCBGj6XAHwlypkpGKpDI5DAHMCz7FHkkYxuF0AWQwVDOA1u5BvdGSyxfAJEq1RiFXKNUqjU4/Nze/djALwEjZA7wCUvcHAlAP4qvz%2bUAgALtHdIDdBipQE84Qvi%2bWSpsc4Cqnw%2bmGNYOaEKHgRUaLJRAKFVkVqhXAjbY%2bk9lG5ydjEYPRGI7G1y8XWgGQ83lZJxUMwW2BOvGtdrvNYrN74L6CQZvNDnr1%2bnwgTTCr1%2buZKRTyhSJ%2bEYhkKFxoEEKVPJRqJkwAdNUEoK3nloUa8dJSNBxSazTgiqV1a62eQA4WotVqjEazWq22Wm02q1Wv05AoSi4HpcoZuQoCZ6YkTKXX66ZZu6e2kWELgpA02wPD%2bBFOoLVnmAJAMzOdAqNrNJpCaXY9AJ3eWCjMQLOVSqXFYlEq1YxUik%2bEviFqgAmBWWbnZssrPFSifzKrkn1U0PHjAGjrGbGuAgBpwAHrNOpEKvPYihQAXun1eMViCfFleqibiWFgNEqL1Y4g2eFyQ3888LfQoEDQTSq%2bLKsysI3HIPwIABZZT3vpSpPBZKHzo6GQVqsl/jKeWg%2bAuFj441hcq9GaTDaX04WIHkeh1%2bpMJovVZleptRqNWqPWgpetFotcqdLq9fmZAqbPLyywLvkRIQBCkbqrrbUBqG%2bmALAlAb9XMDXl8QXWL7diA7kcaATbFopEkaE43d5AKBJLJLO5GZIRkHBtDtSEkp8p4tNRYLjpTDaVzoCTSADLCirIZnAOWKquoaUmFeq6ec/mIB4ezgfOJRgI2O0Oum1PApAPeF1qRjj%2b3bcapUyrlPG443zuODxgZWmhXMjNFfPzc8XZQh7fs3b6/Pw8Ir5gKCgWie/fu6PR6vx%2bPxx5JBrvHrhXoye%2bWfXEENgd9ACcWGStsJoVQGFUKg3cqt0TvM/XPuDrx%2bV2oTnyjdRyl6%2b7w9M8ZJwj48q7At0DoXFMaPJmKp50xZOpuNKkuFPzsA0QAHgWxAWXh9AV%2bQDyyrbu4VqNmLIQVsE%2bwdvjBUaDDkwIboSzXA0lwlqdcXYm89CUPTZROStcPj6%2bvOv23InJpZO85VO85Y%2b%2bWTwnrPxTUPlycvkLXuXgw8pJLuqVbbcqL3Iqe%2b7OwzPgi3U6LZga1o1kCHEhwunmjps1AWjpGqInAJNAnFgqFmCXGr0uEAyvXZSokMEEBo%2bnstlyZbq4lCou5%2bcq2fIySqq0nJtdJp2FpXRpGSVTruRmSZkuVlLFSiK/gF232%2b0ioXBichIY8BaiQrF4Z9/txVpSyubOQQoA84vFcjQSZWRShVa/vN4GDCYkkyDDH3jZ9wm8BHxFJByB6odAPWFyZ4HtCEdjiGVqAtAzwAZzKwCK4KJUMgEPi8gAYUIsnvhvKFEDACin0%2bkym81jY2Oc3p6vx/7tdrtBR8gHGmsMp3ECZquDNvGahYX5cqmM6MtgMCA1C4ejVQAGCiCzsROYhxWFQsEwuVMi90hwdaBRnERjG2ejfoAFcLm%2b1cgGcxQAbMDrDfh93ic5MhO5U0lPF0g8T0vh8XrxCQWExt4SpOG5QBL0YggV6olvbBjACo123FxrxIh2XC4HkvCVFVcXpdEotj%2bTy5OvgXtiQ0saY6bZfiScydT0E0uKVb7HCqbjOGoF0LJqxOQEFhbKxQJiYZvdYbGas2xSRteljixPQn%2b/GdF8MAgLQTTqYW97cGTIVOBqcQokk8/lCiQRy9Mtf0xWgyEaC0VrBdDZN0o9MZqERgsFg9GMvN7n9SIiWAuADebycEZc7iSbcokFgik1glKNVs5I%2bXy%2b3e7EVtOYzUeYhgjJm5MJcA4NH%2bJsBLEmmKsZQHvvLSt7rUJVCFrOIEGUKxAJI0OgS9OcWKczkFgongA9icQigYCvNxqJfmez/kBQLmdEIhEInr35zD6UakUy5tuJCaVSgQCRy50AZKlELJVJ6SGsAdBXE4COvrurAIgghjebCf9YLGa%2bYAo5a9UTo49uHlVfcreZTq8G%2b%2bTiN8NqT/U%2biL0TYtN8tnPtUyr5GdhAzQDaObetq5e7iXgMyblSoy6WZylNVZfE%2bcMBsVdU9KZ6fYKy0rNy%2b1y92apeRuce/fxstsDezNV8ApxRg8mKY02lyGUgkl3EyWAh6rPAfejHPidTKcTCqdWb5ez3SHpVqL3SG7iqoEn7gYUuEiY0WhuAzv67OoMlGAyCWPQ6nVjGwCydLpefxNV2kp4jVUcMIxJLGXkwGAZCvz%2bAsCyzTsh1eSAA/D6fD/aANNnucFKf5XK5cIDwvlKJRMYwiBSxCOl3e5ra%2b2tkoTtICAkPul0alYLL40L1EfKCFn0%2br9/rcbuQXpn5PN4kj%2bciV7oODIaDKlVLqUgr8CF4RO56HXYed5LL5RqMJnIB7PH42fURTQunBDweTyqVkPt2lzMQDLR0Dmzw/wcWV4z4zvWO4c7%2bUegScouewXuc4a9Rae0aQqrQ3DXc0X%2b3Z2isZ/BBe%2b/t1p5bKM1dQy3dI10D9zEXJnSjfaCdM0qGDY/RwYhwG1v7WrqHmzuHrrf2XWvuvdTQerG%2b%2bVJDy5XrHfWNHVeutaOOyvnLTRfrWzb4f2R0AmzP6w/6SAmhgnzc62PrvpU6%2bzTk8QZQ2AFBD%2bln69UmW/cFQljH7w/jqdvjc3v9ZJaPTETTwxa32%2btye/HrIU/96IeN/XAc9R%2bpFqPuivdu0AAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"650\" alt=\"PuTTY Configuration for the Digital Ocean Droplet\" data-srcset=\"/assets/static/dokku-setup-3.2f2d982.bcc746d9fcdbe999faaad5db0fc4a6d7.png 650w\" data-sizes=\"(max-width: 650px) 100vw, 650px\" data-src=\"/assets/static/dokku-setup-3.2f2d982.bcc746d9fcdbe999faaad5db0fc4a6d7.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/dokku-setup-3.2f2d982.bcc746d9fcdbe999faaad5db0fc4a6d7.png\" width=\"650\" alt=\"PuTTY Configuration for the Digital Ocean Droplet\"></noscript></p>\n<h2 id=\"accessing-our-digitalocean-droplet-using-ssh-on-mac-os\"><a href=\"#accessing-our-digitalocean-droplet-using-ssh-on-mac-os\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Accessing our DigitalOcean Droplet (using SSH on Mac OS)</h2>\n<ol>\n<li>In order to remote on to our Droplet, you will need to use the built-in SSH client on Mac OSX that can be found in your Utilities folder.</li>\n</ol>\n<h2 id=\"installing-dokku-on-our-droplet\"><a href=\"#installing-dokku-on-our-droplet\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Installing Dokku on our Droplet</h2>\n<p> 1. We want to install Dokku on to our Ubuntu Droplet to give us the Heroku-like functionality we described earlier. By running Dokku on our server, we will be able to push our code changes from a local git repository up to our Droplet where our application is hosted. From there, Dokku will build everything, run our tests (we don't cover this in this tutorial) and so forth, just like you might be accustomed to from Heroku.</p>\n<p> 2. Use the below commands on your Droplet to install Dokku. This may take a few minutes. </p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://raw.githubusercontent.com/dokku/dokku/v0.12.4/bootstrap.sh<span class=\"token punctuation\">;</span>\n<span class=\"token function\">sudo</span> <span class=\"token assign-left variable\">DOKKU_TAG</span><span class=\"token operator\">=</span>v0.12.4 <span class=\"token function\">bash</span> bootstrap.sh</code></pre>\n<p> 3. Once your installation is successful, you need to configure Dokku. Open your browser and navigate to your Droplet IP. This will launch your Dokku web installer. What you do here will depend slightly on whether or not you opted to go with the SSH key approach, but it should be self explanatory. Unless you have deviated from this tutorial and tried to set up your droplet to use your own domain name <a href=\"http://dokku.viewdocs.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">(Note: You can learn how to do this from the Dokku documentation)</a>, you should be fine to leave everything the way it is and click \"Finish Setup\".</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 700 420' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-79213d58c240d88045f541753630e9b6'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-79213d58c240d88045f541753630e9b6)' width='700' height='420' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAmCAIAAAD7pgrOAAAACXBIWXMAAAsSAAALEgHS3X78AAAFtElEQVRYw9WYW28bRRTH%2b8ngK/DKaz8Aj0ggBBLipULigTde%2bkSbJqUqiEJREyGeaHqh6iUttHHWu%2bu9r%2b1d78V24tjwO3NSN1HVuGC3NifReHZmdub8z332zN//niaTyatGXp5603RmJqOuY%2b/s7FRVnbbTMPDjpH1wcMD4kyePbcfdHw483xsM96uyHA73GR%2bPD3nx8FDat4DnNADj8Zj23h%2b3f/t169pP19c3Lq1f/PbC2uXNzS3PD%2b7c2t7YWF9fW7u0cfnG5tbaxQsPHj0qip5t23mv8LxWnCRhFKkklqmBLOvCR9btJknSaUMdz/Pqup/nWRAEaZK2O4z49%2b/fK6tyf3%2b/qqqD0agPDeRvmRr4X9BsAL1ezzfU6bTTJInj2A989KA2NhmrqUtXNXa8XQkAg34f71QajUbqoOoeq64BlWKjsXvz95t379x9%2bteT7Vu3s7y3lHD53zWAvA8MIX60MRgMpo8v03T8%2bIJXLX4d4vS5AIh1Hx7mWdZOJQARfN6ygDWfzAWALfBeIqZPsPT9bhcj6hVFUZZllwehnE6n0yHUArJrSDsyl%2bf0Wc9sZqZyQ6Yrs4Tp3AwWsmvBI1sxRfDA63C3BQDgFGK/67qO47huCxxpmoRh6Dpuy5CJUgEdsphriIWeLAS1Zzs2HQZFCqzzfZaxmNd1W1oeteWXI/hvNpt53tPoNj%2bAnOOaluUYJsJACQhhHEWcS5c0F4UhJ0chvyHcBwYWbDHLase2wzCKoxiOLcvS93WBiCDwDRI/iiIGExOvUcJiAJABVK6esaLQEFL0PZ9jYEWYcEWEcI%2b3wGhgJJ0IxXTpwyUP7TSFZzrKPa0qkH1gXVO77s/mCG4xANI0FY27rsomiuKpMYSB8NEy8NQMQpE3bHlMmcVQjMkhZ96C0dAMCdooaolKQ6TNuyqLFwoOgrrfX5gGxCTEjxFmkMSJbxjlKOQGPDEkMYMAfzXDohMAhfqKH/A6/mMsvqXCNsvEGTAqNZjouTZELmGEj48NLQBAL8/ZV1TsBxxpTCWEIfxMeYUJmQ0DWJFg5YltqDUb68L%2bbdtxohgHcPgDhro1m8C0Ze01m3bTti2rKToU9QYYK/ljMQAIkqp9ACA4JA0PwhEYwCNcCseBgAyNMGPfuCMGTUxU/zbBpynYxLSoqpKyrMhxw%2bGQ5FjX9UDoqGjRwem9Yi4ApEOiAbaBqcANFbUagOodyrOcUTrSRpFmAOOHYl2E9jRtx8YZNBDxoqYIdj79dMQPkiWX06fIT4vYUwjxzwQ5G0C/riWfZtOmx10lM7mzZ0iSqGTQbGbdspxibnQglyxgQGVZwG5VVpgSid8UAkIAYGTlAKjyifKNxp5FxLGaeO1SuJwLAN5LjJMihcrHbY0MAGO9hy/IPIzfDM1dTk8mhIKikBJ0INYvpTWl6EkEb4r0DjgfgPEYPzXFQksTLXrAl3V%2b1e8Dr3N7fH6Jn0wT3wJpXhOCsJa6KiiECaGUZaRZT4rQJOt0eSCZdbpceNpkJp5InysXRrlGDgd9mCOhck2hbsCnpeQKKIcoJ2xKaNICCyguqB9XDsCgX2vRUlUlFQrXQHyaXFaUFW1dVXj3aHmxdfZnlV6embtIutdoYD9N2zkq6ALx5kCKyhYX5KPvXCv1dXpaUR0vWjQwGZ%2bdPCcZn34I0VpyUaRfwucCUNUVZTBKwAco1q09i7sLJT/1O7JviFpiMvRR6e953awrprUg6s9yqtcBUIu1cG1N20EYydWXm4u5dlEbwzSpmhwR6h0/SSiNOLhaEC0AgMlWk5OdE5Ww5prpk36KWxTNVU6PjUd%2bdzf68PLTT68%2b%2b/jKs0%2bu7tJ%2bcPHPH%2b/H0wWrW8wpfx9defrOue2z5x%2b%2b9/W99795cPb8o3fPbX/%2bw67x71UHIO3PD5PPvt/98hfr3HX5/%2bpG84trjc3H7RX5Rv0P9r6dmxBHr9UAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"700\" alt=\"Dokku Setup\" data-srcset=\"/assets/static/dokku-setup.4736ab6.d2448ad5086d296149ba4cacb8c1f3ef.png 700w\" data-sizes=\"(max-width: 700px) 100vw, 700px\" data-src=\"/assets/static/dokku-setup.4736ab6.d2448ad5086d296149ba4cacb8c1f3ef.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/dokku-setup.4736ab6.d2448ad5086d296149ba4cacb8c1f3ef.png\" width=\"700\" alt=\"Dokku Setup\"></noscript></p>\n<h2 id=\"deploying-our-asp-net-core-application-to-our-droplet\"><a href=\"#deploying-our-asp-net-core-application-to-our-droplet\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Deploying our ASP .NET Core application to our Droplet</h2>\n<ol>\n<li>It is crucial that our projects utilise a <a href=\"https://docs.docker.com/engine/reference/builder/#usage\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dockerfile</a> as this will immediately tell Dokku how to deploy our application. Dokku automatically realises when we commit to it a Dockerfile and has the ability to run it within a Docker container on our server for us to access. </li>\n<li>For this example, I'll be using one of Microsoft's Official .NET Core Docker samples that can be found <a href=\"https://github.com/dotnet/dotnet-docker/tree/master/samples/aspnetapp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>. Clone it down to your system using git clone in a terminal on your local machine.</li>\n<li>Before we get to deploying the aspnetapp repository we just pulled down to our Droplet to host, we have to make one slight modification to the dockerfile. I've pointed out the line that needs adding below. The reason we add this line is because Dokku defaults to listening to applications running on port 5000 on your Droplet. You can set different applications to different ports and so on in case you want to hose more than one application on your Droplet, but that'd be going a bit off topic for now.</li>\n</ol>\n<pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> microsoft/dotnet<span class=\"token punctuation\">:</span>2.0<span class=\"token punctuation\">-</span>sdk AS build\n<span class=\"token keyword\">WORKDIR</span> /app\n\n<span class=\"token comment\"># copy csproj and restore as distinct layers</span>\n<span class=\"token keyword\">COPY</span> *.sln .\n<span class=\"token keyword\">COPY</span> aspnetapp/*.csproj ./aspnetapp/\n<span class=\"token keyword\">RUN</span> dotnet restore\n\n<span class=\"token comment\"># copy everything else and build app</span>\n<span class=\"token keyword\">COPY</span> aspnetapp/. ./aspnetapp/\n<span class=\"token keyword\">WORKDIR</span> /app/aspnetapp\n<span class=\"token keyword\">RUN</span> dotnet publish <span class=\"token punctuation\">-</span>o out /p<span class=\"token punctuation\">:</span>PublishWithAspNetCoreTargetManifest=<span class=\"token string\">\"false\"</span>\n\n<span class=\"token keyword\">FROM</span> microsoft/dotnet<span class=\"token punctuation\">:</span>2.0<span class=\"token punctuation\">-</span>runtime AS runtime\n<span class=\"token keyword\">ENV</span> ASPNETCORE_URLS http<span class=\"token punctuation\">:</span>//*<span class=\"token punctuation\">:</span>5000 <span class=\"token comment\"># &lt;--- THIS LINE IS MISSING AND NEEDS ADDING!</span>\n<span class=\"token keyword\">WORKDIR</span> /app\n<span class=\"token keyword\">COPY</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>from=build /app/aspnetapp/out ./\n<span class=\"token keyword\">ENTRYPOINT</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dotnet\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"aspnetapp.dll\"</span><span class=\"token punctuation\">]</span></code></pre>\n<p> 4. Now go back to your Droplet in your SSH client and run the command below. Note that you can call your Dokku application whatever you like, but I've gone with aspnetapp for the sake of consistency.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">dokku apps:create aspnetapp</code></pre>\n<p> 5. Next, returning back to your local aspnetapp repository that you cloned in step 2 on your machine and set up a remote repository for our code on our server. Ensure your remote username is dokku otherwise this won't work.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> init <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> remote <span class=\"token function\">add</span> aspnetapp dokku@YOUR.DROPLET.IP:aspnetapp</code></pre>\n<p>Now you can commit &#x26; push the repository files up to your droplet. As it is already set up with a working ASP .NET Core application and a valid dockerfile, you're good to go.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> commit -m <span class=\"token string\">\"initial commit\"</span>\n<span class=\"token function\">git</span> push aspnetapp master</code></pre>\n<p> 6. Once your deployment starts, you'll get plenty of console output from Dokku. Don't worry about it too much unless there is an error for some strange reason. You'll eventually see a point where Dokku is outputing a typical dot net restore which might look familiar to you. This is because of our dot net restore step in our dockerfile.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">Step <span class=\"token number\">5</span>/13 <span class=\"token builtin class-name\">:</span> RUN dotnet restore\n ---<span class=\"token operator\">></span> Running <span class=\"token keyword\">in</span> fe05207b711f\n  Restoring packages <span class=\"token keyword\">for</span> /app/aspnetapp/aspnetapp.csproj<span class=\"token punctuation\">..</span>.\n  Installing System.Data.SqlClient <span class=\"token number\">4.4</span>.0.\n  Installing Microsoft.Extensions.Caching.SqlServer <span class=\"token number\">2.0</span>.0.\n  Installing Microsoft.EntityFrameworkCore.SqlServer <span class=\"token number\">2.0</span>.1.\n  Installing Microsoft.AspNetCore.Razor.Language <span class=\"token number\">2.0</span>.1.\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core <span class=\"token number\">2.0</span>.1.\n  Installing Microsoft.EntityFrameworkCore.Design <span class=\"token number\">2.0</span>.1.\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation <span class=\"token number\">2.0</span>.2.\n  Installing Microsoft.AspNetCore.Mvc.RazorPages <span class=\"token number\">2.0</span>.2.\n  Installing Microsoft.AspNetCore.Mvc.Razor <span class=\"token number\">2.0</span>.2.\n  <span class=\"token punctuation\">..</span>.</code></pre>\n<p> 7. You'll know once your deployment is completed when Dokku displays a message as below. You can navigate to your deployment by navigating to the IP address &#x26; port in your browser.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> Application deployed:\n       http://<span class=\"token punctuation\">[</span>YourDropletIP<span class=\"token punctuation\">]</span>:<span class=\"token punctuation\">[</span>Port<span class=\"token punctuation\">]</span></code></pre>\n<p> 8. That's it! You've successfully deployed a fully functional .NET Core application to a $5 DigitalOcean Droplet in minutes thanks to Dokku &#x26; its magic handling of a dockerfile! If you're already thinking ahead towards how you'd go about hosting a database and linking everything up, there's plenty of information that can be found in the <a href=\"http://dokku.viewdocs.io/dokku/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dokku documentation</a>.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1568 763' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-85ab868d08fc394d5a521aedd12926ae'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-85ab868d08fc394d5a521aedd12926ae)' width='1568' height='763' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAfCAYAAABXscv8AAAACXBIWXMAABJ0AAASdAHeZh94AAAKqUlEQVRYw81YCVdURxbmJ2iMS3JmEqOiop7EZWISjTrjxhAFWd2iZlxx14zihp6ZRMctjooaT0yi4zga4y6IoALKqFFB3MPSrA00S9MIQtM0TdP9zb313mteLxiJnDh9znfqVtW9Vfd%2b91a9Ai9vb28wevbsCZ8%2bfdG7Tx/07dcPffr2Qw/vnuhOczzeq7cPunXvQfN94UNzPO7dq5eQeZ51u/XoQfD%2bP0IPZ3SXIMUrxe3Vvn17tGvXDh06dMDggQPwwaAB1PbH0PcHoXe3t9H1zS54z6cX%2bnl3w%2b86voY%2b3buiv09PdO3SEe%2b82Rnv9vJG/97eeOeNTvh9pw54q/PreKvTKwb70Lkj3urC6IS3GW8wOot4Xu/wmoiZY/fatWsXoqKisG37V3jPNwjeoybAx28i%2bgVMQ/%2bwORg0dSEGTVuCwbNWYMiCSHw0PxIfhq/DkIXrqb9eyKJP8tCFrx7s10fha/Hh3FX4gHwe/Nly/GH6EhHHwMnheDdkFiI3bsa%2bPXuwk2L3gurnG7kbg1bswLAvvsefth/HmL0x8Dt4FRN%2bvIuQmExMTijC1KulAlOulgi49l85knSYeKkAoReyEHTmEQKOp2L8kZsURxJ8v4nH8J1nUGy0OGL2amxshN1uQ3WtEaNWbsGAxRsxZG0UhhMJI4mEsUTCuO%2bTEPjDHYSee4KwmAyERcuIcWlbQGj08%2bfbEqHR6Qg%2b/RCBx1MQcOQGxlHgfhT42L3RGLPzFD7%2bxxH8XFQugrdQ7F52u110ak31GB2xFQOWbMLQdXsxfONBjNpxAr5fx2L8oWuCyeDz6YLZ4JgsqggZcp/HGWEumBirweSLGkffVS9UpeewEX1Pa7nLoR7WDDn7GEEn0hBw9BbG/%2bsa/L69THFcwJjdZzBsy1FklhhEzE022/MJGCkT8AkRMPX0PcyKz8L8xDzMT8jFrMs5Atxfdi0f0%2bKyMY/Gp1Kwk1RBczsjPls4OEWWpxOmkj4HzX3WYRK5P0lFBI/zelPktVzJ4rnZV3Lxl0s5%2bIzwKa3ZOgLsL1YB/rTI9utZ2HanEDvSSrA5pVjg4BM9tqTosPq6Fkuu5ov277eKsDVVh/0PywRBnE0OkquFSfridhHW3ijE%2bpuFWJFcIGS2W3NDi3Ukc0AcKOuzzOtu%2bKkQC5PysIr0mGRlnslfROMRNB5J63EigqIz6ai2IQFjiYDAw8n49Mw9zL2kwQLalAOZSYwvps25P0PO6ALZoXBykh3mDE6Oba4Azq6SMW7nEFh37hVJn4NjXSXbXCk8NkfWZR1lLdaZRjKPzySieZ3p8W1aAYccFcBHwJ/ugKBz6Y7zzhlgtoNimkuT57ivtGFy0Oo7QLk3QjzcIyHyWlziSpkruqGqu0aZV5//YJUfzgQk/0oCvjyIYdt%2bcFyCgfQp5FtW2rzZiV%2bC%2bjJsK5vnzSsEBMoE8Gf8zwdaScAQImAEVcD6s9cRcCAen9AiTAB/YpRNXjQQT3JbkOY6r74clQoY/5%2bfsDD6HoIOJWHMvpjWE7DsWAL8v4kTRyDwx9RWE/BbwhMB/kTA7NMpmHAwkQh4iSMwzgMBrSchq9XH50WqRx14mx0B5RIcLV%2bC41qogLALGse3Wwosy0PAnoN3t3G3n%2bRomy/ZYHqSK22o6wPKpQJe7hJUvQM8V4DkHDsRGKOhW58eMxc0jq%2bAqxx8QWpD5Js9UHwpmm2CHGuwjSQrOrw%2b7zvrMn0OE/LpE5qHuYn5mC4/fFo6Am32EPJYAfKGc%2bhtEJGkwYpEDZYlaPBX0WZjObWraHz11WxqsxF5NQsbknMQkZiFpaS3isZZd2Ui22cL2%2bWERVc0Yv5zGl9B42tJb8nlTGy6pUVF1TPoyitQVKZHRUUF7uiqnT6LvzkBYSRPi81EeFw65sRlYiZhXnwmZsUxMoQ8O07qc8s6M2IzhN7iSxk0RvLFDMyNl%2bTZ8hqsH062Cy5liXZmbDrW/DcP93VPkVJQjhStHg8K9YjOrmhbAsau2oZBSzdjWOQ%2b/HET3QH/PAm//RfpKZyM4BN3MZH%2b6pskn99JjnPMZc2PEgktyQpYn0t%2bebKWUIDp9CqcFp/jphviAvH4ojYsll6CsVLLDyRXf8R9QX%2b1Bp9MQ%2bCxW/CnV%2by4765QHLHwjTqLEVuPIbO0BQI%2bXrYRPuF/w8CVOzF4wwEM3XIMI6KiMfrbRPgdvQP/sz9jAr3%2bAs43YwIjWm49yR7Adgp54jWptjnvwd6TfD7TzRcJGRh/6iH8jqXC9/ANjP4uCSO/jsOI3ecx7KuTeP/Lw0jXVbj/NWgyN2DRnn9j%2bo5DmLP/JMIPxmDh0QQsPX0Tn19IQ8QVLsN8%2buNFq0KhC%2bTxm%2bp%2boRvW0fzqG9IfQErfeV3Pe7CeJzj05P6a5FxEJGRgZfxj4fvyc3ew9NQNLD5%2bDfMOx6PAUC1itlHs4j9CCglyA7ss24WS3Ifzj8d5AQV2pzm7PC%2bVmVrPExqtTfD0s%2bP59jzHWYTKT2tTk5Ch8tkuZ1vSt6viVR2BJjJMTU3FkydPkJZ2Fw8fPsSD%2b/eRkpKCjPR0aLVa5OXRRURjPGc21zsctTY24sGDB8IuKzMTuTk5yM3NxXN/8r71JhMePXok1uR9HlHLclpaGoxGo5Nus6nUr66uwu3bt4V%2bIfnH/mZrNLh965aI4%2b7du3j8%2bDFMtIfrOsoaXmo2DAYD8vPzUVRUJD4zpaWlKCsrh6GyEjU1NSgrL0dRcbGYN9ORUexsxG51dTX0ej30ZFdFMtvY5Sqxy9lSZAWCPMo%2b21bQ3mxbSXbclpSUosFiaa4oF3v%2bNVqtwrZYp0OtsU74zH32U6stRDm1xeSvuaHZV7W93fUIKJXARLCxQkJVVZWQ2Tke19GGvJGrrbXJhtJnFhiMFuhrLCiqrBMof1aPsup6FD81wWSxOjmj/BoardDXWqCrMqOIYKizouyZWdiwvb7GDK2hDk%2bNDW62pgbWbUBlXSMMtEYJyXa3grN7lJ0qgGElVsvKykTgXPZchpxhHmewzFDbiZbGao0m5OmNyCdoDUbhfHGlNMZE6KhfUCHJJVUmyqDNUZpMQF55LbJLa1BokHT1RACT2kBVItrGJlFJ6n1ttiZU1ZB%2bVT3Z1AmSeP1SWp9bPZHH6%2bXTvuo9HUfANRtms9mRZSbBQJnXlZZRMLRQJS9qEuXofHkqJdkkAsylQHRVJtWF6JwxDoIDUtvX1TeIKmFnmThuuc8kaCskwjj7PNbY5ByEmYhh/VKaKyUiFP9s8oXH%2b/N%2brhegRwKUDCsZZzRSdnhTAaviuPt5amiwCOeZeQ1lUil9Ll8Gz3E1PDNZ3I6BhchjcksoAK4aJrFY6ZNdDvXzZXItShbFGjbU1NUL2wI5y0oFMbjPPkhVV%2b9%2bBFo6J7/0czsC1JrqzeSEVILsaGZJjcgIO8alyWPsqNOxk4%2bA0STZMgor6xzBssyZ5KAZzQlQV4BVEK7cD5wooUutVZatcgJdiXerALvLTd0SPNnx8SlUsidnjctXKU%2b%2bG7gCquoszVUk2xrpJaroVtY2eLwoXROgfr9wBdleIIGu63nhJX9OnzRimAPgbCjnloPmMQ68go6BkhXX6qmjCsgrNzpIUO4BrgAe4%2bx6IsXu4Y3wQomT9f8HLm0TvO1nypkAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"1568\" alt=\"The final .NET Core application\" data-srcset=\"/assets/static/dokku-setup-2.82a2fbd.3971967e5991399b9496abe390e0dcd4.png 480w, /assets/static/dokku-setup-2.cbab2cf.3971967e5991399b9496abe390e0dcd4.png 1024w, /assets/static/dokku-setup-2.48e2b0d.3971967e5991399b9496abe390e0dcd4.png 1568w\" data-sizes=\"(max-width: 1568px) 100vw, 1568px\" data-src=\"/assets/static/dokku-setup-2.48e2b0d.3971967e5991399b9496abe390e0dcd4.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/dokku-setup-2.48e2b0d.3971967e5991399b9496abe390e0dcd4.png\" width=\"1568\" alt=\"The final .NET Core application\"></noscript></p>\n<h3 id=\"edit-special-shout-out-to-rdotnet-for-upvoting-this-article-to-sit-top-of-the-sub-reddit-for-a-day\"><a href=\"#edit-special-shout-out-to-rdotnet-for-upvoting-this-article-to-sit-top-of-the-sub-reddit-for-a-day\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Edit: Special shout out to <a href=\"http://reddit.com/r/dotnet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">/r/dotnet</a> for upvoting this article to sit top of the sub-reddit for a day!</h3>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 831 84' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-15960a15056a76553df5974b00384ee1'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-15960a15056a76553df5974b00384ee1)' width='831' height='84' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAGCAYAAABzaJivAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAC5klEQVQ4y71Uu27UQBTNH4DEF0BLSQMUlBFpEFU6CmqQEEUkCoQikZqGjpqKmgYQDUUqiigFIZtNbK/f79faHttrH87YSxIIBCEhRrqaO%2bc%2bZu6ZubMyLwVED1R1DdG0aAG0XY9uOTdURNvR1qDtO2ILNIvF8Vy37TAvaPuuj7Z2mNt%2bue5OYkZZ2k/lO17/hJ%2b2yz1O8rRjfu4tdXn%2bpqUPZynyzLKuqm7OiKDkZYWVusyAL2%2bBjklECWeyA9fUoEyncG0Dob6HNvchygUcLUTgpkjCHJGfIQ3nqHKBmLqhBEiDOeIgQ%2bxlyKICoZMitFJEdkosh2/GAx65GYqsgmdE8GYRIvoH9A2smHtz7Yz%2bMr%2b0jfYEvpGgzKshp7SlQQ5PT%2bDOQmRJiZbklCyqFgI1C29J0nmjJkEroszRH24PQMDCH6xexbP169jeuovXD1cxfbWGbP89GQO0fQvagQNT8TA7cqF%2btXnohKQkXPsoM0FiUhjU5aGNAxfKrkniAlgkSMaFdgKPRfqMs4jbxANi%2bzs64zz6%2bCwowoyxHgmzSbrNAtWJBVsNEXIv48CDumcTj2AdBdAnDhwjRlEU8DwfcRQhSVIUJEOOvu/PiBzyFayIeQIYOwOgzzTcvHwJmzcu4uO9K9i4dgHPb1%2bEt/sOMiQIfCbmDVHSLMV8niNOYiRRiDzP4Ad8BSlvKq1w6NeYBjVM3oyoKyhRg4lXYRrWQ5v9r/Gr4n8goKwqaLPZABiGicfra3iz9Qgvnm7g5eYT3L9zC58/fWCP067rcBwHlmlCp69t2Sw4g6Yo8HwfIQmQuRJiqqbD9sLhRhRVhe0GiOIEh4rKm5rDdfmCNPrG8UCebVswl3nlTZ53%2bL%2bR35FyTEDFfsmzDItFNxhk/2RFNXwefddi0Qh08pOTnw57Rsj%2bokjipD72XTn23FKXvVeLCg2xpqlP2fkBVWOvyrkoyiHnybrgsy2Hvf5F8X8iRvBM3wCfErHc9N9G0QAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"831\" alt=\"Thank you Reddit!\" data-srcset=\"/assets/static/redditdokkupost.82a2fbd.4eaee5bd78118461f3677d0347507377.png 480w, /assets/static/redditdokkupost.e8b8700.4eaee5bd78118461f3677d0347507377.png 831w\" data-sizes=\"(max-width: 831px) 100vw, 831px\" data-src=\"/assets/static/redditdokkupost.e8b8700.4eaee5bd78118461f3677d0347507377.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/redditdokkupost.e8b8700.4eaee5bd78118461f3677d0347507377.png\" width=\"831\" alt=\"Thank you Reddit!\"></noscript></p>\n"}},{"node":{"title":"Connection Strings in .NET Core","path":"/blog/2017/connection-strings-in-net-core/","date":"12. March 2017","timeToRead":3,"description":"When you waste an entire hour trying to define a connection string...","content":"<h1 id=\"out-of-date---this-post-is-from-2017-please-see-this-link-for-a-much-better-way-to-do-this-httpsdocsmicrosoftcomen-usaspnetcorefundamentalsconfigurationviewaspnetcore-50\"><a href=\"#out-of-date---this-post-is-from-2017-please-see-this-link-for-a-much-better-way-to-do-this-httpsdocsmicrosoftcomen-usaspnetcorefundamentalsconfigurationviewaspnetcore-50\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OUT OF DATE - This post is from 2017. Please see this link for a much better way to do this: <a href=\"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-5.0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-5.0</a></h1>\n<p>It's true. I wasted an entire hour trying to get my head around how on earth we can define connection strings in .NET Core.</p>\n<p>Traditionally in older .NET Frameworks, you just used to place something along these lines under <code class=\"language-text\">web.config</code>, somewhere in the root of your solution.</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>connectionStrings</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myConnectionString<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">connectionString</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>server=localhost;database=db;<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>connectionStrings</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Unfortunately though, <code class=\"language-text\">web.config</code> is now used differently in .NET Core and we now have a brand new <code class=\"language-text\">appsettings.json</code> where we are now apparently meant to use to specify... you guessed it, our app's settings.</p>\n<p>This apparently has something to do with how the new Entity Framework is configured and makes things more straight forward as once you write your <code class=\"language-text\">JSON</code> containing your connection string, you can then call a simple method in your <code class=\"language-text\">Startup.cs</code> which automatically configures everything for you. However, if like me you aren't using Entity Framework... let's just say, things aren't as straight forward as they used to be.</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"ConnectionData\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"DefaultConnection\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"ConnectionString\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Server=localhost;Database=db;Trusted_Connection=True;\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>We then have to create a <code class=\"language-text\">ConnectionData</code> class, which resembles the <code class=\"language-text\">JSON</code> structure within our <code class=\"language-text\">appsettings.json</code> file. Alongside it, a <code class=\"language-text\">DefaultConnection</code> class too.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConnectionData</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">DefaultConnection</span> DefaultConnection <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DefaultConnection</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> ConnectionString <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Next, we add the following to our <code class=\"language-text\">ConfigureServices(IServiceCollection services)</code> method in our <code class=\"language-text\">Startup.cs</code> file.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Configure</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ConnectionData<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Configuration<span class=\"token punctuation\">.</span><span class=\"token function\">GetSection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ConnectionData\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Finally, we now need to get used to the idea of using Dependency Injection to inject our <code class=\"language-text\">ConnectionData</code> object in to every class that requires access to our connection string. So, let's take a <code class=\"language-text\">RecipeRepository</code> class for example that might use some kind of ORM such as Dapper to talk to your database as an example.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RecipeRepository</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ConnectionData</span> _connectionData<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> _connectionString<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token function\">RecipeRepository</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IOptions<span class=\"token punctuation\">&lt;</span>ConnectionData<span class=\"token punctuation\">></span></span> connectionData<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    _connectionData <span class=\"token operator\">=</span> connectionData<span class=\"token punctuation\">;</span>\n    _connectionString <span class=\"token operator\">=</span> _connectionData<span class=\"token punctuation\">.</span>DefaultConnection<span class=\"token punctuation\">.</span>ConnectionString<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IDbConnection</span> Connection\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqlConnection</span><span class=\"token punctuation\">(</span>_connectionString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Recipe</span> <span class=\"token function\">GetRecipeById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IDbConnection</span> dbConnection <span class=\"token operator\">=</span> Connection<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      dbConnection<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// do things</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>So, due to what we specified in <code class=\"language-text\">Startup.cs</code>, we can now inject an <code class=\"language-text\">IOptions&lt;ConnectionData&gt;</code> object containing our data from <code class=\"language-text\">appsettings.json</code> in to our <code class=\"language-text\">RecipeRepository</code>, which then gives us access to the <code class=\"language-text\">DefaultConnection</code> object it holds and the <code class=\"language-text\">ConnectionString</code> within it. We can then create a new <code class=\"language-text\">SqlConnection</code> using that string and link it up with our ORM. In this case, I've used Dapper.</p>\n<p>Is there a simpler way to do this? I'm not too sure at the moment, but I am yet to find one! Fortunately though, .NET Core is somewhat young and hopefully we might see our old beloved friend <code class=\"language-text\">ConfigurationManager.ConnectionStrings[&quot;myConnectionString&quot;]</code> back again soon... or at least something that gives us access to <code class=\"language-text\">appsettings.json</code> without having to create a bunch of classes and forcing us to inject them in!</p>\n"}},{"node":{"title":"Dependency Injection in .NET Core","path":"/blog/2017/dependency-injection-in-net-core/","date":"11. March 2017","timeToRead":6,"description":"I think it's safe to say that there's a lot of hype around .NET Core nowadays because of it being cross-platform, open source, etc, which isn't really something we've been used to from Microsoft technologies over the years. So as someone who works in a predominantly .NET dominated environment, I wanted to dedicate some time playing around with it, building a simple API & just investigating how different it is to the regular .NET Framework.","content":"<p>I think it's safe to say that there's a lot of hype around .NET Core nowadays because of it being cross-platform, open source, etc, which isn't really something we've been used to from Microsoft technologies over the years. So as someone who works in a predominantly .NET dominated environment, I wanted to dedicate some time playing around with it, building a simple API &#x26; just investigating how different it is to the regular .NET Framework.</p>\n<p>One of the more intriguing perks of .NET Core that sparked my interest was its built in Dependency Injection which I'd assume is a concept most software developers are somewhat acquainted with. If you don't know what Dependency Injection is, it is a way of passing a classes external dependencies without having to instantiate the dependency every single time an instance of the base class is used. It has many useful uses, but one of my favourite is probably the fact that it makes mocking &#x26; testing classes a lot easier as well as helps overall with decoupling.</p>\n<p>Here's a quick example scenario, which should hopefully explain this:</p>\n<ul>\n<li>Imagine we have a <code class=\"language-text\">UserService</code> class, containing logic related to Users and a <code class=\"language-text\">UserRepository</code> class that talks to a database.</li>\n<li>A level above that, we also have a <code class=\"language-text\">UserController</code> class, which in an API project for example could contain methods that are mapped to <code class=\"language-text\">GET</code> or <code class=\"language-text\">POST</code> routes which could then allow your Angular, React or Vue front-end to call them or pass data to them to be executed.</li>\n<li>If a user is attempting to log in via our API, they will first hit a route defined within our <code class=\"language-text\">UserController</code> which would then require the <code class=\"language-text\">UserService</code> to work its magic and talk to a database somewhere via the <code class=\"language-text\">UserRepository</code>, compare password hashes &#x26; eventually return whether or not the user has indeed successfully managed to login successfully or not.</li>\n<li>Given that our <code class=\"language-text\">UserService</code> talks to a separate class which is the <code class=\"language-text\">UserRepository</code>, you'd probably normally do something like this simplified example:</li>\n</ul>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">UserRepository</span> repository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">UserService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        repository <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UserRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">User</span> <span class=\"token function\">Login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> password<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> repository<span class=\"token punctuation\">.</span><span class=\"token function\">GetUser</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>So let's say we now decide that we want to write some unit tests around our <code class=\"language-text\">UserService</code> but because of the nature of tests, we don't actually want our tests to force the <code class=\"language-text\">UserRepository</code> to talk to or play around with the database in any way shape or form. For logging in, this scenario isn't too bad. But imagine you're testing registering a new user... what do you want to do, create a new user object in the database every time you run your unit tests? This would cause chaos!</li>\n<li>A suitable solution would be to obviously mock out our <code class=\"language-text\">UserRepository</code>, so that when we Unit Test the <code class=\"language-text\">UserService</code>, we use a mocked out <code class=\"language-text\">UserRepository</code> where we can define what it should return when we pretend to call the <code class=\"language-text\">GetUser()</code> method and allow us to test our <code class=\"language-text\">UserService</code> in isolation. But we don't really want to mock out the <code class=\"language-text\">UserRepository</code> within the <code class=\"language-text\">UserService</code>code because then we're modifying our production code... this is where Dependency Injection becomes your best friend.</li>\n</ul>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">IUserRepository</span> _repository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> UserService <span class=\"token punctuation\">(</span><span class=\"token class-name\">IUserRepository</span> repository<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _repository <span class=\"token operator\">=</span> repository<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">User</span> <span class=\"token function\">Login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> password<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> _repository<span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>We have now applied Dependency Injection to our <code class=\"language-text\">UserService</code> class. Instead of instantiating our <code class=\"language-text\">UserRepository</code> within the constructor of our <code class=\"language-text\">UserService</code>, we've declared an interface of it at the top of the class and assigned it to the dependency passed in via the constructor parameters and due to the magic of dependency injection, regardless of whether you're using a framework like Spring, the built in .NET Core dependency injection or something like Castle Windsor to handle it for you, every time the <code class=\"language-text\">UserService</code> is being used, it will always have access to a usable instance of the <code class=\"language-text\">UserRepository</code> and the functions inside.</li>\n</ul>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GivenUserService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ThisIsATerribleTestLol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">User</span> exampleUser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">User</span> <span class=\"token punctuation\">{</span>\n        userid <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        username <span class=\"token operator\">=</span> <span class=\"token string\">\"Bill Gates\"</span><span class=\"token punctuation\">,</span>\n        password <span class=\"token operator\">=</span> <span class=\"token string\">\"somehashedstuff\"</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Arrange</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> repository <span class=\"token operator\">=</span> Substitute<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">For</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IUserRepository<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">UserService</span> userService <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UserService</span><span class=\"token punctuation\">(</span>repository<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Act</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> loggedUser <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">Login</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bill Gates\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"somehashedstuff\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Returns</span><span class=\"token punctuation\">(</span>exampleUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Assert</span>\n        Assert<span class=\"token punctuation\">.</span><span class=\"token function\">That</span><span class=\"token punctuation\">(</span>exampleUser<span class=\"token punctuation\">,</span> Is<span class=\"token punctuation\">.</span><span class=\"token function\">EqualTo</span><span class=\"token punctuation\">(</span>loggedUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>Within our tests, we can use a mocking framework to mock out the <code class=\"language-text\">UserRepository</code> based on an interface of the <code class=\"language-text\">UserRepository</code>, called <code class=\"language-text\">IUserRepository</code>. This now means that our mocking framework within our unit tests will now be able to mock out an <code class=\"language-text\">IUserRepository</code> and pass it to our <code class=\"language-text\">UserService</code>'s constructor when testing it. Allowing the <code class=\"language-text\">UserService</code> to run and thus be tested in isolation without actually hitting the database through the real <code class=\"language-text\">UserRepository</code>.</li>\n<li>Now, not only is our production code looking much better with reduced coupling, but we can also test our code in a much easier, more isolated fashion.</li>\n<li>The above test doesn't really test anything as it is just to showcase how the use of Dependency Injection makes life easier for us in terms of testing. In a real scenario, the <code class=\"language-text\">UserService</code> would more than likely contain more logic within the <code class=\"language-text\">Login()</code> method we are testing against.</li>\n</ul>\n<p>Back on topic, normally we tend to use Castle Windsor to handle Dependency Injection at work because of the perks that come with it being a full fledged IoC container. But what intrigued me about .NET Core's built in Dependency Injection was the claim that it was packaged with the framework. Whilst in older versions you would have to manually set up and configure the Dependency Injection yourself - which nowadays just means wasting time with the number of packages out there that do it for you - it apparently could be done in .NET Core with a few lines the same way something like Castle Windsor allows you to do once set up.</p>\n<p>So, to do this all you have to do is simply navigate to your .NET Core project's <code class=\"language-text\">Startup.cs</code> file and add the following under the <code class=\"language-text\">ConfigureServices(IServiceCollection services)</code> method:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  services<span class=\"token punctuation\">.</span><span class=\"token function\">AddMvc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">RabbitRepository</span> _rabbitRepository <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RabbitRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddTransient</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IUserRepository<span class=\"token punctuation\">,</span> UserRepository<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddScoped</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IDogRepository<span class=\"token punctuation\">,</span> DogRepository<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ICatRepository<span class=\"token punctuation\">,</span> CatRepository<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddInstance</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IRabbitRepository<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>_rabbitRepository<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The <code class=\"language-text\">AddTransient()</code> method creates a brand new instance of the <code class=\"language-text\">UserRepository()</code> each and every single time it is requested, even if requested within the same scope, these are great for stateless APIs. This means every time any kind of Service within a project uses a <code class=\"language-text\">UserRepository</code>, it will have a brand new Repository injected to use.</p>\n<p>The <code class=\"language-text\">AddScoped()</code> method creates a new instance of the <code class=\"language-text\">DogRepository</code> each time it is requested within different scopes. This means every Service within a project that uses a <code class=\"language-text\">DogRepository</code>, will have its own single <code class=\"language-text\">DogRepository</code> to keep re-using.</p>\n<p>The <code class=\"language-text\">AddSingleton()</code> method creates a new instance of the <code class=\"language-text\">CatRepository</code> once and shares the same instance across all different scopes within the application. This means every Service within a project that uses a <code class=\"language-text\">CatRepository</code>, will be injected with and use the same single <code class=\"language-text\">CatRepository</code> object.</p>\n<p>The <code class=\"language-text\">AddInstance()</code> method passes a specific instance of an <code class=\"language-text\">IRabbitRepository</code> type object as parameter, meaning each and every time it is requested regardless of scope, that specific <code class=\"language-text\">RabbitService</code> instance that was manually instantiated in the code above, will always be used and shared rather than let the Dependency Injection itself instantiate the object.</p>\n<p>And now... breathe! That's it. You have now set up the built in Dependency Injection within .NET Core in your project! Every time you require a dependency, simply register it however you like within your Startup.cs file and then just pop the interface in your constructor as shown above!</p>\n"}}]}}},"context":{}}