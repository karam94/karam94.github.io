{"hash":"609c449f7566d67d3cb4d8fe84a7a2641ad0f6e8","data":{"tag":{"title":"Miscellaneous","belongsTo":{"edges":[{"node":{"title":"A common enemy to software developers.","path":"/blog/2020/a-common-enemy-to-software-developers/","date":"6. June 2020","timeToRead":10,"description":"Fear of missing out & imposter syndrome are two serious problems that many software developers have to deal with. Trust me, you're not alone... & trust me, you're also fantastic at what you do, regardless what you might think.","content":"<p>The Jets, a British band from the early '80s once wrote a song saying that \"love makes the world go round\".</p>\n<p>Fourty years later, we find ourselves in the middle of a global pandemic and I am here to challenge the status quo by putting my neck on the line with yet another slightly controversial statement.</p>\n<p>Software, also makes the world go round.</p>\n<p>Think about it,\nit makes the clock tick in your iPhone,\nthe television you watch Netflix on every evening runs software.\nNetflix themselves would seize to exist without their behemoth of a software engineering team.\nAll the online shopping on Amazon that you have been doing to get things delivered to your doorstep because you have to isolate &#x26; can't leave your house due to COVID-19, needs software, software is everywhere. Even in the vehicle of the Amazon delivery driver who brought your order!</p>\n<p>As software developers, we do some complex stuff and in order to do it, we must surely be relatively smart people... right?\nEven those of us who do not know how to invert a binary tree off the top of our heads... (tongue in cheek)</p>\n<p>and that my friends, is part of the problem.</p>\n<p>We are living in an era of digital transformation and technology is booming.</p>\n<p>This unfortunately though, can have a knock-on effect to us, the developers.</p>\n<p>Developing a website for example, used to be simple and simple was the norm. There were only so many ways of doing things. After all, I made my first one over a decade ago.</p>\n<p>I had no idea what I was doing, I was a care-free 13-year-old, yahoo searching things &#x26; typing random HTML and CSS into Microsoft FrontPage (before joining the cool kids in Dreamweaver land, of course). Sure, the end result was an abomination of tabled nonsense, but it worked.</p>\n<p>Still to this day, I make jokes to colleagues about how I still recall being a 15-year-old, hacking away at PHP files in my bedroom, then drag and dropping them in to FileZilla to upload them via FTP (straight to production, of course) and hoping for the best.</p>\n<p>I don't mean to say that software development in the past wasn't complex nor that it didn't come with its own wide array of completely different (and often extremely complicated) problems like some of those which we face today (my Dad still tells me stories of punch cards and a client recently spoke to me about back when they used to use FORTRAN with mainframes).</p>\n<p>Software development comes in different shapes and sizes and has evolved over the years. So I don't want to compare what is most prominent amongst most of today's developers, to FORTRAN running on IBM mainframes prior to the internet. Rather I'm trying to paint a relatable comparison for most of my generation (or the next) of software developers who are reading this, that they can relate to. The generation who grew up idoling the magic of the internet &#x26; can recall how simple building static websites were during its infancy, when they first started writing code or building websites during their own development infancy.</p>\n<p>The point is that the number of things such as software libraries, languages, architectures, paradigms and many more things has shown to be directly proportionate to the growth of technology. Back then, things were just... a bit simpler &#x26; less overwhelming. There were less trade-offs. There were less options. There were only so many ways to solve the same problem.</p>\n<p>Picture this.</p>\n<p>You're new to the game and you've only just about managed to wrap your head around <a href=\"https://en.wikipedia.org/wiki/SQL\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SQL</a>. You think you know SQL, you're now confident writing joins and reading some slightly large stored procedures, but realise you've actually only scratched the surface of it. For example, do you know the difference between a culstered index and a non-clustered index? Of course you don't and probably won't even need to know this level of detail to fulfill your role. But you're a perfectionist so you think you have even more to learn... when does it end?</p>\n<p>However, before you even have time to breathe, you watch a quick YouTube video at a conference about why <a href=\"https://www.mongodb.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MongoDB</a> is amazing and why using Mongoose is easier than having to write out SQL queries manually...</p>\n<p>Stress. Levels. Increasing.</p>\n<p>Overwhelmed.</p>\n<p>Half way through your new journey on trying to become an expert with MongoDB, you catch someone else boast about how much better <a href=\"https://aws.amazon.com/dynamodb/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">DynamoDB</a> is. So you decide to read up on it and add it to your ever growing \"to learn\" list... but it burns every time you see someone else post something about it and you start getting FOMO.</p>\n<p>FOMO (Fear of missing out) - anxiety that an exciting or interesting event may currently be happening elsewhere, often aroused by posts seen on social media.</p>\n<p>Six months later, there is a new <a href=\"https://graphql.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphQL</a> kid on the block. But you have not even found the time to try DynamoDB out yet.</p>\n<p>Wait what? <a href=\"https://aws.amazon.com/rds/aurora/serverless/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Aurora</a> gives you serverless databases on demand?</p>\n<p><a href=\"https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Blazor</a> has finally been released so you can build front ends in C# using <a href=\"https://webassembly.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WASM</a>?</p>\n<p>Wait. <a href=\"https://redux-toolkit.js.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redux toolkit</a> is going to make the abomination that is <a href=\"https://redux.js.org/introduction/getting-started\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redux</a>, easier to read?!</p>\n<p><a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NextJS</a> this, <a href=\"https://nuxtjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NuxtJS</a> that...</p>\n<p>Facebook have released a brand new state management library in <a href=\"https://recoiljs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RecoilJS</a>?</p>\n<p>SO. MUCH. STUFF. TO. LEARN.</p>\n<p>You start to feel like all the developers of the world around you are working with and learning state of the art cool stuff. Yet you're still stuck writing PHP, without any intellisense because of how old your codebase is, day in, day out to get a pay cheque in order to eventually spend it on a brand new laptop or state of the art computer, so you can try all these new technologies out on in the evenings &#x26; weekends!</p>\n<p>Oh, wait. You do exactly that but then are too tired in the evenings &#x26; weekends... then you get stuck in a cycle. You start to feel anxious. Are you even any good at your job? You do not know any of the fancy new libraries like <a href=\"https://svelte.dev/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Svelte</a>? You have not tried <a href=\"https://fauna.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FaunaDB</a> yet? What do you mean you have not built a blog with <a href=\"https://www.gatsbyjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gatsby</a> yet?</p>\n<p>How dare you have a family who take priority in your life?!</p>\n<p>Are you even a software developer anymore? Sounds like the whole world around you, knows more than you do. Maybe you are just not good enough. Maybe you are just getting old and cannot keep up anymore?</p>\n<p>Welcome, to both, fear of missing out and imposter syndrome.</p>\n<p>Impostor syndrome - a psychological pattern in which one doubts one's accomplishments and has a persistent internalized fear of being exposed as a \"fraud\".</p>\n<p>Mental health is serious and whilst there are software developers who do not suffer from this... I do and I know at least another 8 developers who do. Which is quite a large proportion of developers I'm actually comfortable enough with on a personal level to discuss this with in the first place. Some of whom are literally at the start of their careers as well and have little to no expectation of pressure on their shoulders. This can't be good.</p>\n<p><a href=\"https://www.youtube.com/watch?v=if5YLYRIcc8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Carolina Gilabert</a> gave an interesting 8-minute-long lightning talk about \"impostor\" (French spelling, apparently) syndrome and a question that really stood out to me was:</p>\n<p>\"If you are indeed a fraud, how are you managing to fool all the smart people around you?\"</p>\n<p>Here is a hint, you are not fooling anybody. You're pretty 'effing awesome at what you do.</p>\n<p>There are hundreds of articles, blog posts, reddit posts, conference talks about imposter syndrome in software development on the internet. It is a serious problem.\nYou might not experience it, but someone around you might and as with all anxieties, some affect people more than others and some people make it more visible that they are suffering than others.</p>\n<p>You know how people go on Instagram and get drawn in to photoshopped photos of people and their fake lives? It is a similar thing.</p>\n<p>Most of us work on smelly, old codebases using older technologies... and that's just fine.</p>\n<p>Do you want to know why it's fine? Because Software Development is built on paradigms. You don't need to know the nitty gritty details of absolutely everything and every brand new library, off the top of your head.</p>\n<figure>\n    <img src=\"https://images.unsplash.com/photo-1568236700632-c0cfc08f486a?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1074&q=80\" \n    style=\"width: 100%; display: block; margin-left: auto; margin-right: auto;\"/>\n</figure>\n<p>Picture it like this. You're a car mechanic. You've been working on Peugeot's &#x26; Citroen's for most of the first few years of your career. Suddenly, you get a promotion and now have to work on Japanese cars too, Honda's, Toyota's &#x26; so on.</p>\n<p>You're nervous at the start. You're out of your comfort zone. For your first couple of jobs, you have to refer back to the manual. No doubt, the underlying workings of the Japanese cars will have differences which are new and unfamiliar to you. However, the fundamentals, the paradigms are the same. They're both cars at the end of the day.</p>\n<p>SQL and GraphQL both let you query/mutate a database. They both hook up differently, but most of it is boilerplate that is available via documentation. You don't need to have used GraphQL, to know GraphQL.</p>\n<p>C# and <a href=\"https://kotlinlang.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Kotlin</a> both let you feed a computer instructions, built on the same fundamental paradigms of loops and conditional statements. You don't need to have built anything in Kotlin, to know Kotlin.</p>\n<p><a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React</a> and <a href=\"https://vuejs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue</a> are both JavaScript component-based frameworks. Concepts such as components, props, lifecycle hooks &#x26; so forth are the fundamentals they are both built upon. If you know one, you can easily transition in to the other.</p>\n<p>Do you see where I'm going with this? Nothing is rocket science, nothing is impossible. But at the same time, nobody said our jobs were going to be easy, within limits. We're supposed to like a challenge as software developers, aren't we?</p>\n<p>Everyone you see who is talking about something new and shiny, has just ticked something off their own \"to learn\" list. They still have a trillion other things, like you, they want to get through too and believe it or not, even though they probably know this new shiny thing... you also know stuff they most likely don't. But hang on a second, why does it even matter? Why are you comparing yourself to someone else in the first place?</p>\n<p>When you drown yourself in lots of these types of people all at once, that is when you stop realising they are not the same people.\nRather you start seeing, THIS IS COOL LEARN THIS, THIS IS NEW DO THIS, SHINY THIS, SPARKLY THAT.</p>\n<p>Stop comparing yourself not only to other individuals... but your own knowledge to the combined knowledge of numerous other individuals! You only have one brain!</p>\n<p>You cannot learn everything at once. You do not need to know everything.\nIf you must suddenly deal with something you do not know, then you learn it on the job.\nAfter all, isn't that how we fundamentally all became software developers in the first place? Think about it.</p>\n<p>If a framework or new fad is suddenly being described as the next best thing sinced sliced bread by people (admit it, you are thinking of <a href=\"https://deno.land/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Deno</a>) and it feels like a lot of people suddenly know it and you don't...\nthen it is probably straight forward and easy to pick up whenever you need it, anyways! Believe in yourself!</p>\n<p>So, what is the conclusion I want to make with this post?\nIf you suspect someone you know is struggling with it, help them out.\nIf you yourself struggle with it, speak out about it. This also is not just a software developer thing.</p>\n<p>An example of a simple cure for this that I've witnessed is simply buying a coffee for that person, having a chat with them and thanking them for everything they do and their contributions. The imposter syndrome stems from people making themselves feel like they are inadequate within their own heads. But once they start to feel valued and encouraged, it can be quickly defeated.</p>\n<p>I've suffered from this, some of the best software developers I know have suffered from it, I've mentored developers who suffer from it and most of us will probably continue to suffer from it.</p>\n<p>Some of us manage to overcome it in the long run and some of us don't. Which is why we all need to work together to look out for it and work together to try and tame it.</p>\n<p>Working remotely during this pandemic has also led to people feeling more isolated that could make the symptoms of this worse. Catch up with your colleagues over a zoom call, have a morning or afternoon coffee/catch-up. Give each other remote pats on the back if and when you have met your sprint goals.</p>\n<p>We all became software developers in the first place, because we love doing what we do. As long as you are enjoying what you are doing and still getting that dopamine \"buzz\" every time you solve a problem or fix a bug, that's all that matters.</p>\n<p>I am about a fortnight late from <a href=\"https://www.mentalhealth.org.uk/campaigns/mental-health-awareness-week\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mental Health Awareness Week 2020</a>, but this is finally done &#x26; off my chest. I've written this because it's not only something that I myself can come back to, but also hopefully something that I can refer others to for a quick read, whenever they're getting bouts of this themselves.</p>\n<p>We're all in this together, so from one developer to another... stay awesome and thanks for reading!</p>\n"}},{"node":{"title":"Tips for learning a new code base.","path":"/blog/2020/tips-for-learning-a-new-code-base/","date":"18. May 2020","timeToRead":6,"description":"Need to quickly learn a new code base or upskill in some technologies? Here are my tips.","content":"<p>I don't usually talk much about my adventures within the professional world of software development on this blog, but I feel like an article about this topic is far too relevant to just about everyone, not to write about.</p>\n<p>As you can probably tell from the title, it's about familiarising yourselves with new code bases and unsurprisingly, this situation usually comes to those who have recently changed teams or jobs.</p>\n<p>I changed jobs roughly 6 months ago and my new role is within a consultancy, therefore as you can imagine, not only are you required to become familiar with codebases (and sometimes new technologies) relatively often as you swap between new clients, but you also have to be prepared in accomplishing to do so within a relatively quick amount of time becuase you're expected to a certain extent, to hit the ground running.</p>\n<h2 id=\"learning-a-new-code-base\"><a href=\"#learning-a-new-code-base\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Learning a new code base:</h2>\n<p><strong>Tip #1 - Know your boundaries:</strong></p>\n<p>You aren't going to learn everything overnight. Understand from your colleagues exactly what services, APIs &#x26; bananas you need to know about and concern yourself with. Find out which of those you will actually be working within and which of those you have only been told about only because you may need to communicate with them. Your aim should be to reduce the scope of what you need to learn as much as possible.</p>\n<p>Businesses tend to have tens of different solutions, but domain aligned teams or projects only tend to touch a sub-set of them. This can also help you mentally if you feel overwhelmed as those 90 solutions you were worried about needing to learn, have suddenly become only 10.</p>\n<p><strong>Tip #2 - Understand the context &#x26; architecture:</strong></p>\n<p>Before you start to worry about the micro-architecture of applications (which refers to the structure of the code bases), you first need to understand the context and purpose of these different services, including how and why they communicate with each other. Why do they exist in the first place? What value are they bringing to the table? Why are they the ones you need to work on within your particular team/role?</p>\n<p>I recommend the C4 Model as a fantastic way to draw a high level architectural diagram for this kind of thing. You can also use it to diagram the internals of an application once you get past this point. This will leave you with diagrams of both the macro and micro-architecture of what you need to learn about.</p>\n<p><strong>Tip #3 - Ask questions:</strong></p>\n<p>The only stupid question, is not asking any questions.</p>\n<p>If you can't think of any questions, ask about the coding conventions/standards. If there aren't any, then it's a good chance for you to make an instant impact.</p>\n<p><strong>Tip #4 - Read the documentation, tests are part of the documentation process:</strong></p>\n<p>Some places will have long winded documentation for software (that is most likely out of date) whilst others won't. What all places however should have within a code base though is relatively decent test coverage, which is the best kind of documentation as it inevitably evolves and updates with the codebase... one would hope!</p>\n<p>Look at the different test files, focus on a small subset of them and work your way inwards. At this point you won't learn too many implementation details but you should be seeing references to functions or classes referred to in these tests, navigate in to them to gain a rough understanding of what methods also exist within the codebase in terms of the file structure. This gives you an idea of what use cases are fulfilled by the software, as they are what are under test.</p>\n<p><strong>Tip #5 - Read the code:</strong></p>\n<p>You now understand why all the different services exist, you understand how they all communicate and you understand roughly what classes or files exist inside a particular code base. Now it's time to understand the implementation details.</p>\n<p>As you did in tip #4, start with the tests. Work your way inwards, but this time pay attention to the specifics of what makes these tests pass, which is the implementation detail.</p>\n<p>This is great because rather than focusing on learning a huge codebase all at once, you focus on learning the implementation details of a method. Then that method becomes learning the implementation details of the other methods in the same class, until you've seen and read it all.</p>\n<p>Rinse and repeat this process. Tackle the codebase like you would a jigsaw, complete one corner, then the other and eventually it will all come together. Those of you who are more experienced, may also spot refactoring opportunities as a pair of fresh eyes, take a note of these.</p>\n<p>Divide and conquer.</p>\n<p><strong>Tip #6 - Look at past commits/pull requests:</strong></p>\n<p>Did a feature being implemented by your colleague mentioned during your daily scrum sound interesting? Look at how they implemented it, what do you think? Look where they placed certain bits of logic and their overall approach. If you are unsure about anything, ask.</p>\n<p>Were there any PR comments about the implementation from other colleagues which may contain hidden gems of things you should know about to do with the codebase? If not the codebase, then the conventions used within it?</p>\n<p><strong>Tip #7 - Pair programming:</strong></p>\n<p>Obviously, working with a developer who is more familiar with a codebase or even potentially more experienced than you, will help you and significantly speed you up at the start of your new journey. However I believe there is another benefit than just purely technical and what you usually get in terms of benefits of pair programming.</p>\n<p>We can all read code and eventually understand it, but the code doesn't always tell the full story of a piece of software. Some of your colleagues may have been amongst the original authors of a codebase or regular contributors. Whilst you pair, they may provide extra insight in to decisions that were made months ago, relevant to the work you're currently implementing. These decisions could be the use of certain libraries or opting to use a certain design pattern for example.</p>\n<p><strong>Tip #8 - Break the code:</strong></p>\n<p>As you're learning a codebase, you most likely have it pulled down on to your machine by now.</p>\n<p>Try to implement a feature on the backlog for next sprint, this way you don't have the pressure of a looming deadline to meet, or just try to change or refactor the existing code around and see what happens.</p>\n<p>Note that I'm not saying you should actively seek to do work... outside of work. You can come up with your own use case/user story if you wish instead of picking something up off the backlog for next sprint.</p>\n<p><strong>Tip #9 - Take notes:</strong></p>\n<p>I use the notes app on my Macbook as it allows me to copy and paste code snippets to refer back to, however there's also nothing wrong with a good old fashioned notepad and pen. Chances are, if you've written something down, others will probably want it documented too. This brings us nicely to our final tip...</p>\n<p><strong>Tip #10 - Reflect back on yourself:</strong></p>\n<p>What else did you struggle with during the onboarding/codebase learning process? Do something about it and make the next new developers onboarding experience better than yours.</p>\n<h2 id=\"learning-new-technologies\"><a href=\"#learning-new-technologies\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Learning new technologies:</h2>\n<p><strong>Tip #1 - Online courses:</strong></p>\n<p>Consider a Pluralsight subscription, a Udemy course or a simple search on YouTube.</p>\n<p>Dedicate a day or two towards learning the basics. Remember that you don't need to be an expert and that as a new developer, you ARE expected to learn on the job.</p>\n<p>Aim to know the basics and the rest will come with time and through applying what you already know from other technologies.</p>\n<p><strong>Tip #2 - Cheat sheets:</strong></p>\n<p>Write your own cheat sheets for each technology that you can refer back to. I like to just create a bunch of private repositories on my GitHub and write the cheat sheets using markdown in the <code class=\"language-text\">README.md</code> files.</p>\n<p>Different people will want different things out of their cheat sheets. We all think slightly differently and as a result may prefer different formats of things to refer back to when we are stuck.</p>\n<p>I end up writing cheat sheets that encapsulate a load of snippets of doing basic things. An example of this could be what a simple snippet of a functional React component looks like that deals with a simple use case such as with an onClick handler.</p>\n<p><strong>Tip #3 - Build something:</strong></p>\n<p>...without using a tutorial in your own time. Do not fall in to tutorial purgatory and keep it simple.</p>\n<p>In conclusion, these are the tips I'd have given myself 6 months ago. Are there any tips you think I may have missed out? Let me (and all the other developers who will come across this post) know in the comments below.</p>\n<p>Thanks for reading!</p>\n"}},{"node":{"title":"Updating your .gitignore","path":"/blog/2019/updating-your-gitignore/","date":"28. April 2019","timeToRead":1,"description":"When you forget to add a .gitignore to your project...","content":"<p>Be honest, you've been there. I know I have.</p>\n<p>You've started a new project, decided to use Git for your source control and then later down the line realise that you forgot to kick off your repository with a .gitignore file and now when you try to add one, files that should be ignored are still within your repository!</p>\n<p>In fact, the whole reason why I'm writing this is because I make this mistake so darn often when developing at home, I can now refer back to this post every time I do than waste minutes googling the solution every time.</p>\n<p>So, how can we go about solving this?</p>\n<p>First of all, we need to basically remove all the files from our repository. This way we can commit them back in but allow our .gitignore to come in to play when deciding what we should be re-adding to our repository.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># IMPORTANT: Do not ignore the \".\" at the end of this command! Run it in the root of your repository to remove all filles.</span>\n<span class=\"token function\">git</span> <span class=\"token function\">rm</span> -r --cached <span class=\"token builtin class-name\">.</span></code></pre>\n<p>At this point you can either re-add all of your files with your new .gitignore having kicked in using whatever source control software you have installed... or just do it the good ol' fashioned way:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> -A</code></pre>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> commit -a -m <span class=\"token string\">\"Your message here\"</span></code></pre>\n<p>Enjoy!</p>\n"}},{"node":{"title":"Data Visualisation, The Dark Web and Lightning Talks... Interested?","path":"/blog/2019/data-visualisation-the-dark-web-and-lightning-talks-interested/","date":"14. March 2019","timeToRead":2,"description":"Does this title incite you? Well, I have the solution on Tuesday March 19th!","content":"<p><img src=\"https://secure.meetupstatic.com/photos/event/c/4/a/7/highres_479390343.jpeg\"></p>\n<h2 id=\"intrigued\"><a href=\"#intrigued\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Intrigued?</h2>\n<p>Tuesday 19th March 2019 marks the first (of what hopefully will become many) <a href=\"https://www.meetup.com/North-West-Tech-Talks/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">\"North West Tech Talk\"</a> events, hosted at our awesome new offices at work at <a href=\"https://www.ao.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AO.com</a> (if you see a desk with loads of red noses on top of the main monitor in a corner somewhere, you've found my battlefield) in wet &#x26; windy Bolton (but don't let that put you off, we do have a roof).</p>\n<p>You can find more information about the event, as well as sign up for it <a href=\"https://www.meetup.com/North-West-Tech-Talks/events/259526281/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p>\n<p>As you can make out from the title, the main two talks will be:</p>\n<ul>\n<li><strong>Data Visualisation</strong>: Best Practices, do's and don'ts by Johnny Winter</li>\n<li><strong>Peeling back the onion</strong>: A look at Tor and the Dark Web by Ben Sloan (Disclaimer: No onions will be hurt in the making of this tech talk.)</li>\n</ul>\n<p>After a break for food (probably pizza?!) they will then be followed by a couple of lightning talks:</p>\n<ul>\n<li><strong>Don't make me think!</strong> by Gavin Sayer</li>\n<li><strong>Knowledge++</strong> by Karam Kabbara (Hint: 🙋‍♂️)</li>\n<li><strong>Risk in Development</strong> by Gareth Lowe</li>\n</ul>\n<h2 id=\"knowledge\"><a href=\"#knowledge\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Knowledge++?</h2>\n<p>My talk is a lightning talk, so hopefully it shouldn't take longer than a couple of minutes! I basically plan to go on a bit of a rant about how as people in tech and software developers in particular, we often take our \"circle of life\" for granted and as a result, we should all be aiming to give back more if not to the wider community, then at least our very own colleagues.</p>\n<p>I then go on to acknowledge some of the issues that hold people back regarding knowledge sharing such as a fear of public speaking and look at alternative people can still impact those around them.</p>\n<p>Conclusively, the point that I steer towards is that if we all put a little bit of extra effort in and do our little bit of knowledge sharing (because what goes around comes around, right?) in whatever way makes us more comfortable, the results can have a wider impact than many actually realise, which in return also automatically impacts customers positively.</p>\n<p>It might seem obvious, but more than often people become oblivious towards what impact they can really have on others. We also then take a sneak peek at the <a href=\"https://github.com/karam94/ao.knowledgeshare\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AO.Knowledgeshare</a> application I have been entertaining myself with during my free time.</p>\n<h2 id=\"directions\"><a href=\"#directions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Directions</h2>\n<p><a href=\"https://www.google.com/maps/search/?api=1&#x26;query=53.577637%2C-2.533411\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HERE.</a></p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusion</h2>\n<p>See you there, yeah? 👋</p>\n"}},{"node":{"title":"My Raspberry Pi Zero & the USB Audio Confusion","path":"/blog/2019/my-raspberry-pi-zero-and-the-usb-audio-confusion/","date":"17. February 2019","timeToRead":4,"description":"So... I won a free Raspberry Pi Zero from Google! Then I bought some USB speakers for it and chaos ensued!","content":"<p>To cut a long story short, I won a FREE <a href=\"https://www.raspberrypi.org/products/raspberry-pi-zero/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Raspberry Pi Zero</a> from <a href=\"http://google.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google</a> at <a href=\"https://ndc-london.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NDC London</a> in one of the giveaways they were hosting. In all honesty, I'd never really acquainted myself much with Raspberry Pi's before this happened and always saw myself as someone who was more interested in the web development sphere as opposed to creating little gadgets like the famous <a href=\"https://www.raspberrypi.org/blog/magic-mirror/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">magic mirrors</a>.</p>\n<p>However, given that I won one for free, it seemed almost rude not to read up more about them and then come up with an idea of some sort to try and push its boundaries (which seemed right given that I won a Pi Zero - which is a smaller more limited and streamlined version of the original that is slightly less powerful).</p>\n<h2 id=\"so-what-did-i-create-with-my-raspberry-pi-zero\"><a href=\"#so-what-did-i-create-with-my-raspberry-pi-zero\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>So, what did I create with my Raspberry Pi Zero?</h2>\n<p>Being a C# fan, the first thing I obviously did - whilst trapped at London Euston station - was to see if I could run <a href=\"https://dotnet.microsoft.com/download\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Core</a> on it. Unfortunately the Raspberry Pi Zero's come with an ARM CPU chip as opposed to their more powerful daddy Pi counter-parts which meant that I could only run the <a href=\"https://www.mono-project.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mono framework</a> on my Pi Zero. I wasn't too disheartened by this as at the end of the day, whilst the popularity of IoT devices within the .NET Core development world is only going to grow exponentially, this type of scenario was exactly what Mono was initially made for.</p>\n<p>I created an application that queried a publicly facing API (it is one of the new Pi Zero W's so it has built in Wi-Fi) running on a job at midnight every day to fetch times and in return schedule jobs to play an audio file at those times. Simple, right?</p>\n<p>The foresight is to eventually add customisability to this where I can set an alarm every morning through my own created web interface (that I would probably access via my mobile phone) and then my Raspberry Pi Zero connected to a USB speaker would essentially become my alarm clock. Again, not very exciting but given my lack of creativity in terms of ideas, it was still a very fulfilling process to learn about how Raspberry Pi's work along with the <a href=\"https://www.raspberrypi.org/downloads/raspbian/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NOOBS/Raspbian</a> eco-system the community has built around them alongside learning from some of the difficulties faced with installing Mono on the Pi (hint: it's not enough to just sudo apt get mono, you need mono-complete otherwise you get exceptions about core dependencies being unavailable such as System.Web... eek!) as well as the annoying issue that this post revolves around.</p>\n<h2 id=\"whats-the-audio-confusion-issue\"><a href=\"#whats-the-audio-confusion-issue\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What's the Audio confusion issue?</h2>\n<p>As said in the previous section, my Mono application schedules different jobs to run at different times and play an audio file. I initially started out my implementation by using the original <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.media.soundplayer?view=netframework-4.7.2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SoundPlayer</a> class that is found in the <a href=\"https://docs.microsoft.com/en-us/dotnet/framework/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Framework</a> and during development on my Windows machine within JetBrains Rider, this worked fine both in debug and release.</p>\n<p>However, upon running my application on my Raspberry Pi Zero... no luck. My application logs were suggesting that there were no exceptions being thrown or errors at hand, however whilst I could play the same audio files on my Pi in VLC Player, they just weren't being played when triggered through my application.</p>\n<p>It eventually became evident that there was clearly an incompatibility issue with the System.Media SoundPlayer class and my Raspberry Pi Zero. This meant I had to look for alternative ways to trigger a .wav file to be played on my Pi and I decided to just use the built in audio player within the operating system by triggering a bash command of \"aplay <em>name-of-file</em>.wav\". This worked.</p>\n<p>After thinking everything was dandy, I then realised that all this time, the audio I was hearing during testing on my Pi wasn't actually coming from the plugged in USB speakers. It was coming from the built-in speakers in my overhead projector that I was using as my Raspberry Pi Zero's monitor connected via HDMI! (I now have my Pi SSH'd on my main PC so I don't need to worry about a UI, but I left that until the end... silly me!)</p>\n<p>So, what was happening was that aplay configures itself at OS startup to match the settings within a configuration file (alsa.conf) that can be found at (/usr/share/alsa). By typing aplay -l (lowercase l, not uppercase), you get displayed all the recognised audio devices that aplay <em>could</em> potentially be outputting audio to.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">pi@raspberrypi:~ $ aplay -l\n**** List of PLAYBACK Hardware Devices ****\ncard <span class=\"token number\">0</span>: ALSA <span class=\"token punctuation\">[</span>bcm2835 ALSA<span class=\"token punctuation\">]</span>, device <span class=\"token number\">0</span>: bcm2835 ALSA <span class=\"token punctuation\">[</span>bcm2835 ALSA<span class=\"token punctuation\">]</span>\n  Subdevices: <span class=\"token number\">7</span>/7\n  Subdevice <span class=\"token comment\">#0: subdevice #0</span>\n  Subdevice <span class=\"token comment\">#1: subdevice #1</span>\n  Subdevice <span class=\"token comment\">#2: subdevice #2</span>\n  Subdevice <span class=\"token comment\">#3: subdevice #3</span>\n  Subdevice <span class=\"token comment\">#4: subdevice #4</span>\n  Subdevice <span class=\"token comment\">#5: subdevice #5</span>\n  Subdevice <span class=\"token comment\">#6: subdevice #6</span>\ncard <span class=\"token number\">0</span>: ALSA <span class=\"token punctuation\">[</span>bcm2835 ALSA<span class=\"token punctuation\">]</span>, device <span class=\"token number\">1</span>: bcm2835 ALSA <span class=\"token punctuation\">[</span>bcm2835 IEC958/HDMI<span class=\"token punctuation\">]</span>\n  Subdevices: <span class=\"token number\">1</span>/1\n  Subdevice <span class=\"token comment\">#0: subdevice #0</span>\ncard <span class=\"token number\">1</span>: Device <span class=\"token punctuation\">[</span>USB2.0 Device<span class=\"token punctuation\">]</span>, device <span class=\"token number\">0</span>: USB Audio <span class=\"token punctuation\">[</span>USB Audio<span class=\"token punctuation\">]</span>\n  Subdevices: <span class=\"token number\">1</span>/1\n  Subdevice <span class=\"token comment\">#0: subdevice #0</span></code></pre>\n<p>They are grouped by card and then by device. So in my case, the configuration file was set to card: 0 and device: 0 by default. This meant that aplay would always try to play audio to the default audio device within my Pi (even when none exists/is connected) as opposed to card: 1, device: 0 which was my USB speakers.</p>\n<pre class=\"language-json\"><code class=\"language-json\">defaults.pcm.card <span class=\"token number\">0</span> <span class=\"token comment\">// In my case, I changed this to 1.</span>\ndefaults.pcm.device <span class=\"token number\">0</span></code></pre>\n<p>Silly, right? Well, perhaps that's the wrong terminology to use. But it would be nice if this sort of thing <em>magically</em> correlated to the operating system's default audio output setting which in my case was set to not be HDMI.</p>\n<p>No idea if this will help anyone in the future? But I certainly would've liked Father Google to have blessed me with these minor pointers a week or so ago.</p>\n<p>Au revoir!</p>\n"}},{"node":{"title":"Associating templating file formats with html in Visual Studio Code","path":"/blog/2018/associating-templating-file-formats-with-html-in-visual-studio-code/","date":"15. December 2018","timeToRead":1,"description":"A simple solution, to an annoying problem.","content":"<p>If you read my last blog post, you'll be aware that I've been playing around a lot with <a href=\"https://adonisjs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AdonisJS</a> at home and as it is a Node.js web framework, instead of just plain HTML in views, it actually uses its own templating engine instead called <a href=\"https://edge.adonisjs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Edge</a>.</p>\n<p>This is just a quick post that addresses a small issue in Visual Studio Code that I've faced a lot in the past when dealing with different frameworks and different templating languages such as <a href=\"https://mozilla.github.io/nunjucks/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nunjucks</a> that are all really just HTML based files.</p>\n<h2 id=\"whats-the-issue\"><a href=\"#whats-the-issue\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What's the issue?</h2>\n<p>Formatting the files is the issue.\nBe honest, you've been there - or you're currently there at the moment.\nThe dreaded \"Sorry, but there is no formatter for ‘xyz’-files installed.\" message, and all you really want is for Visual Studio Code to just pretend your file is a standard HTML file!</p>\n<h2 id=\"whats-the-solution\"><a href=\"#whats-the-solution\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What's the solution?</h2>\n<p>Press CTRL + SHIFT + P and search for \"Preferences: Open Settings (JSON)\" or go to File > Preferences > Settings &#x26; search for \"files.associations\" via your VS Code GUI.</p>\n<p>Then simply add an association that tells VS Code to treat your file type of \"xyz\" as a \"html\" file. In my case, I went for the following:</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"files.associations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"*.edge\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"html\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Hopefully that helped you as much as it helped me!</p>\n<p>See you next week!</p>\n"}},{"node":{"title":"A Bizarre Hack Manchester 2018!","path":"/blog/2018/a-bizarre-hack-manchester-2018/","date":"30. October 2018","timeToRead":13,"description":"Coffee, ribs, steak and then more coffee...","content":"<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 640 358' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-375b77003ddf77189f760f60fe38854c'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-375b77003ddf77189f760f60fe38854c)' width='640' height='358' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAkCAYAAAA5DDySAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAdMklEQVRo3i2Yd1Tc%2bXX2ZyVU6L2XocwMvcMMMMwMMPQy9N47EkWUlYRAAoSQKBICISQhVBdV1HbXu9Lau856vbsuWR87xXmd2M7JcUneE5/kxMdv4iS2s/q8FzZ/3PMTw%2bj3%2b32f%2b9zneS6K6/t%2byxXXX7IW%2bGMuxnzOBeMrzpc/4OKha2zN3eP23DpzR0aY6u/mWFcDRxpK6LZkUp%2bZSIkuHEOkPyWpqbTklHKmbZSLHVNsDq1wf/ot3r3ynA9vfsiT0x%2byXH2H03mXOGGe44hhjM6UVhoSSigOTSVHlUBWSDyZwXFkq2LIVseQq4klLyKeSI2GsDA10VERqEOUlJuieLM2nYnmPJbH6lgdrWZtrJaV4RouDFVzfqCW2Z4qjjWVMFhVwOHyfLqLSmg0Z1CsjScnLorsuGi0Sl8O1XaieKiA21IbUitS81Jzij8x7fc3dKSepDa1g%2bHyCSbbZjjecZTjvcOcHBrl5OAIQx3tdOa2ciz8ChcyH/Lqwrf56NZnvLr5AW9vPObxpWvcu7jA%2bokRJkpLOV5s4WhJKf05OXRnmukwZtOkNVEZm0pJhJbC0Hjy1dHkqqIolsMXRSQQFqBBGRCCWh1GXFgkveVm3uwo5XBlIYMNlfRXVUpj6jgz2s6pwXZODHQyOdTL1Gg/M0eHOFRTSnV6PlXGXHLjkwWEVCrSDAKCluM9R1H8UvGav1R8yadS70vdkVqwggHDAtlZMQT7%2bhPoHkxWRAEDhRP0FY7QlttNc047dVmNaD0TSLaJJM1ZTZMhm8HCcoZyS3mzoIqj%2bRbGC4s5VVrB6dp6pmukKts4aWnlSF497QYLzfoi%2bvKaGSrrZ7p7gum%2b4wzVdVGtL0UXmEqEXywpYXlUpLdj0ddTbm6iztLBsYFjzE1OceX8MtdXV9i4uMyN1VU2LqywPLPA7JunpVnH6a3updZcS3VGJQW6QnIScsiMy8YYm0VyWAoKkl6DSsrrNX90/pLfCwPe9v4FOVlGlC4BBLn6Eu7th4uNoyDZxmLPNSZbzzLRMc1I0yjpvjEk2PhidIugLs7CQFYvowVHGCsUtpRMMVGwxImUDY6rbzISvE5XwDnqA0YoVraQ612FySeDWM8oouQ%2bKeF6MuLzyU%2buxZLUI6PQjVaTS0Z4KQXRTYwfPs3Fs2vcWr/Og7du8tbd69y5e5Vzs9MMdAxRqK/GFJ6PXmNGG2gkzjuNaI8UVK5R%2bDpo8HcIxtPaDy9bP7zlnX1sfVB8OfuaL4%2b%2b5nX3a/6n4k8QA993/gcSNGlUxutoSUlhvqaEiRIz/dKltaN3WRpeY354mZmh07TvsGC/C1XhuZyoX%2bHNikWOVi1zvOIyE2W3mMp9jzN%2bP5XR%2bjep33Juz2%2bY3fszTqg/YDRzne70aRL9s3HZp2Sfwp4DCmf2yjXINpIEZz0RB7XE2OiJdUrDFJOHKTab6uRq6pMbqYiupjS8klJ1PaXBHWT7NlAW0E2tcoB65REalWM0BIxR5zdMlk8lKqcofOwDUTqpSQ/KJjFQLwxYAxakTgkLeuVqhk9DvkatJVfmx0KrLpUTJfmMF%2bcy33%2bGm/MPuXp6k7WZdVamLnKqe4oCrzD6zc0sjVxntmuV2Y51TjdvcrrmAaczvsP8wf9kSZi1KLVzXZVacP4lk%2bZHjBRepD9/ntqUQTSOIQTsdSLTv5iuqFn6o5cYjF2mP2yJlvQ16m/Je9UN0Zo4wCHTDGebNrnYdY9Lh%2b6xmv1d7tr8M9u2v%2bGZ1b/y/I1/4%2bme3/HI6nc8sPqSYdfn7N/nKODaEeQRQ46AV6xrRfHbE7/nP078gf8Zes0/tPycf9H9K19o3maswMSMpZzjBWZ6jCnUi3hMdBzj9vn73L5wl83F61ydv8zyiRVqwtIYlbm8NHVLQLjC0pHrLBy%2bzXzbM%2bZSf8JFOfC2aM1OPRaNeSw/X9n/H8xmvGK8cp3RsgX6Sk6Socki2t6P3swZJnLuMJF3mzOWR5h824l3bCZXt0hkZBuqwFqiNCVsnr/J23fe5cHGh3zN8nv%2baJAG5sLrEKkAKX/5eS/8eud57v/MaN46A/lnOF51nnJxofrMARQb1t/iI9tf8zTlc%2ba6%2bngzs5qbobeZMHRzuqqEtVqLfJbGUmUFt%2baucf/yY7bWtrizeosby1e5cnadtkRRZkuLALLFyvgGy0dvcmH4LZa632M%2b5RcirPDXcvifSf1U6q/l50dv/InF9E85VX%2bdE7UXGamdpSypknSfKEaKl5gsvsGUjNB83TY6r0rcw6pIzt8mpPMZqtbnpGQe5fbSLd4WVtxb/h6f5PwRioTF5V/KGEupv%2bS16Bp7v%2bT/yvO2lL/lcutHLHXJO/bfo9rYSW/pOIqje54ybf1UZqmWk%2bUVHMozMBI9wGjiGO1mA6dL8xkTHThbWcOTay94vLHNw2sP2Lpyh9tr17l%2b4So9aQWMFdUJIPdYm77O6uRt8ej7LPV8wFLaP%2b52fMdt/t//1s4LvSdMWNH9gJnGm0w2rXK0%2bZxYbi3ZygSOla0wXXqL05Idzjc/Qe9dg0taG7mpL8lqv4a5fZm0vOPcX7nLi1svebj0I75Z8Cf%2b3QcR8tf8QfFV/bc859/l%2bkO5Pgj/F1ZbX4mI32GseRKzroixpjkUZtdOgh1TiItLYqa5Qmwsmwbx5%2bMlTZSJb9an6GhKjmWq%2bTDPbr5k%2b/o22zce8eD6Xd66usnNSxv0Z1kYy6/g9qX7rM%2bKPkzfZuX4Qy70fciK6Vc82ftV93/3v/UreaGvCQBr2h9xpvkOJ1vWGG9boF5fR36IlvGqS8xUCv3r7rLc9hStdwUuujZKtO%2bQW7GCsWYJY8ExHq3d4%2bl1AeDsD3lV%2b1/8TTj83F6e9cZXz/tbqR9JfbxfGJf5CzZ6P%2bJE4wKGwCCKY9M4PbSKojNtkki3BLpPtHD83CA1GRJIjPFcG2oSvy6gJCqWgogYNqZv8vLeJzy9%2bYztW495uLnF1rXNXUsaLqxhOKuEu2sPuHb2FlfO3OXSiUdc7P%2bQK/m/4Jntl/y54n/41Rtf8o/yQn8hADyX61XdTzjXep9pEc2T3Us0Gusp0qQwUX2Z2eq7nGm8w4WWLRK8C/HQtlCa%2bYDwmjsE198lJ2%2bUJ%2buPebT%2bircXfsJHnf/Ft7Nf83kyfBb0mk%2bdXvNtq9d8IhrwSvVHHpb9Hdf6XrJ6ZJOm2GQqAqKY6z%2bHIldfiTkxjJXFbjJLajBKrM0W6t890cj1XtGDrmqudpWTq89GG5fHpTOXefXkJc%2b3nvLk7n3ubtyQjrUzaMiTsXjE9YVNNs7d4/qZl1w%2b8glr8uAnXv/JF3LoH0v9laTMj%2bX62OoPrJk/5lzHQ%2bZ6rjNzeJlmAaAmzkSf8RyH0y5wvldArL4vDcrEK62DkuItIms3Cam9Rm7%2bEE8uP%2bPF%2bidM9V1mtfJDPquBb2bL/fXwcSx8LxQmPW9SH3KEd5v%2bns3hV8y3zlEREUeKjQft6iQUleldWDJzaO5sJMlURmicDl%2blisvz47y/NsM7M0NcHGjA3sETheIAOaYintx6JBlgkHMT4zy8/RanGns5pDOxJfowc6iTmd4epgbnuTn6Oa05o3RGn2Qz9iFfd/s/Qkn4utR9779nuqFQZnyVM/WPJQEu0ZPXRmFsIo05NVTqC0RDRAjrV9H4yzsZ%2bsgruUFk0xYqAaEgr5/3b3zE/cUPZE%2bIo8t4iu93wJ%2bV/jcfFf6BF2X/xKdJEvMTvkWiXxgXa15yvnGDDDsvdNbuRB1wJc1agtDy0Dipxnx8VZEEhITj7qlkv40bRqOJ95/d42vbW9y6tkJgcAT2Ln7YOngT4KchKjiQEoOWp1tbnO0Zpic%2bia31O8zVlzBZWYIhIpjajDZ6ZEk6nNlAY1Y0HeoGHlv/jBfO4tOq3zDR1kbb6GWm65cZ7ziNxVROqlrNaGUObWYtsy2yLOljiFEFocztJFoCVkj6YfyMg%2bRm93J1aIn2qm5SJdsbtPkMimheqvyYzYy3uJL3be4E/R13Ur6LTiUa55eEwS2GqP2OJFp74LPHhhixXEVsQrIczBdnZ18c7L1xcfbHydEXGxtXFmfG%2beTlM65cnMfTJwQ7%2bY6TewAH7T2wsfei0JAuozPPia4BGpJzeLDSyHtLzry7mIg%2bNAw3twAiogzkBJWRGqhDsU9BSnA6850rzAkjtMVvig3dwNB0iqiAJJy8fQnw8iU/PkG2NlmEQgIwx6iolH9nmetQGVtlOwyiMCuddsthjpTlU5QRR75BR6JoVahQOzAgjOIg2S/ihmXBypQdIoycxEjSlUHoQhIoizERorBBtceWArUWhb2TH3a2HjhIZ%2b3kUPZSbm5KrCTemjMy%2bPwbL1hdmBVmBOHkGiC/l%2b87yned5HvymZdvIOrwJBJTmijKSuPkoXTqCjU4OrqwR5KXSW/GFBeHjbWDfOZKlDqYvroq5gaKyWsZYE/9STSd46hVEbi4eeHpq0Sx5yB79tvjLHtIdko0h6uKaCqoIDNV9oS8Qkaq9fLZEOW5eaRGBpKk9qcgORqNnxIbWxf2HnTmoLUTtfpEpstzqDNqiZD7lqVVYvILJ2yvHXEyAuneESgcpfs2dm67HbcVIGxt3eVFAnB09sPZxYtHNy9zZ2MVa0dZIiKC0NfrcA9QclC%2b5%2bDij7XMVEiAL%2bkpZrIzaynLLRfw3LC1d5VuKanKkm0xPFj0Yw9KP0/y9WGkRfjQUVXD/OwlmntaqClPx9srEFs7ZxJFAyIjIoSRrmRq9fTXdFJmyaM4K4u%2bxhYGRV/6WnLoqh0hM1ZHjNKH1KhQ8hNjMMgY7jTET6o4LVk20SzZPsuw6PTEe2sIdvAi2MoGzQE7QvfZESFMVji6SUdF4KytXdkn82Ft7YyrzLqnx04nHKirruT5/XWZxTQGqiUWnyzAL04l33PngJ0HMREaqrMTyEuNJUn%2bHRrgz355wN69%2b2VxCUAfEUCor7MAoMDf3Ua65Y2b3V6MenGU5RtkW0qIDPQjJtCbYC8XfNzcaauupSI/ntLsKjISjTSZzHRJNxffbKKrvRVzZjo9dTlEeHsS4uVOskbW9egoMvVG8s1mLhwd4crRYU7WVVKmNRIiLFc5e0lTPXBzD8THX4MyMFKaLe/l5LhD%2b50R8MJaqLNnr/2uCB608SJao2Gpt5zP5od4MdSOLjSCkNRQYYDogDBmv60bSmGDTgRPF6GU%2bXXmDStbFG/sRx3iT7kAkxbhR6KA4O7pS0JECHFBriQr1ViyKzg/f4GoqGRSNKEMl6XKXpBGiS6O9DjZPDs7ROBq5P%2bGC8iycoeqaS0xEOjvjyExVOgcRaiPswDnIyAHU6CNpbe%2blOneDhb7B7kycU6i8jo5ERlEu6vwdnTGytoRt4AY/MJT8NUkYxTrVlgddJN5c5Fu20uXrHGwdcIYo2HucCIfzfbwg/NDfGuyWwDoEAqHYOPgI0j6sO%2bAPfuELTtaEKnyRxvqTX2FiYqqPBydHAlSylJT34clK5/YqAiSo5MoNZdQmZ9Ga3EF7XWtzM/P09ncJOnTwKHcJEYs6UzUFFBXWiRjYaalNFmaIGBbW5OdpkEXoyZE6UupCF9UkBIXeU6k0l0EM1iAi6SnooDZQz20lZTSVNtAe1sTtZUWJsaGOdLXw8yxccy5kir9VJjSCxg%2bNIqiyhBPc1YiLZmJDBenca2nhBfDzXx8ycDTk6WsNFVyvsFCmS4ZWzm4m1cwO7phJSJ1wMZlF4DQYF%2big10IV/mJSJkoKTSjUYdiiCuioayOZAlaqUlaKqsy6evLpaauntwcyR5NdXR2ttGYkcSAsOVMfQFDlgzsbe0wJgWgiw7BXyju6eYgo6AiNNBfAPGlQB8kmuUojuVMZLAXccGe6KOCaTTrOVYvwU5G4eTkm7S2i%2biZU7FU5NPR1cDiqTEWz52iRnShsrYeszxL8WqyiVcTTbyUejbawGZXBd1GPcZYb4pznbE%2b4IK/XyDeAWocXf1wFQB2Dv2G0Hzvfjus7d3x8fEiLNANR3s7mX8HnFw8cHXzxlMsTZtgoMpSLAdOJ0OyQESkP17e4iYOLqLYsp/vdyba351KbRh9wgRfDw9xI2tMSYGEB/nh4%2bFKcICLZAEfAcNDnuMuthciLHOWezjjItRuy08nMTqM7Lgw%2bgv11MvsDw12YM5Jo6A4k4zsNJJT4zDnm2hsrqSxppzi8kxS%2b6JRXG0r5YIkslkJHx2y94d6%2bYgO2MhI2IoWeOIgjuATECLCEYKrdyAuotZucoD9B2yxs3OUTOApIxBNamw4B6ztcHN1QJ8QTIi/N3v3HRBhPShXG7nasEfCx569tljtOygW5ye6oJZneODu5EJ8oC9B3j4ypx5Ccw/iNV4UGxI5e7iY88PlVGYmY0oLp7o4UdgRhKurq7yjDd4ejjTlJOAigNrZ2BETLvTONpAhgJvzDWTnGzFlpZBu0gogBgqLzUREh0qYCyIwKlGWoRwjdWYjpbk5%2bPmpRcBsROFdhOY%2bYnO%2bOLr54iWH3yk3nyA5fDCu/n7otUruDlooN6ThK34a4K%2bSPSKasU4dzZZEcYZogvxc2WN1kAMHrXeB2LnuP3BQ8sTOPSNx8tBwQKx3zz4HvOW%2bbh5%2b2Dgq8fENRqP0pi43VXQglYbCNCabc2kujZEQFIsqQARY7rdjm0GBARLgbHZtVqF4Q8qKYE9vslKSd/%2buma7XERUjGpSSQEV5EXm5wghJsA11Es50IoImmUVzkYQSSymaiETxby/JBe4SdjzlBYWqrj7SdSUefl8B4ClXa8kH7TmxfHehmwqxpzfEU73d3ZjqN8p8ilhFK8Wb/YkK8RQADsihdxhgLZ3fL5brgodvmKTPANEUpVQQ%2bw96iKDKSAjgDi5B8juVaI0fDna2eDg7UpQSLmEmgsRQYY2HO8H%2bTuI%2bYm0hoSLMql022svYeLm706w3MW2xcKqkiKPFeRytKOSQJZNoEeqwUBUpqTr0%2bhS%2b%2bbVrNNZaUOgzskjPzBKxyCFYE7sbi3c7Lwd381EKCP67tUP/HRBcfIJRC%2boPh0Uc28qxtnEQ1G0wJgZQl6dC5etCdIg7CRpPfN0cxRYP7HbdSsZhz959%2bPoH4%2bKhkk77iYhK8HISkN2ECXY%2boi0%2bOHsGS9yWcfMXgNycsLc5SKS/C9oojeR9sT6NABseSKiIrIcwyZQSS64wODatgdSsw3SkZzBTWka7IZUmQxLn2y18utzPap8Fpbc7RYkRDJeYOLc4jFlEUxGTqOWr0qFUxeEqy5Czuz/ukqY8/YPk0DLzPgF4y4boIdR0EqqmxETx3mQPYfKSu/MtDMhK9EYb7k6FMKO3LpX%2b%2bhTyjeECzl4BYGcEDuDi4oy7sMnBNVDs1JeDkiL327jvssDORYCRkOIVoBIAAnHaSaNersQlJdLe1cOLt99j4lifpM1owsPVMq4B4i5pZBYeRl95k8jKT4iz3KfWaOZYiZk2o47cuFjGyk1859IA310dxJIayWJpCo9actFqowkTUBXqiGgC1WGERsegEVFw8dh5QfF6d4nCnjtA7NBfiX%2bIWkZhBwi1fKZCrQyWmbYRjxY7PGhHapgD/Y1abiw0UVcUx8RgEVtrnRTnxOzOpZ2dDRZzBMHi3zaO/rJMeX81//udBAgf7AWEnYzhLkuXrQQzW1nKQqLDefnqfb7xzgOeXz9Nd2sN4WGS5Hz9ZASCMNRsEt/wfRKbvkdk1XdIrX6XraEBcbM6rnaWcWewge%2bvDvCzW8f55sIhNoYq%2bdsLXZytMQkzrSTPSPYJ1oiABatJSNUSn5Cyu/Dsk4XCQcTPwc1H6O%2b7ywClKhQHd2%2bxQxWOAlJ0vHY3rysU%2b0Td91Ooc%2bPxWi3rc40sn25kaaqe6eNVLE5Vy8u67wpUR0UcxRlRcnBf7J18dzdKK0mf%2b63d2HfQFasDTqI/ogf7bHlDgFGqo3j5wUtZsKqoy9Hy7N0tjk0eEia54y6VUnmVhMYviK/9lNi675HW8A1W27u41VvG22P1fGuql2%2bfPcQHZ3rYPtXOXfns88VeGvMMcgYfPL29UXj4BqCOjEIVGcH46JscHzuKOiyGgw4eu2Urnm9t7yZj4SPRVw4sip2Znce9rWuisKmyOtsRJh49WKPh4WoD85O1TI2VcVJqfKSUuckacjMjdwHI06vIkURn67gDbqAsUu4SqBzEPl2xtvWUcXDdtVUrEUQrsc3k5CSam1tRqWNkHc7n7Xs3ODsxJIInoO3ZS4Sxj8S2L0is/4yklu8Q3fA9uqvHOS52tyb2fm%2bggW%2be7eed6S4eTrZyf6KRP7vQyWKPBV9lGFp9Ngov/0CiEuKJTYrn8sUF3n12j4vn58QyagSIOHkpWS%2btdmzmoAQUT6qr63hw/wbvCC3nZofoaNLT3ZK%2bC8CNxRpOycGn3yzj1LEKxodLmRgto7kmRWzrACnRPmhjRN0lUX6lAR7SdUfpvjxDuq%2bwstt1iRCVmrS0XPQ5/cRnHhf1ThDrMnGk/k3i/ONISUmitaWMouo%2bUjo%2bQ9f6OZH1f05E6w%2bpb5hlvaGMuwM1bAxW8mC8iUeTzVw6XMjXF%2br5q/tD/OSDczx9tMjzd66iCI2KRhURRop447Pt62w/uMHT7Zvc3Fxj%2bcI5Dh3upa6hhuaWRk7PTLL9%2bDZPntxi%2b8ltbt44Jwcs4khPFsc6ElmbKeL4YAknhnfydynHjhQzciif7uZ0/LwdqTCHUJypxtZBNklZp508ZO5l89zZKt1k1CJFj9IN5RJgTqEvuIK25AZp5RuER2diSJN9oeUE589O8Zc/fsEPvngssboHQ9dHJA/9nLiGF2QVd1OUm82YWN9Cay4NpkgKk0OoN2q4fbyMX39/k3/61Tf48U%2b/zje%2bdZ9L1xdQRIhS7gCQqIsXADZ5dH%2bT509vs/1og4f3r8ghV1hcnOHy%2biLXNpa5desS29s3pG7x4MEVrp5vZawnnfbyaJaOGhk7XMCo1HE5/NhgIX0dmfS2pZOVGkhtjoaKLLVke4nAEpl32OXhG0JsvA5TRj05FRfJrHiENvcGcaYldPkX0VWI0KXWYdIlCMv6ubG6zBefbfP%2b0w3ZOINk/m9gbFiiUPJMWXE%2bRZZa0vT5RIVGkiX7R7NJx5nOKl4%2bu8Kde%2bscHuknx1JBojGP6NQsFCkmPZqYSJRBwVxamuHxg00eP9zgyeMNHj1c5979y6ytzTN39hRL509z%2bfICd99a5/HjG9x56yrjh80khzvt7vvjnZIED2Uz1JvDyOE82bby6Gk1fjUmtTGS7NQSkDyIUrnILm4rY%2bCCSbw6r3wEffUzjNVPSMpZk8MvEm08R2zWAkmlV4k19HP0SDd11RUU6aqoN41yquWUWKqMlC6NhuoSqmrqyMitJUlrRq/LICOjkJ6mTuoKK8jKKiE%2bLQd/dQLeIbEERiYTnmRAk5COIjVTT2hsJJ6%2bPiyeGWf74eZu559sX%2bP5i002hCaXL5/j3MIUE7Jh7bDh6tXz3BBmrF5aEEpHEBH8FQBdFWpOjmRzqDNT9vksBnuyaW%2bQKFuVRE99LPlpIUSE%2bMly5YqfZP90YwKHD5WTW9pHbP41kvNXSci%2bICAsy%2bHPEW6YIqF4hRC9CNv4Cdkeq6gqaqPdPCrjMIdPeBQ%2bnjtZQScsKSVeWyz6kEFBbj6HOhoZ6OolQJ2Gs2%2bkqL4aZ28Nrr6h%2bKhiCE00EmMoRGGUxUETtfMXXxcmx4/w7vO7bG1d5vH2VZ4%2b2%2bCtrRVGR3s5PTvO0WNHmJo6xrn5kywvzzJ%2bYpjEcB%2bMcW67fzIvMvgzM2Kiq8VIl3S9U6q5WkttWRy15WmkC41TExNIiY8jPlJDSX4qdbUZZEoKjS8Qupdfw1S5TlrhEnHZs0QaT5JQsEh43hKm3DoSk6JESLM5WnpM1L6XsFjJL2Eh%2bAWIpcna7OOvRBUahT5dqN9QyfSJCeISUrF3l%2bUnVEdKTjmJmcWoZUP1VsXiH5nE/wfTymBvkfqvMQAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"640\" alt=\"Day two... we look like we're smiling, but really we're just dead inside.\" data-srcset=\"/assets/static/hackmanc1.a0d7643.0e19bedb73deee3c9a5884de729c5e2c.png 640w\" data-sizes=\"(max-width: 640px) 100vw, 640px\" data-src=\"/assets/static/hackmanc1.a0d7643.0e19bedb73deee3c9a5884de729c5e2c.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/hackmanc1.a0d7643.0e19bedb73deee3c9a5884de729c5e2c.png\" width=\"640\" alt=\"Day two... we look like we're smiling, but really we're just dead inside.\"></noscript></p>\n<h2 id=\"an-introduction\"><a href=\"#an-introduction\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>An Introduction</h2>\n<p>Hack Manchester is a yearly 24 hour hackathon event. Well, except this year where the dates perfectly coincided with us turning the clocks back an hour, bidding farewell to our beloved British Summer Time, which obviously meant that we instead ended up with a unique 25 hour hackathon event this time round.</p>\n<p>Anyways, each main event sponsor gets given the chance to define a challenge and then it is up to the participating teams made up of a maximum of four members to choose which of the challenges they want to hack together a solution for over the event. There are then obviously judges from each company who make the decision of which solution, they like the most.</p>\n<p>This year, I and three friends who are also work colleagues decided to enter a team and given that we’re all within our early twenties, as you can probably guess this was our first opportunity to participate in a hack day of this sheer size and calibre.</p>\n<p>Back on topic, this post is just going to discuss how the event went for us as well as just sprinkle some tips that could potentially help others prepare not just for future Hack Manchester events, but also any sort of similar Hackathon challenges. I think if you’ve never tackled anything like this before, it can certainly be quite daunting at first. So, if this blog post helps hold your hand and put your mind at rest about a few things, then it has certainly done its job!</p>\n<h2 id=\"challenges\"><a href=\"#challenges\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Challenges</h2>\n<p>Believe it or not, deciding which of the available challenges your team wants to tackle is a challenge within its own right. We researched challenges from previous years and found it a little bit difficult to fathom the hand that we had been dealt for 2018, but us software developers like a good mind-boggle, don’t we?</p>\n<p>An example of a very strange challenge was one where challengers had to create something driven by user data to somehow tailor a terrible user experience back to customers. Whilst that is a good challenge in terms of the potential scope of possibilities and from a technical complexity standpoint, we struggled to motivate ourselves towards spending 24 hours hacking together an MVP of an idea with essentially no actual genuine delivered business case or value at the end of it.</p>\n<p>The spread of number of teams who chose each challenge was shared by the organisers on Slack and it was clear that this year there was a significant imbalance which saw one challenge being heavily favoured over others by teams. You can also argue that awkward challenges like this also adds to the difficulty element all round, but unfortunately, we didn’t really buy in to that idea. Instead, we ended up hacking together a proof of concept for an idea we had come up with beforehand and pivoted it in line with one of the challenges, but without too much emphasis on trying to go out of our way to also satisfy the challenge as feedback on our proof of concept was more important to us than winning a few Crystal Maze tickets. So, I guess you’ll have to make of that what you will!</p>\n<p>The challenge we chose was unsurprisingly the challenge that most other teams also decided to pursue which was courtesy of <a href=\"https://www.clockworksms.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ClockworkSMS</a>. The challenge was to use their SMS API in the most bizarre way possible. Bizarre obviously being the key word here and the decisive factor in judging the entries.</p>\n<h2 id=\"our-idea\"><a href=\"#our-idea\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Our Idea</h2>\n<p>We spent plenty of time brainstorming together ideas for plenty of different challenges, but we ended up going with a simplified version of a side project idea I’d had lingering in my head for a while.</p>\n<p>We were considering taking on another challenge – where the challenge was to use open source data to make train delays less painful and more fun for commuters - with the idea of a taxi pooling application for train commuters where we predicted whether delays were likely and if so, aim to bring together people going to the same place to hop in a taxi together, split the fair and get to their final destination quicker and essentially cheaper. In hindsight, we probably should’ve gone down this route to create something a little bit cooler, but I guess you live and learn!</p>\n<p>To cut a long story short, the project idea we did pursue was really inspired through my own personal questioning of Groupon’s extortionate pricing strategy to provide marketing services for businesses. To give you a quick rundown, if you want to use Groupon as a business owner to offer customers 50% off a £100 product – where you’re willing to obviously take a hit to reach more customers through Groupon’s platform with the hope that they become recurring customers – Groupon take 50% of the £50 you are left with per sale. This essentially leaves you with a £25 gain on a £100 sale which in many cases just isn’t worth it for some businesses depending on their overheads. Unfortunately, many business owners just don’t know any better and are desperate to generate any kind of revenue, even if operating at a loss during desperate times.</p>\n<p>So, what if there was a similar service where you could instantaneously somehow specify something such as “we are four people, looking for a restaurant at 8pm tonight” either via SMS or through an application or whatever and then have a selection of automated offers from within your local area sent straight to you to choose from? You could then perhaps even integrate accepting or rejecting these offers in to some tinder-like interface for acceptance where they are then saved in your wallet on your phone to claim later that day before they expire.</p>\n<p>This wouldn’t be limited to just the food industry, obviously. But for a small monthly fee, businesses would be happy to be added to their local pool of businesses reaching out to relevant customers as an incentive to bring new people through the door every now and then. Think of it as a digitally targeted flyer service – but instead of spending hundreds printing thousands of flyers that are distributed through uninterested letterboxes and go straight in to the bin, you target those who are already warm leads.</p>\n<p>Restaurants could even have control to turn their availability on during certain weekdays for example when they aren’t quite as busy as they would like to be. This means restaurants can offer larger discounts that users believe are unique to them which still undercuts Groupon’s model and due to the larger discounts, users will feel that they are essentially getting a better unique deal. Restaurants in this case would also have an in-depth statistical overview on how many people within the local area have been offered their offer as an example and how many have saved/claimed it. Note that it doesn’t even have to just be limited to restaurants either.</p>\n<p>It’s a simple idea and a spin of what already exists both digitally and non-digitally, but it’s a case where the user experience could make a difference relative to competitor products and obviously it is still an idea that needs a little more development to make it more unique, but it was something we all bought in to. It would also be a significantly cheaper alternative to Groupon and while it would probably result in less customers gained overall, the return on investment would probably be tastier (no pun intended) for them. So, this is really where the motivation for our hack day spin-off inspiration came to mind.</p>\n<p>Anyways, obviously implementing a proof of concept or minimum viable product of this idea as an SMS based prototype limited to restaurants in under 24 hours was potentially possible, the problem was that we knew it just wasn’t quite bizarre enough. This is where we came up with “SomethingGood”. For times when you just can’t decide what food you want to order in, so you text “FEED ME 4 people £30” to a service number and based on your previously configured dietary requirements and other preferences you may or may not have previously set within an accompanying web application, your randomised order based on the number of diners and budget is generated and sent to a local establishment to fulfil. You then stop wasting time arguing and trying to decide what you want to order in and instead spend more time anticipating the surprising discounted meal you’re getting and hopefully as a result end up enjoying your grub! The establishment have the freedom to accept or reject orders too and so on. Probably more random than bizarre, but a challenge nonetheless.</p>\n<p>While it might be tempting to compare it to “Just Eat via SMS”, the underlying business model and customer usage mindset that brings them to use this kind of service over alternatives, we believe would be different to Jus tEat. For example, as soon as users realise the trade off for going for a randomised order is a very good discount off the overall price which resultantly means more food for less money – as well as save time bickering about what to eat - users are suddenly willing to take the gamble. Restaurants are often happy to offer larger discounts even if it means smaller profit margins during less busy times such as during the week, but they know they’ll have a new long-term recurring customer if their food is tasty. If they are spending significantly less to be within this randomised pool, they will also most likely still be able to make a profit despite offering a large discount unlike the Groupon model described earlier in this post.</p>\n<p>Overall, was our idea bizarre enough for the challenge? Probably not. Some of the judges thought so, others not as much. Regardless, it was the best idea with a genuine business case and model that we could come up with in the short time that we had. We not only knew that we’d have fun developing the idea, but because we strangely felt as if it was something we would use ourselves, we had the motivation to build it whilst also having a laugh in doing so – which is what it’s all about in the end, right? In the end, it received plenty of social proof from judges at the event, other developers at the event and work colleagues. We were quite overwhelmed by the amount of people who just happily admitted on their own that they would want to use a service such as this… as bizarre as it sounds (see what I did there?).</p>\n<h2 id=\"my-two-cents\"><a href=\"#my-two-cents\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>My Two Cents</h2>\n<p>Those who know me well, know that I’m a huge advocate of the idea of learning from mistakes and I’d therefore like to finish off this post by covering some points based on what I’ve personally learned over the past weekend that you might find useful if you’re looking to attend your first hack. Obviously though, this is all relative to my own experience, so take everything I might suggest with a pinch of salt.</p>\n<h3 id=\"idea-over-complexity\"><a href=\"#idea-over-complexity\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Idea over complexity</h3>\n<ul>\n<li>It’s no lie that as software developers or engineers or craftsmen or whatever funky names different companies call us nowadays, plenty of us are very good when it comes to overcomplicating or overengineering things. We ended up implementing long winded elements that were fundamental to our idea such as the correct choosing of order items based on the user’s budget, their set user preferences &#x26; so on. The issue with this is that with complexity, comes a larger time to implement &#x26; unless you are trading time for getting a step closer to satisfying your chosen challenge (in this case, adding all this fluff wasn’t making our idea more bizarre, in fact it was doing the opposite) then don’t do it or just “hack” it in with fake data and spend more time either sleeping, or doing something more important.</li>\n<li>For example, when the judges came around and asked us to demo our\nfinal product, they didn’t question whether the randomised food\nselection was correctly functional which made us question whether we\nshould’ve just had a few different hard coded possibilities in our\nsolution and just respond with one at random. Doing so would have\nsaved a lot of development time that we put in to hacking together\nthe real thing.</li>\n<li>The simpler you can keep your project whilst still strongly meeting\nthe criteria of your challenge, the better. Ask yourself, will losing\nsleep over adding this extra feature really make a difference to the\njudges? Many of the previous year winners aren’t very complex\napplications from a development point of view, they just absolutely\nnail the challenge with their unique idea.</li>\n<li>If your idea to meet the criteria of your challenge is amazing and\nyou bump in to a few hiccups during the development process which\nmeans your demo suffers, you will most likely still be in better\nstead than someone else who has a lacklustre idea or an idea that\ndoesn’t quite suit the challenge but has developed it perfectly. This\nisn’t a University assessment.\n</li>\n</ul>\n<h3 id=\"favour-ideas-where-you-can-give-the-judges-a-front-end\"><a href=\"#favour-ideas-where-you-can-give-the-judges-a-front-end\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Favour ideas where you can give the judges a front-end</h3>\n<ul>\n<li>We knew going in to the event that we would suffer because of a lack\nof a real front-end to our idea as it was solely SMS based. A lot of the time, particularly with\nnon-technical judges, attractive presentation and a nice interface\nwith a logo that is easy on the eye can be a deal breaker and make\nthe difference – even if you’re just using faked data or faked\nfunctionality. Use your mobile device camera as part of your idea,\nscan QR codes, have maps or whatever funky stuff you can think of\nwhich will probably be simple to put together but will wow the\njudges.\n</li>\n</ul>\n<h3 id=\"is-your-team-well-balanced\"><a href=\"#is-your-team-well-balanced\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Is your team well balanced?</h3>\n<ul>\n<li>Following on from the last point, obviously this is relative to the challenge you are taking on and what you are developing, however the better you can delegate everybody’s time throughout the hack day, the more efficient the process will be.</li>\n<li>Are you building a mobile application? If so, do you need at least one expert in this field within the team? Do you need a complex front-end? If so, do you need at least one front-end developer who can crack on with it whilst the rest focus on the back-end? If you’re in it to win it, you should aim to build a team with people of different skillsets.</li>\n<li>In our case, we had a team of three developers with different skillsets alongside a business analyst. I myself am pretty full-stack nowadays, another member was an android expert and the other was a back-end C# whizz – shout out to the world of web forms. Could we have chosen a different challenge or pursued a different idea that would have better utilised our abilities?\n</li>\n</ul>\n<h3 id=\"consider-taking-technical-risks-we-think\"><a href=\"#consider-taking-technical-risks-we-think\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Consider taking technical risks… we think?</h3>\n<ul>\n<li>We were made to believe beforehand that the judges would not judge on\ntechnology decisions, however depending on the judges for the company\nwhom you are completing a challenge for, there very well may be\ntechnical judges in the fold.\t   </li>\n<li>We found that some technical judges did ask questions about why we\nchose specific technologies to build our hack with and based on\ncomments from some, they came across as dissatisfied with the usual\nstandard responses. I found this strange and disappointing as while\nit is correct to probably award a small number of bonus points to\nteams who have pushed themselves out of their comfort zones by taking\na risk, it seems the old idea that one shouldn’t use hackathons as an\nopportunity to learn something new is no longer something that is\nagreed upon, which is strange. I know we weren’t the only team that\nfelt confused about this, but maybe we were just unfortunate this\ntime round.</li>\n<li>For example, while we could’ve quite easily pivoted away from a C#\n.NET API hosted in Azure, unless we did something mental like try and\nuse the SMS API in something such as R or MATLAB, I’m not actually\nquite sure what wow factor would be added relative to the challenge\ngoals? Isn’t it globally accepted that hackathons aren’t the right\ntime to learn new things? Strange one.</li>\n<li>Another example is the fact that whilst our team was made up of\ndifferent technical backgrounds, we felt it was best for us to find\ncommon ground in the technology we were all using as that way we\ncould better support each other. Makes sense, right?</li>\n</ul>\n<h3 id=\"more-questions-to-ask-yourselves\"><a href=\"#more-questions-to-ask-yourselves\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>More questions to ask yourselves</h3>\n<ul>\n<li>Do you really need to persist any data? If not, don’t waste any time\nwith it.\t   </li>\n<li>Do you really need to deploy? If not, just run your project locally.</li>\n<li>Are you in it to have fun or to win? If you’re in it to have fun like we were, have fun. We had a judge telling us to try and pivot and try to make our idea more bizarre, but we didn’t really care as we were focused on our goal! (Note: These were all the same judges who also admitted they not only liked our idea but would most likely also use the idea if it existed, so that was fine with us!) We also used it as a great opportunity to meet and greet other fellow developers in the area, so don’t forget to network!\n</li>\n</ul>\n<p>Oh, we also had some ribs and steak from “Rump n’ Ribs” next door to the venue. They were amazing!\t\t   </p>\n<p>In conclusion, those are some of my tips and takeaways from my weekend at my first ever Hack Manchester! I most likely plan on participating again in the future if there are any challenges that do genuinely capture my interest or if I can offer something technically to a fellow team at work that might be attending future ones.</p>\n<p>If you’ve never been before, please do go. The guys who run it are awesome and it’s also a fantastic way to really push yourself and learn loads in a short period of time not just from what you’re doing but also from a lot of the people around you!</p>\n<p>The software/tech scene in the North West and Manchester is at an all-time high. Be proud of events like this and play a part in helping it grow!</p>\n<p>Peace ✌</p>\n"}},{"node":{"title":"My ReSharper-esque Visual Studio Code bindings","path":"/blog/2018/my-re-sharper-esque-visual-studio-code-bindings/","date":"11. May 2018","timeToRead":2,"description":"Used to ReSharper bindings like me? Get 'em in VS Code!.","content":"<p>Alright, let's be honest. Tools like ReSharper are a gift from the software development Gods. After all, the code just seems to... write itself. Brilliant, right?</p>\n<p>Well, no. Once as a developer you get used to a particular setup, it can feel very uncomfortable when you have to pivot away from it. That's why I've had to tweak my Visual Studio Code to have ReSharper-esque bindings on my MacBook that I use to write .NET Core applications on at home. </p>\n<p>I can't emphasize how smoother my development experience has now become and how much more I am now enjoying using Visual Studio Code as my main IDE <em>(I guess it isn't anything near an actual full blown IDE, but you get what I mean)</em> over alternatives! It's certainly much smoother than running full blown Visual Studio 2017 &#x26; ReSharper in Parallels.</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// Place your key bindings in this file to overwrite the defaults</span>\n<span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"alt+enter\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"command\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"editor.action.quickFix\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"when\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"editorTextFocus\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cmd+f12\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"command\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"workbench.action.gotoSymbol\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cmd+p\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"command\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"editor.action.triggerParameterHints\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cmd+k cmd+f\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"command\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"editor.action.formatSelection\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"when\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; !editorReadonly\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cmd+k cmd+f\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"command\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"editor.action.formatDocument\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"when\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"editorTextFocus &amp;&amp; !editorReadonly\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cmd+r cmd+r\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"command\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"editor.action.rename\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"when\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"editorHasRenameProvider &amp;&amp; editorTextFocus &amp;&amp; !editorReadonly\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cmd+shift+t\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"command\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"workbench.action.quickOpen\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre>\n<p>In order to use my binds, just hit CTRL+SHIFT+P in Visual Studio Code, search for your \"Preferences: Open Keyboard Shortcuts File\" and paste them on the right handside within your \"keybindings.json\" file.</p>\n<p>They should be relatively self explanatory with regards to what they do. There could very well be ReSharper bindings that you utilise that I've missed out as I've just really stuck to ones I use the most off the top of my head. I'm sure my bindings list will grow with time and so will yours.</p>\n<p>Obviously the ALT+ENTER functionality doesn't provide anywhere near as much help or depth as you get in Visual Studio &#x26; ReSharper, but it is more than enough to help you fix most problems that crop up, such as importing namespaces.</p>\n<p>Enjoy! Visual Studio Code is an absolute joy to use... when you tweak it right!</p>\n"}},{"node":{"title":"Turning iTerm in to a Quake style terminal on Mac OS","path":"/blog/2018/turning-i-term-in-to-a-quake-style-terminal-on-mac-os/","date":"10. May 2018","timeToRead":2,"description":"Like ConEmu on Windows? Get the same on Mac OS!","content":"<p>At work, I have a beautiful state of the art Lenovo Thinkpad. An incredibly powerful machine... or \"beast\" I perhaps should proclaim it to be. Particularly given the fact that it weighs about 20 kilograms! But then again, what else would you expect given how much processing power Visual Studio &#x26; ReSharper need nowadays...</p>\n<p><em>(Okay, maybe I'm overexaggerating...)</em></p>\n<p>My personal development machine however is a 2016 12\" Retina MacBook, currently running Mac OS High Sierra.\nMy previous machine? A 2015 13\" Retina MacBook Pro which certainly served me well during my University years.</p>\n<p>TL;DR - I like MacBooks. No, not because they look cool. But because they're incredibly light, the retina screens are a joy to look at, the build quality (and long-term performance) in my opinion trumps any non-Apple laptop I've owned in the past and trust me, I've owned a few.</p>\n<p>So the point is, I like to develop on a MacBook and one thing I miss from my Windows laptop at work is my cute quake style terminal that rolls down from the top of my screen when I need it to with a quick swift combination of ALT + ~. It annoys me when my terminal is a whole separate window.</p>\n<p>Most Mac OS users that I know end up downloading <a href=\"https://www.iterm2.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">iTerm</a> to replace the default terminal that ships with the OS. It's a great little tool, but it isn't exactly obvious how to turn it in to a Quake style terminal. So I'm going to teach you how!</p>\n<h2 id=\"step-by-step\"><a href=\"#step-by-step\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Step by step</h2>\n<ol>\n<li>After installing iTerm, on the top left of your screen click where it says \"iTerm2\" and head over to \"Preferences\".</li>\n<li>From there, click on the \"Keys\" tab and then proceed to the bottom left.</li>\n<li>Un-tick the \"Show/hide all windows with a system-wide hotkey\" option.</li>\n<li>Click the \"Create a Dedicated Hotkey Window...\" button.</li>\n<li>Set your \"Hotkey\" combination as you please.</li>\n<li>Ensure only \"Animate showing and hiding\" is ticked.</li>\n<li>Click \"OK\" and you should be good to go.</li>\n<li>If for whatever reason, you are unhappy with what your new quake style terminal looks like, head to the \"Profiles\" tab, choose the \"Hotkey Window\" profile, click on the \"Window\" tab and customise it to your liking. This should all be pretty self-explanatory if you've managed to make it this far!\n<br/><br/>\nHopefully this post helps people who find themselves in a similar predicament to the one I found myself in!\nI'm sure the next time I buy a new laptop, this tutorial will come in handy for myself regardless.</li>\n</ol>\n"}},{"node":{"title":"Removing conflicted copies on Dropbox","path":"/blog/2017/removing-conflicted-copies-on-dropbox/","date":"9. March 2017","timeToRead":2,"description":"As someone who uses Dropbox on pretty much all the different gazillion devices I own, I came across a rather frustrating issue. For some reason, almost every time my Macbook Pro would try to synchronise files modified on one of my Windows devices with Dropbox, meaning the older versions still on my Macbook would need updating, I'd end up with a 'conflicted copy' version of that file being generated by Dropbox.","content":"<p>As someone who uses Dropbox on pretty much all the different gazillion devices I own, I came across a rather frustrating issue.</p>\n<p>For some reason, almost every time my Macbook Pro would try to synchronise files modified on one of my Windows devices with Dropbox, meaning the older versions still on my Macbook would need updating, I'd end up with a 'conflicted copy' version of that file being generated by Dropbox.</p>\n<p>I haven't bothered tracing the exact reasons as to why this seems to constantly occur, but according to Dropbox it happens when more than one device are modifying the same file... which is never really the case when these files do crop up.</p>\n<p>Now, for obvious reasons this was really annoying because not only did it take up more storage space but as someone who can be quite OCD in terms of having minimal, clean folder structures, it made my Dropbox directories look incredibly messy.</p>\n<p>After some investigation, it became clear that the non-conflicted copies were in fact mostly identical to the most up to date versions of the files. It was also brought to my attention that the conflicted copies were being generated in the background every time a Dropbox sync happened on my Macbook Pro. I'm talking thousands of files almost every time a synchronisation happened... so it certainly wasn't a case of having all of these files open or being modified simultaneously. I've also formatted my Macbook Pro numerous time also and the problem never seemed to die down.</p>\n<p>So, I thought it was about time I came up with an automated solution of some sort to solve this issue. A bash script was the obvious solution that I can run every month or so to clean out the files. Not an ideal solution, but it gets the job done, right?</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> /YourDropboxLocation/Dropbox/\n<span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"conflicted copy\"</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">read</span> i<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$i</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">\\</span>rm <span class=\"token string\">\"<span class=\"token variable\">$i</span>\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span></code></pre>\n<p>The script is pretty straight forward. It simply runs in the root Dropbox directory, looks for all files which match the text \"conflicted copy\" using the grep command, pipes the files to a loop which iterates through all the found files and removes each and every single one.</p>\n<p>Now, the obvious hiccup occurs during the grep search command, where if we happened to have non Dropbox generated conflicted copy files (e.g. a file we have purposely called conflicted copy for some reason that isn't actually a Dropbox conflicted copy we want to delete) then that would get picked up as well and deleted. But other than that, I'd assume the chances of this occurring are incredibly slim.</p>\n<p>In conclusion, I'm sure I'm not the only one with this issue and hopefully this little script helps you out :)</p>\n"}}]}}},"context":{}}