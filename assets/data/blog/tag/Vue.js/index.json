{"hash":"464cf9a22bcb0fc0812667758e4176a554f788ea","data":{"tag":{"title":"Vue.js","belongsTo":{"edges":[{"node":{"title":"Easily test your Vuex store using Vue Test Utils.","path":"/blog/2020/easily-test-your-vuex-store-using-vue-test-utils/","date":"1. August 2020","timeToRead":5,"description":"Tired of brittle tests by testing your Vuex actions, mutations and getters all separately? Vue Test Utils has the solution!","content":"<p>If you like <a href=\"https://vuejs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue.js</a>, then you probably already know what <a href=\"https://vuex.vuejs.org/%5D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vuex</a> is. It's a state management pattern &#x26; library for Vue.js applications that is inspired by a Flux/Redux-like architecture.</p>\n<p>The library is developed and maintained by the Vue.js development team, which means it is the official recommended state management library for the framework. No more state management framework arguments!</p>\n<p>This post is going to encapsulate a technique I've come across that allows you to easily write tests around your Vuex store that results in far less brittle tests, than unit testing the individual moving parts individually.</p>\n<p>Vuex is made up of numerous core concepts. Actions, mutations and getters are the main moving parts. Because they are all written as plain JavaScript functions, they can all therefore be unit tested in isolation quite easily.</p>\n<p>The issue with this approach though is that it leads to brittle tests and sometimes, false-positives. For example, to unit test an action, we might test that it ends up commiting a specific mutation, with certain expected parameters. We could quite easily use <a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jest</a> to do this.</p>\n<p>The problem however is, what would happen if we changed the name of one of our Vuex action functions? Firstly, our test would fail to run because it no longer imports/references a function that exists. Since our test would import the actions function directly, we would simply rename the function call to pass the test.</p>\n<p>However, within our actual Vue component code, we will be doing <code class=\"language-text\">this.$store.dispatch(&#39;oldActionName&#39;)</code> in order to dispatch our action, not directly importing the action function. Therefore, if we don't have adequate end to end testing within our application, we could quite easily find ourselves in the scenario where we have passing unit tests but an application that doesn't work because we're still dispatching the old action!</p>\n<p>Fortunately though, the amazing Vue development team who are also behind Vue's official unit testing library (which uses Jest too by the way) - <a href=\"https://vue-test-utils.vuejs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue Test Utils</a> - have given us an easy solution for this problem. The solution, believe it or not, is to just facilitate the testing of our Vuex store as a whole, rather than the individual cogs.</p>\n<p>Below is a walkthrough with example pseudo-ish code modelled on how I've managed to test my store without running in to any of these problems.</p>\n<p>In this case, we are going to test our store end to end, actions, mutations, getters, you name it, all within a single test. I've seen some argue that this is an integration test, however since all external collaborators should still be mocked, I'd argue it's just a slightly larger unit test.</p>\n<p>The scenario is an Instagram-like post feed. I have a <code class=\"language-text\">loadPosts</code> action within the posts slice of my Vuex store, which uses <a href=\"https://github.com/axios/axios\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">axios</a> to make an asynchronous remote call to an API to retrieve these posts and then place them within the application's global Vuex state.</p>\n<p>We begin by defining our Vuex store:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Vue</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Vuex</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"vuex\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">posts</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./modules/posts\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token maybe-class-name\">Vue</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Vuex</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  modules<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    posts\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Next we define what our posts Vuex state slice/module looks like:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Vue</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">axios</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  posts<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> mutations <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">SET_POSTS</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> posts</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    state<span class=\"token punctuation\">.</span><span class=\"token property-access\">posts</span> <span class=\"token operator\">=</span> posts<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">loadPosts</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> commit <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    axios\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/posts/\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SET_POSTS\"</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> getters <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">getPosts</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">posts</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token punctuation\">{</span>\n    namespaced<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    state<span class=\"token punctuation\">,</span>\n    mutations<span class=\"token punctuation\">,</span>\n    actions<span class=\"token punctuation\">,</span>\n    getters\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Here we're storing a list of posts as part of our state. We have our <code class=\"language-text\">loadPosts</code> action that triggers the axios call. We have our <code class=\"language-text\">SET_POSTS</code> mutation that changes our value of <code class=\"language-text\">posts</code> within our global state and finally we have a getter called <code class=\"language-text\">getPosts</code> that we can use to retrieve the value of <code class=\"language-text\">posts</code> from our state.</p>\n<p>Now in order to test our state, it's simple. We want to dispatch the <code class=\"language-text\">loadPosts</code> action to our store and then assert that the expected value, is obviously stored within our store. Simple, right? In order to do this, we have to touch all the moving parts of our Vuex store within the test.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Vuex</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"vuex\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> createLocalVue <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"@vue/test-utils\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">createStoreConfig</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./__mocks__/storeConfig\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">mockPosts</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./__mocks__/posts.json\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> store<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">createLocalVue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Vuex</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> storeConfig <span class=\"token operator\">=</span> <span class=\"token function\">createStoreConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span>storeConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">posts</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"../../modules/posts\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createStoreConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n      modules<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        posts<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<p>Here we use the <code class=\"language-text\">createLocalVue</code> class provided to us by Vue Test Utils to create a Vue class for us to add our components, plugins (Vuex in this case) to, to use as part of our test without polluting the global Vue class. We put this within our <code class=\"language-text\">beforeEach</code> which ensures that every store test, not only uses a separate Vue instance but also starts off fresh with a blank store.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Vuex</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"vuex\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> createLocalVue <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"@vue/test-utils\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">createStoreConfig</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./__mocks__/storeConfig\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">mockPosts</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./__mocks__/posts.json\"</span><span class=\"token punctuation\">;</span>\n\njest<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  get<span class=\"token operator\">:</span> jest<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> mockPosts <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> store<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">createLocalVue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Vuex</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> storeConfig <span class=\"token operator\">=</span> <span class=\"token function\">createStoreConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span>storeConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Post Store Tests\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"loads posts and updates them in state\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">await</span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"posts/loadPosts\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token property-access\">getters</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"posts/getPosts\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toEqual</span><span class=\"token punctuation\">(</span>mockPosts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>In order to write our test, we need to mock our axios API call. We can use Jest to do this. In this case, I've opted to store a similar JSON representation of the data that would come back from the real API in a JSON file, however in theory you can use whatever you want, as long as it ends up being stored in state. The reason why we want to mock our axios calls is to prevent our unit tests taking a long time to run and to ensure we have no external dependencies which could cause obvious problems (e.g. if the API ever went down, our tests would fail even though our code in theory works fine).</p>\n<p>The test itself is simple. We use the store object we create before the running of each test to dispatch the action we want to test. If this action works correctly, then it should trigger the mutation too, under the hood. We then use our getter on the store to assert that the data within the state has mutated as expected. Done and dusted!</p>\n<p>One of the great things about testing our Vuex store this way is that within our test, we are calling <code class=\"language-text\">store.dispatch(&quot;posts/loadPosts&quot;)</code> the exact same way our real smart components are. We're no longer importing the <code class=\"language-text\">loadPosts</code> function directly and testing it under different circumstances to how our actual application is using it. So, if our test breaks, then our application is most certainly also broken!</p>\n<p>If any part of the Vuex journey to mutate an element of state breaks, the test will know about it. The main downside to this approach versus the more granular approach, is that it will be harder to debug exactly what moving part went wrong.</p>\n<p>Hope this helps...\nand as always, thanks for reading!</p>\n"}}]}}},"context":{}}