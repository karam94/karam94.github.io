{"hash":"6fe372bab11d0fceef4dd394fd3b9f44e24d1db3","data":{"post":{"title":"Dependency Injection in .NET Core","path":"/blog/2017/dependency-injection-in-net-core/","date":"11 March 2017","timeToRead":6,"tags":[{"id":".NET Core","title":".NET Core","path":"/blog/tag/.NET%20Core/"}],"description":"I think it's safe to say that there's a lot of hype around .NET Core nowadays because of it being cross-platform, open source, etc, which isn't really something we've been used to from Microsoft technologies over the years. So as someone who works in a predominantly .NET dominated environment, I wanted to dedicate some time playing around with it, building a simple API & just investigating how different it is to the regular .NET Framework.","content":"<p>I think it's safe to say that there's a lot of hype around .NET Core nowadays because of it being cross-platform, open source, etc, which isn't really something we've been used to from Microsoft technologies over the years. So as someone who works in a predominantly .NET dominated environment, I wanted to dedicate some time playing around with it, building a simple API &#x26; just investigating how different it is to the regular .NET Framework.</p>\n<p>One of the more intriguing perks of .NET Core that sparked my interest was its built in Dependency Injection which I'd assume is a concept most software developers are somewhat acquainted with. If you don't know what Dependency Injection is, it is a way of passing a classes external dependencies without having to instantiate the dependency every single time an instance of the base class is used. It has many useful uses, but one of my favourite is probably the fact that it makes mocking &#x26; testing classes a lot easier as well as helps overall with decoupling.</p>\n<p>Here's a quick example scenario, which should hopefully explain this:</p>\n<ul>\n<li>Imagine we have a <code class=\"language-text\">UserService</code> class, containing logic related to Users and a <code class=\"language-text\">UserRepository</code> class that talks to a database.</li>\n<li>A level above that, we also have a <code class=\"language-text\">UserController</code> class, which in an API project for example could contain methods that are mapped to <code class=\"language-text\">GET</code> or <code class=\"language-text\">POST</code> routes which could then allow your Angular, React or Vue front-end to call them or pass data to them to be executed.</li>\n<li>If a user is attempting to log in via our API, they will first hit a route defined within our <code class=\"language-text\">UserController</code> which would then require the <code class=\"language-text\">UserService</code> to work its magic and talk to a database somewhere via the <code class=\"language-text\">UserRepository</code>, compare password hashes &#x26; eventually return whether or not the user has indeed successfully managed to login successfully or not.</li>\n<li>Given that our <code class=\"language-text\">UserService</code> talks to a separate class which is the <code class=\"language-text\">UserRepository</code>, you'd probably normally do something like this simplified example:</li>\n</ul>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">UserRepository</span> repository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">UserService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        repository <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UserRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">User</span> <span class=\"token function\">Login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> password<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> repository<span class=\"token punctuation\">.</span><span class=\"token function\">GetUser</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>So let's say we now decide that we want to write some unit tests around our <code class=\"language-text\">UserService</code> but because of the nature of tests, we don't actually want our tests to force the <code class=\"language-text\">UserRepository</code> to talk to or play around with the database in any way shape or form. For logging in, this scenario isn't too bad. But imagine you're testing registering a new user... what do you want to do, create a new user object in the database every time you run your unit tests? This would cause chaos!</li>\n<li>A suitable solution would be to obviously mock out our <code class=\"language-text\">UserRepository</code>, so that when we Unit Test the <code class=\"language-text\">UserService</code>, we use a mocked out <code class=\"language-text\">UserRepository</code> where we can define what it should return when we pretend to call the <code class=\"language-text\">GetUser()</code> method and allow us to test our <code class=\"language-text\">UserService</code> in isolation. But we don't really want to mock out the <code class=\"language-text\">UserRepository</code> within the <code class=\"language-text\">UserService</code>code because then we're modifying our production code... this is where Dependency Injection becomes your best friend.</li>\n</ul>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">IUserRepository</span> _repository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> UserService <span class=\"token punctuation\">(</span><span class=\"token class-name\">IUserRepository</span> repository<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _repository <span class=\"token operator\">=</span> repository<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">User</span> <span class=\"token function\">Login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> password<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> _repository<span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>We have now applied Dependency Injection to our <code class=\"language-text\">UserService</code> class. Instead of instantiating our <code class=\"language-text\">UserRepository</code> within the constructor of our <code class=\"language-text\">UserService</code>, we've declared an interface of it at the top of the class and assigned it to the dependency passed in via the constructor parameters and due to the magic of dependency injection, regardless of whether you're using a framework like Spring, the built in .NET Core dependency injection or something like Castle Windsor to handle it for you, every time the <code class=\"language-text\">UserService</code> is being used, it will always have access to a usable instance of the <code class=\"language-text\">UserRepository</code> and the functions inside.</li>\n</ul>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GivenUserService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ThisIsATerribleTestLol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">User</span> exampleUser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">User</span> <span class=\"token punctuation\">{</span>\n        userid <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        username <span class=\"token operator\">=</span> <span class=\"token string\">\"Bill Gates\"</span><span class=\"token punctuation\">,</span>\n        password <span class=\"token operator\">=</span> <span class=\"token string\">\"somehashedstuff\"</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Arrange</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> repository <span class=\"token operator\">=</span> Substitute<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">For</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IUserRepository<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">UserService</span> userService <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UserService</span><span class=\"token punctuation\">(</span>repository<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Act</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> loggedUser <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">Login</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bill Gates\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"somehashedstuff\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Returns</span><span class=\"token punctuation\">(</span>exampleUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Assert</span>\n        Assert<span class=\"token punctuation\">.</span><span class=\"token function\">That</span><span class=\"token punctuation\">(</span>exampleUser<span class=\"token punctuation\">,</span> Is<span class=\"token punctuation\">.</span><span class=\"token function\">EqualTo</span><span class=\"token punctuation\">(</span>loggedUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>Within our tests, we can use a mocking framework to mock out the <code class=\"language-text\">UserRepository</code> based on an interface of the <code class=\"language-text\">UserRepository</code>, called <code class=\"language-text\">IUserRepository</code>. This now means that our mocking framework within our unit tests will now be able to mock out an <code class=\"language-text\">IUserRepository</code> and pass it to our <code class=\"language-text\">UserService</code>'s constructor when testing it. Allowing the <code class=\"language-text\">UserService</code> to run and thus be tested in isolation without actually hitting the database through the real <code class=\"language-text\">UserRepository</code>.</li>\n<li>Now, not only is our production code looking much better with reduced coupling, but we can also test our code in a much easier, more isolated fashion.</li>\n<li>The above test doesn't really test anything as it is just to showcase how the use of Dependency Injection makes life easier for us in terms of testing. In a real scenario, the <code class=\"language-text\">UserService</code> would more than likely contain more logic within the <code class=\"language-text\">Login()</code> method we are testing against.</li>\n</ul>\n<p>Back on topic, normally we tend to use Castle Windsor to handle Dependency Injection at work because of the perks that come with it being a full fledged IoC container. But what intrigued me about .NET Core's built in Dependency Injection was the claim that it was packaged with the framework. Whilst in older versions you would have to manually set up and configure the Dependency Injection yourself - which nowadays just means wasting time with the number of packages out there that do it for you - it apparently could be done in .NET Core with a few lines the same way something like Castle Windsor allows you to do once set up.</p>\n<p>So, to do this all you have to do is simply navigate to your .NET Core project's <code class=\"language-text\">Startup.cs</code> file and add the following under the <code class=\"language-text\">ConfigureServices(IServiceCollection services)</code> method:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  services<span class=\"token punctuation\">.</span><span class=\"token function\">AddMvc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">RabbitRepository</span> _rabbitRepository <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RabbitRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddTransient</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IUserRepository<span class=\"token punctuation\">,</span> UserRepository<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddScoped</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IDogRepository<span class=\"token punctuation\">,</span> DogRepository<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ICatRepository<span class=\"token punctuation\">,</span> CatRepository<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddInstance</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IRabbitRepository<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>_rabbitRepository<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The <code class=\"language-text\">AddTransient()</code> method creates a brand new instance of the <code class=\"language-text\">UserRepository()</code> each and every single time it is requested, even if requested within the same scope, these are great for stateless APIs. This means every time any kind of Service within a project uses a <code class=\"language-text\">UserRepository</code>, it will have a brand new Repository injected to use.</p>\n<p>The <code class=\"language-text\">AddScoped()</code> method creates a new instance of the <code class=\"language-text\">DogRepository</code> each time it is requested within different scopes. This means every Service within a project that uses a <code class=\"language-text\">DogRepository</code>, will have its own single <code class=\"language-text\">DogRepository</code> to keep re-using.</p>\n<p>The <code class=\"language-text\">AddSingleton()</code> method creates a new instance of the <code class=\"language-text\">CatRepository</code> once and shares the same instance across all different scopes within the application. This means every Service within a project that uses a <code class=\"language-text\">CatRepository</code>, will be injected with and use the same single <code class=\"language-text\">CatRepository</code> object.</p>\n<p>The <code class=\"language-text\">AddInstance()</code> method passes a specific instance of an <code class=\"language-text\">IRabbitRepository</code> type object as parameter, meaning each and every time it is requested regardless of scope, that specific <code class=\"language-text\">RabbitService</code> instance that was manually instantiated in the code above, will always be used and shared rather than let the Dependency Injection itself instantiate the object.</p>\n<p>And now... breathe! That's it. You have now set up the built in Dependency Injection within .NET Core in your project! Every time you require a dependency, simply register it however you like within your Startup.cs file and then just pop the interface in your constructor as shown above!</p>\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/emin-baycan-LV1CxYBgXqU-unsplash.07cc2b7.497401f6c7385197854952368075c244.jpg","size":{"width":860,"height":574},"sizes":"(max-width: 860px) 100vw, 860px","srcset":["/assets/static/emin-baycan-LV1CxYBgXqU-unsplash.a67b0b2.497401f6c7385197854952368075c244.jpg 480w","/assets/static/emin-baycan-LV1CxYBgXqU-unsplash.07cc2b7.497401f6c7385197854952368075c244.jpg 860w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 574' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-25e4f0429930b80edeb5ea6a4924f094'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-25e4f0429930b80edeb5ea6a4924f094)' width='860' height='574' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAArAEADASIAAhEBAxEB/8QAGgAAAgMBAQAAAAAAAAAAAAAABgcDBAUIAv/EADAQAAIBAwIEBQMEAgMAAAAAAAECAwQFEQAGEiExQQcTIlFhCBRxIzJCgSRSscHR/8QAGAEAAwEBAAAAAAAAAAAAAAAAAgMEAQX/xAAhEQACAgICAQUAAAAAAAAAAAABAgARAyESMRMiQVGh8f/aAAwDAQACEQMRAD8AVNRN9pTLDAAJ5B1H8Rpv/S/BAm6K55kDVApgIyeZGW5n/jSWpx59U8mOROB%2bNGW1brcNs3SmuVCGimjPLjUhXB6g/B0Ga3FCUKKnYc01VJcfLjiiFGsXF5pf1%2bZn9vDjpjvnSV8eWE1ytksiIs6gx5A5suc6qz%2bLzVHBIlFOlSesavlWP566Etz1F7vdelwuNOwMnoiiU54f61LjTKz2RCpVAjq8HdpUlFY6a8VMSyVtSvHGWGfKTtj5Pvow3baLffrHPR3FYmjcEI7EZRvcHsdAvhDulK%2bwU9qmmEFfRoYuB%2brKOjD3x3HxpOeIexd4y1VVW3a409TQQuz8X3fIJnPJTjhzrWyhQVOpq4i7Xch8hqC51tjqwplpZGRG/wBgNC%2b4aEDi9I1gfcCmlFVb52YrzGHLA68PutZkMd0pOF88pIemPlT/ANatx5NUYDpW4%2b/ps2NRVtuk3Dcolmk8wx0yuMhcdWx750475RUN3t9TTiCmqYYmMTgAEKR1HwRpHfTzv%2blscU%2b37vKsKGUvBI5wvPqpPb306L5uGz2y3TVTXCkiRyXIRxlie%2bB1Oubl7IPd/kYt3ftERDY4bNvyopWH6KRmaFXPQH/zU9VcKp92UdPHAj0iAtxAElsjGfbHzrEvN2qtybrlrqCOaRj6IURCzFR8Dtq9VVN5tryVdxtFTAroEWR1YKuNWox8YRjRgMPVYFwbqLJe6PxDhuaXB3qIaoT06REsXB6IV5ADHI/3oq8T49wzWamfc88cNJUTAJCoAVMA88Dp1HMnWr4Qk1m8JampxKyRFlLdiTjI/GiH6jknO27WaagM9MKkmWZQf0/TgAnoM578uWp2I8gUCP5ltn61ORdz0otl5ZaaU8DDiBDa9LKa23s0qjzU/kOXENWN3U9L9/8A4KFW/a6kEYOo4IzDa3U9znVAiaomEVapHBVRrlDgPjsffV2km8wx8yR8nWXaJXZeBmJUjBBPXU9D6K11XkqtyHtpj/MWpnYPg1tyjoNkUVYsamsrk86SXHPBPJQfYDRk1NRXC3PEyLPA/EjI69eeCMHQz4KTSTeG9oMjFuESIM9gHOBo1l5HI6gamZFrkZhYg1OUrpPNsjflelrb00sxVVboUPPhOjiLxstq25oqi11DysnC0J4WRvcc%2bo0qN01EtTui8SzuXkaqkyx78zrAkJaQAnkTjRDGHAJ7juValzcsMe5auoulHaaS2wxH0Q06cIf3PydAt14Fpii4x1GmDXTyQwCOJyqKMADtpZbjJWslCnAODj86dwCgVALE9z//2Q==' /%3e%3c/svg%3e"},"cover_image_credits":"<a href='https://unsplash.com/@aimlesscode'>Emin BAYCAN</a>"}},"context":{}}