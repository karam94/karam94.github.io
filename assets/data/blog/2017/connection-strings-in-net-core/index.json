{"hash":"609c449f7566d67d3cb4d8fe84a7a2641ad0f6e8","data":{"post":{"title":"Connection Strings in .NET Core","path":"/blog/2017/connection-strings-in-net-core/","date":"12 March 2017","timeToRead":3,"tags":[{"id":".NET Core","title":".NET Core","path":"/blog/tag/.NET%20Core/"}],"description":"When you waste an entire hour trying to define a connection string...","content":"<h1 id=\"out-of-date---this-post-is-from-2017-please-see-this-link-for-a-much-better-way-to-do-this-httpsdocsmicrosoftcomen-usaspnetcorefundamentalsconfigurationviewaspnetcore-50\"><a href=\"#out-of-date---this-post-is-from-2017-please-see-this-link-for-a-much-better-way-to-do-this-httpsdocsmicrosoftcomen-usaspnetcorefundamentalsconfigurationviewaspnetcore-50\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OUT OF DATE - This post is from 2017. Please see this link for a much better way to do this: <a href=\"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-5.0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-5.0</a></h1>\n<p>It's true. I wasted an entire hour trying to get my head around how on earth we can define connection strings in .NET Core.</p>\n<p>Traditionally in older .NET Frameworks, you just used to place something along these lines under <code class=\"language-text\">web.config</code>, somewhere in the root of your solution.</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>connectionStrings</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myConnectionString<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">connectionString</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>server=localhost;database=db;<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>connectionStrings</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Unfortunately though, <code class=\"language-text\">web.config</code> is now used differently in .NET Core and we now have a brand new <code class=\"language-text\">appsettings.json</code> where we are now apparently meant to use to specify... you guessed it, our app's settings.</p>\n<p>This apparently has something to do with how the new Entity Framework is configured and makes things more straight forward as once you write your <code class=\"language-text\">JSON</code> containing your connection string, you can then call a simple method in your <code class=\"language-text\">Startup.cs</code> which automatically configures everything for you. However, if like me you aren't using Entity Framework... let's just say, things aren't as straight forward as they used to be.</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"ConnectionData\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"DefaultConnection\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"ConnectionString\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Server=localhost;Database=db;Trusted_Connection=True;\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>We then have to create a <code class=\"language-text\">ConnectionData</code> class, which resembles the <code class=\"language-text\">JSON</code> structure within our <code class=\"language-text\">appsettings.json</code> file. Alongside it, a <code class=\"language-text\">DefaultConnection</code> class too.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConnectionData</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">DefaultConnection</span> DefaultConnection <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DefaultConnection</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> ConnectionString <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Next, we add the following to our <code class=\"language-text\">ConfigureServices(IServiceCollection services)</code> method in our <code class=\"language-text\">Startup.cs</code> file.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Configure</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ConnectionData<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Configuration<span class=\"token punctuation\">.</span><span class=\"token function\">GetSection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ConnectionData\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Finally, we now need to get used to the idea of using Dependency Injection to inject our <code class=\"language-text\">ConnectionData</code> object in to every class that requires access to our connection string. So, let's take a <code class=\"language-text\">RecipeRepository</code> class for example that might use some kind of ORM such as Dapper to talk to your database as an example.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RecipeRepository</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ConnectionData</span> _connectionData<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> _connectionString<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token function\">RecipeRepository</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IOptions<span class=\"token punctuation\">&lt;</span>ConnectionData<span class=\"token punctuation\">></span></span> connectionData<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    _connectionData <span class=\"token operator\">=</span> connectionData<span class=\"token punctuation\">;</span>\n    _connectionString <span class=\"token operator\">=</span> _connectionData<span class=\"token punctuation\">.</span>DefaultConnection<span class=\"token punctuation\">.</span>ConnectionString<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IDbConnection</span> Connection\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqlConnection</span><span class=\"token punctuation\">(</span>_connectionString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Recipe</span> <span class=\"token function\">GetRecipeById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IDbConnection</span> dbConnection <span class=\"token operator\">=</span> Connection<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      dbConnection<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// do things</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>So, due to what we specified in <code class=\"language-text\">Startup.cs</code>, we can now inject an <code class=\"language-text\">IOptions&lt;ConnectionData&gt;</code> object containing our data from <code class=\"language-text\">appsettings.json</code> in to our <code class=\"language-text\">RecipeRepository</code>, which then gives us access to the <code class=\"language-text\">DefaultConnection</code> object it holds and the <code class=\"language-text\">ConnectionString</code> within it. We can then create a new <code class=\"language-text\">SqlConnection</code> using that string and link it up with our ORM. In this case, I've used Dapper.</p>\n<p>Is there a simpler way to do this? I'm not too sure at the moment, but I am yet to find one! Fortunately though, .NET Core is somewhat young and hopefully we might see our old beloved friend <code class=\"language-text\">ConfigurationManager.ConnectionStrings[&quot;myConnectionString&quot;]</code> back again soon... or at least something that gives us access to <code class=\"language-text\">appsettings.json</code> without having to create a bunch of classes and forcing us to inject them in!</p>\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/daniel-fazio-m9LlUwkPvT8-unsplash.07cc2b7.35afebc4f25c7e9c7330e686554da5af.jpg","size":{"width":860,"height":688},"sizes":"(max-width: 860px) 100vw, 860px","srcset":["/assets/static/daniel-fazio-m9LlUwkPvT8-unsplash.a67b0b2.35afebc4f25c7e9c7330e686554da5af.jpg 480w","/assets/static/daniel-fazio-m9LlUwkPvT8-unsplash.07cc2b7.35afebc4f25c7e9c7330e686554da5af.jpg 860w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 688' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-65bcae7832af8a396af14a03ceac3433'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-65bcae7832af8a396af14a03ceac3433)' width='860' height='688' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAzAEADASIAAhEBAxEB/8QAGgAAAgMBAQAAAAAAAAAAAAAABQYAAwQCAf/EADMQAAIBAwMCBAQFAwUAAAAAAAECAwQFEQASITFBBhMiUWFxgZEHFSMyoRRCwTRSgpLR/8QAFgEBAQEAAAAAAAAAAAAAAAAAAQIA/8QAGxEBAQACAwEAAAAAAAAAAAAAAQARIQIxQRL/2gAMAwEAAhEDEQA/AF3xFSVklNVmzwxmrlXbvjOAp3e/tznjOcY0SskVRabbi4uj3GZETAAJVgm3zGHYnPTqePjruOgkWVWkk8poz62hyCPYkDBx/wAdVR3GgaseSKSNJ1RmqJpQWIO8r/2J4wOvGotMVNFFAj0TBVnELAkckZC8fYkn6aHVFujlqp5Khjin9AfOCnAZj9WJP0Gs1OsiXOjvizytQwOUlhYFGRXB9RXJDAnBz1/yw1qqlXUgbdqGKbcBuDIW4/kEfPOqizUpnotu6SRFYDYv7cduT17/AEzoR4htD1CPL%2brBXRDIcnLJg56/3L3I%2bBI1j8S1k4uT%2bVFE/mSBCXxgwlRk89Qee3bpnRqgqTJboDOTmJHjQMMs6tJtjz8doyR2Gkhl%2b7VNZU%2bAhW00YWuNRHlP3AMW2OMexB0PtlPNQxYMMMcrHe4hjOM9eSP8DTVSx/l9nhp8Ru87mpCKOAoZvV99v86XK6vFDLGxDySyFmCBggI6bic5PyzgayhtsGdEKpPGF9qhFMbbVVkQ9XmRxtFIDzwCCc9e4%2bGdOtvutNere7R04S4kJIVMORuBLqrpkEPg5x34IzpdpLvb7dc5aamo1aGnTdNLHxtHGdvUsef5HHOjNzEEggvFDvWpVQ7MAAZEDYZXx3U9D2IHucxgdVbJYiusjfnE0tbSztVbYQIAywxENuwS3LEYzjsPnpl8JeIGa17KuRJZoCyCSPByrdVYdSp4zxjPPHXXXiqx0818SRitPSzqs5KJkhnPIUd2Ln%2bBoB5dFaaxpKKKGdFlJjfkNuXKsh%2beee3I0gcdFne2ZKua2oGEm6mZc8JKCPoOo1VFU0lHBUou6VZcMsfLM%2bB/c3RU%2bA%2bQ66UPFF0q4IoHoklJlwDCNpAXOAeR15H865t01yut3s9ugkqR5w3VEjqFiUgnKrgAOdo78c6c04stx8bgeN4o5Z2eBIzDM8YAUMcYAH%2b1cAfPOmG7R0dwp0qImjMikPtjblGHfjkdT098c6aIKa1WRfy9IaaWokLITKqeohSxUblOFCgnPwyeoyn/AIgWaKr8PJd7BJDA/B2RRhVbPB9PQHPGQBn20GHUurHU26shWpoKKAJDVybqiqLKoUcEIoGMjvnHOB7Z0xmUz7LfRwtOY49reVgeYXIyPbHx76F3q2UtqcTyyzxU5yEZF3oB1wpzjB1ZZPEdAFl/LE/ShXdJJIyszOenC9Pjkk%2b2t84l5LFb5dnqfF8lqpqaergSnjT%2boiUskbqTwxH7exBHIOPfQ%2btt8lHRzmvj8qmhVpDLnJDEqMk46gcDA1XVXSs4klrP6GkZztSNQ0snHU84A%2bAyffWy332MSyRwXaZ5ZgFKyopGBycLwccc4PvrJAyPR1lR4i8XQFqZ1tVCyySCUY/TxtBPwII47/XTndvE1TYTUVtbXNcFlqVaI7PTSLkgHHYcgfbR7w3TW6mNbUUyCKaqnVWEfqWNsYBXPQZPccZOemqr%2blPW22sp68RyAROy72DA8YIHQ9s/TWyfXy9zvGTqCXKrguDGso5afY8boZhGZPRIF3AY/a3AGfbjQ%2bPxFBT0cFsp23ukhBIA4HJz8%2b/w0rw%2bHYRAtRVVIpSw2mIu3t1O39x/gfPVtDa6alqt9sneoOC2zgggrggZOfofbQAObOzEZ/DGRquz19vqz59HGBsjk9QXI7Z50JsEMdNBLHAuxBVPwNTU1fhS%2bxGX/QTVB5mWVowx7KDgDHTGvZ4ITaKW4eTGKzzTmQIBn0HqOh%2bupqanl01ceyHW%2bsqI0ngSZxC%2bVZM8EYb/AMH21jtEsn5hSQb2MU0pWRSf3AAnH31NTU%2bk%2bNqSqle81ELMDGFOBtHY8ay339GR5IvS6lGDDqCXYE/YD7amppbF/9k=' /%3e%3c/svg%3e"},"cover_image_credits":"<a href='https://unsplash.com/@danielfazio'>Daniel Fazio</a>"}},"context":{}}